#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
# Copyright (c) 2002 National Center for Supercomputing Applications (NCSA)
#                    All rights reserved.
#
# Written by Terrence G. Fleury (tfleury@ncsa.uiuc.edu)
#
##############################################################
#  MOVE THE STUFF BELOW TO THE TOP OF THE PERL SOURCE FILE!  #
##############################################################
package OSCAR::Infobox;

use strict;
use base qw(Exporter);
our @EXPORT = qw(displayInformation destroyInfoBox);
our @EXPORT_OK = qw(closeInfoBox);
require Tk::ROText;
no warnings qw(closure);

my($top);            # The Toplevel widget for the information box
my($infoTextBox);    # The Read-Only Textbox for the information text
##############################################################
#  MOVE THE STUFF ABOVE TO THE TOP OF THE PERL SOURCE FILE!  #
##############################################################
# Sample SpecTcl main program for testing GUI

use Tk;
require Tk::Menu;
#my($top) = MainWindow->new();
#$top->title("OSCAR::Infobox test");


# interface generated by SpecTcl (Perl enabled) version 1.2 
# from OSCAR::Infobox.ui
# For use with Tk402.002, using the grid geometry manager

sub Infobox_ui {
	our($root) = @_;

	# widget creation 

	our($informationLabel) = $root->Label (
		-text => 'Information',
	);
	my($closeButton) = $root->Button (
		-text => 'Close',
	);

	# widget commands

	$closeButton->configure(
		-command => \&OSCAR::Infobox::closeInfoBox
	);

	# Geometry management

	$informationLabel->grid(
		-in => $root,
		-column => '1',
		-row => '1',
		-sticky => 'ew'
	);
	$closeButton->grid(
		-in => $root,
		-column => '1',
		-row => '3'
	);

	# Resize behavior management

	# container $root (rows)
	$root->gridRowconfigure(1, -weight  => 0, -minsize  => 12);
	$root->gridRowconfigure(2, -weight  => 1, -minsize  => 130);
	$root->gridRowconfigure(3, -weight  => 0, -minsize  => 27);

	# container $root (columns)
	$root->gridColumnconfigure(1, -weight => 1, -minsize => 500);

	# additional interface code


#########################################################################
#  When the user clicks the "Close" button in the Information window,   #
#  we "hide" the window using UnmapWindow.  This way, we don't actually #
#  delete it so we have to create the top window only once.             #
#########################################################################
sub closeInfoBox
{
  $root->UnmapWindow if ($root);
}

#########################################################################
#  When the Selector is all done, it deletes all of its children. The   #
#  infoTextBox just happens to be one of the children!  So when the     #
#  Selector gets destroyed, call this subroutine just before you delete #
#  all of Selector's children.                                          #
#########################################################################
sub destroyInfoBox
{
  if ($root)
    {
      closeInfoBox;

      # Undefine the Tk widget variables for re-creation later.
      undef $root;
      undef $top;
      undef $infoTextBox;
    }
}

#########################################################################
#  Subroutine : displayInformation                                      #
#  Parameters : 1. The parent widget which manages the info window.     #
#               2. The title of the box (eg. "Info for pfilter").       #
#               3. The text to go in the info box.                      #
#  Returns    : Nothing.                                                #
#  This subroutine is called by outside functions to display some       #
#  information text in a separate window.  You must pass in the parent  #
#  widget (usually another Toplevel window) which will manage this      #
#  separate window.  You also give it a "title" and the main info text. #
#  The info text can be formatted however you like (ie. with or without #
#  line breaks) as the text window will automatically wrap at words.    #
#########################################################################
sub displayInformation # ($parent,$titlestr,$infostr)
{
  my($parent,$titlestr,$infostr) = @_;

  # Check to see if our toplevel info window has been created yet.
  if (!$top)
    { # Create the toplevel window just once
      if ($parent)
        {
          $top = $parent->Toplevel(-title => "Information",
                                   -width => '500',
                                   -height => '150',
                                  );
        }
      else
        { # If no parent, then create a MainWindow at the top.
          $top = MainWindow->new();
          $top->title("Information");
        }
      OSCAR::Infobox::Infobox_ui $top;   # Call the specPerl window creator
    }

  # Then create the scrollable text box and place it in the window's grid
  if (!$infoTextBox)
    {
      $infoTextBox = $root->Scrolled('ROText',
                                     -scrollbars => 'oe',
                                     -height => 10,
                                     -width => 80,
                                     -wrap => 'word'
                                    );
      $infoTextBox->grid(-in=>$root,
                         -column => '1',
                         -row => '2'
                         );
    }

  # Clear out the top window and Map it to the screen
  $infoTextBox->delete('1.0','end');
  $root->MapWindow;

  # Fill in the text for the title and the info
  $informationLabel->configure(-text => $titlestr);
  $infoTextBox->insert('end',$infostr);
}



	# end additional interface code
}
#OSCAR::Infobox_ui $top;
#Tk::MainLoop;

1;
