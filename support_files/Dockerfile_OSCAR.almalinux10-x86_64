# Experimental Dockerfile to build OSCAR rhel-10-x86_64 packages from scratch on AlmaLinux-10
# Build using the following command:
#       sudo docker build -t oscar/packager_rhel:10.0 -f Dockerfile_OSCAR.almalinux10-x86_64 .


FROM amd64/almalinux:10

LABEL maintainer="Olivier LAHAYE <olivier.lahaye@cea.fr>"
LABEL version="1.0"
LABEL vendor="OSCAR Cluster"
LABEL license="GPLv2"

# Set the locale
RUN dnf -y install glibc-locale-source glibc-langpack-en
RUN localedef -c -i en_US -f UTF-8 en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# Install basic build requirements
RUN dnf -y install dnf-plugins-core
RUN dnf install 'dnf-command(config-manager)'
RUN dnf config-manager --set-enabled crb

#RUN dnf -y install http://fr2.rpmfind.net/linux/epel/9/Everything/x86_64/Packages/e/epel-release-9-0.el9.noarch.rpm
RUN dnf -y install epel-release
RUN dnf -y install git-core

# Update distro
RUN dnf -y update

# Prepare rpm build environment
RUN dnf -y install rpm-build wget make subversion createrepo which file perl-generators perl-interpreter
RUN mkdir -p /root/rpmbuild/{SOURCES,SRPMS,RPMS,SPECS}

# Fix needed for yume
#RUN mkdir /var/run/lock

# Install OSCAR Perl requirements
RUN dnf -y install perl
RUN dnf -y install --skip-broken \
                        'perl(AppConfig)' 'perl(Carp)' 'perl(Cwd)' 'perl(Data::Dumper)' 'perl(English)' \
                        'perl(File::Copy::Recursive)' 'perl(File::Copy)' 'perl(File::Basename)' 'perl(File::Path)' \
                        'perl(Getopt::Long)' 'perl(POSIX)' 'perl(Exporter)' 'perl(ExtUtils::MakeMaker)' \
                        'perl(Tk)' 'perl(DBI)' 'perl(DBD::mysql)' 'perl(XML::Simple)' \
                        perl-Module-Build perl-devel 'perl(Test::More)'

# Install requirements and build it
RUN dnf -y install --skip-broken gcc syslinux

# Install comfort tools
RUN dnf -y install --skip-broken vim openssh-clients

# Build perl-Tk (missing in RHEL/CentOS-9)
#RUN dnf -y install --skip-broken perl-CPAN perl-open libX11-devel libpng-devel tk-devel kernel-devel kernel-headers
#RUN dnf -y reinstall --skip-broken kernel-headers
#RUN perl -MCPAN -e'notest install Tk'
#RUN perl -MCPAN -e "CPAN::Shell->notest('install', 'Tk')"
#RUN perl -MCPAN -e'notest install AppConfig'
#RUN perl -MCPAN -e "CPAN::Shell->notest('install', 'AppConfig')"
#RUN perl -MCPAN -e "CPAN::Shell->notest('install', 'File::Copy::Recursive')"


# Build and install Tk-TextANSIColor
RUN cd /tmp && wget http://olivier.lahaye1.free.fr/OSCAR/downloads/Tk-TextANSIColor-0.16.tar.gz
RUN cd /tmp && tar xvfz Tk-TextANSIColor-0.16.tar.gz
RUN cd /tmp/Tk-TextANSIColor-0.16 && perl Build.PL --installdirs vendor && perl Build && perl Build install --installdirs vendor
RUN cd /tmp && rm -rf Tk-TextANSIColor*

# Step 16/47: Get OSCAR source tree
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar.git

# Build oscar base and install it
RUN cd /root/oscar && make source_tarball && rpmbuild -tb /root/oscar/tmp/oscar-6.3.tar.gz

# Install opkgc build requirements and build it
#RUN dnf -y install --skip-broken python2-devel python2-cheetah python2-lxml
RUN dnf -y install --skip-broken python3-devel python3-cheetah python3-lxml xmlto autoconf automake rsync
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar-opkgc.git
#RUN ln -s /bin/python2 /bin/python
RUN cd /root/oscar-opkgc && ./autogen.sh && ./configure --prefix=/usr && make install

# Install oda and configure it to use mysql (needed by oscar-config)
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar-oda.git
RUN cd /root/oscar-oda && make install DESTDIR=/
RUN cd /usr/share/perl5/vendor_perl/OSCAR && ln -s ODA/mysql.pm oda.pm

# Reinstall oscar rpm packages.
RUN rpm -Uvh --nodeps /root/rpmbuild/RPMS/noarch/*oscar-*rpm
RUN dnf config-manager --set-disabled repoÂ§oscar

# Install default config file for OSCAR so oscar-packager will be happy..
RUN cp /root/oscar/share/etc/templates/oscar.conf /etc/oscar/oscar.conf

# Install oscar-config requirements.
# Configure OSCAR (Creates /tftpboot/distro/<distro>.url and /tftpboot/oscar/<distro>.url)
RUN oscar-config --setup-distro almalinux-9-x86_64

# Install packman
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar-packman.git
RUN cd /root/oscar-packman && make install DESTDIR=/

# Install yume
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar-yume.git
RUN cd /root/oscar-yume && make install DESTDIR=/

# Install oscar-packager requirements
RUN dnf -y install docbook-utils texlive-ec
RUN dnf -y install 'tex(epstopdf-base.sty)' 'tex(expl3.sty)' 'tex(fancyhdr.sty)' 'tex(pcrr8t.tfm)' 'tex(phvb8t.tfm)' 'tex(pplr8c.tfm)' 'tex(pplr8r.tfm)' 'tex(ptmr8t.tfm)' 'texlive-dvips' 'texlive-mathpazo' 'texlive-gsftopk' 'texlive-jadetex' 'texlive-metafont' 'texlive-modes'
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar-packager.git
RUN cd /root/oscar-packager && make rpm
RUN rpm -Uvh --nodeps /root/rpmbuild/RPMS/noarch/oscar-packager*.rpm

# Install OSCAR repo
#RUN yum -y --skip-broken install /root/rpmbuild/RPMS/noarch/oscar-release*rpm

# Install some deps for systemimager BUG (need to update build.cfg)
RUN dnf -y install bc bind-utils cryptsetup dejavu-serif-fonts dosfstools e2fsprogs gdisk hwdata jq kernel lshw lsscsi lvm2 mdadm net-tools nmap-ncat openssh-server parted pciutils perl-JSON plymouth-plugin-label plymouth-plugin-script psmisc rtorrent socat usbutils xfsprogs xmlstarlet dos2unix httpd-filesystem httpd

# Install some deps for apitest
RUN dnf -y --disablerepo="repo-oscar" install http://olivier.lahaye1.free.fr/OSCAR/repos/unstable/rhel-10-x86_64/python3-twisted-22.4.0-3.el9.noarch.rpm http://olivier.lahaye1.free.fr/OSCAR/repos/unstable/rhel-10-x86_64/python3-hyperlink-21.0.0-9.el9.noarch.rpm http://olivier.lahaye1.free.fr/OSCAR/repos/unstable/rhel-10-x86_64/python3-incremental-21.3.0-4.el9.noarch.rpm
#RUN dnf -y --disablerepo="repo-oscar" install python3-twisted

# REBUILD oscar essential rpms.
RUN oscar-packager --all Tk-TextANSIColor
RUN oscar-packager --all oscar
RUN oscar-packager --all packman
RUN oscar-packager --all yume
RUN oscar-packager --all opkgc
RUN oscar-packager --all oscar-packager
RUN oscar-packager --all systemconfigurator
RUN oscar-packager --all systemimager
RUN oscar-packager --all oda
RUN oscar-packager --all orm
RUN oscar-packager --all apitest
RUN oscar-packager --all systeminstaller-oscar

# Cleanup build stuffs to make room in the image
RUN /bin/rm -rf /root/oscar* /root/.cpan /root/rpmbuild/*/* /var/lib/oscar-packager/downloads/*

# Now we add the repo so failed build are available anyway. In a normal situation,
# this should not be required
RUN rpm -q oscar-release > /dev/null || yume -y install /tftpboot/oscar/*/oscar-release*rpm
RUN yume clean all
RUN rm -rf /tftpboot/oscar/rhel-10-x86_64/.repodata
RUN /bin/rm -rf /tftpboot/oscar/rhel-10-x86_64/repodata /tftpboot/oscar/rhel-10-x86_64/repocache
RUN yume --prepare
RUN yume -y update
RUN yume -y reinstall oscar-release

# Now install as rpm what has been installed by hand before as bootstrap.
RUN yume -y install yume packman opkgc


# now we reinstall core packages and oscar-packager (already installed from build dep requirements. Make sure we use latest version)
RUN yume -y reinstall oscar oscar-core liboscar-server liboscar-client oscar-data oscar-devel oscar-utils oscar-packager

# Renstall systemimager server parts that have already been installed from oscar deps.
RUN yume -y reinstall systemimager-initrd_template systemimager-x86_64boot-standard systemimager-server systemimager-common systemimager-webgui

# Install bittorrent that is needed for systemimager-bittorrent
#RUN yume -y install bittorrent bittorrent-gui
# Install systemimager missing bits.
RUN yume -y install --skip-broken systemimager-bittorrent systemimager-client systemimager-flamethrower

# Cleanup tftp tree so we can mount host space later.
RUN /bin/rm -rf /root/rpmbuild/*/* /tftpboot/oscar/rhel-10-x86_64/*

# Somme pre-setup for OSCAR
# 1/ Mandatory try as /etc/hosts seems non editable directly by sed (ressource buszy)
# The /etc/host is OVERWRITTEN at each step, so this line is useless and only here for interactive tip
RUN cat /etc/hosts | sed -e 's/^\(172.*\)$/\1 oscar-server/g' > /etc/hosts.new
RUN cat /etc/hosts.new > /etc/hosts || true
# 2/ Disable GSS api on mariadb othewize it won't start
# To start lmysql then: /usr/libexec/mysqld --basedir=/usr --user=root
# Then secure it: mysql_secure_installation
RUN sed -i -e 's/^\(plugin-load-add\)/#\1/g' /etc/my.cnf.d/auth_gssapi.cnf || true

CMD [ "bash" ]
