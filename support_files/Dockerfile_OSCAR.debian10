# Experimental Dockerfile to build OSCAR from scratch on Debian-10 (Buster)
# Build using the following command:
#       sudo docker build -t oscar/unstable_deb:10.11 -f Dockerfile_OSCAR.debian10 .


FROM debian:10

LABEL maintainer="Olivier LAHAYE <olivier.lahaye@cea.fr>"
LABEL version="6.5"
LABEL vendor="OSCAR Cluster"
LABEL license="GPLv2"

# Update distro repos indexes
RUN apt-get update

# Set the locale
RUN apt-get -y install locales
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && \
    locale-gen
ENV LANG en_US.UTF-8  
ENV LANGUAGE en_US:en  
ENV LC_ALL en_US.UTF-8

# Update distro
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
RUN apt-get -y upgrade
RUN apt-get -y install dialog apt-utils
RUN apt-get -y install perl-modules
RUN apt-get -y install apt-file
RUN apt-file update

# Install basic build requirements
RUN apt-get -y install git


# Prepare deb build environment
RUN apt-get -y install dpkg-dev build-essential debhelper git make rpm

# Install OSCAR Perl requirements
RUN apt-get -y install perl-base libappconfig-perl libfile-copy-recursive-perl perl-tk libdbi-perl libdbd-mysql-perl \
	libxml-simple-perl libtest-simple-perl libmodule-build-perl

# Install other requirements
RUN apt-get -y install gcc syslinux linuxdoc-tools docbook-utils hostname dracut
RUN apt-get -y install libmldbm-perl libappconfig-perl libdbd-csv-perl libsql-statement-perl libtext-csv-perl libmldbm-sync-perl

# Install comfort tools
RUN apt-get -y install vim openssh-client
RUN apt-get -y install python3-dev python3-cheetah python3-lxml python3-twisted xmlto autoconf automake rsync python3-all-dev #opkgc
RUN apt-get -y install python3-distutils python3-pip python3-setuptools dh-python

# build dependancies:
RUN apt-get -y install tcsh # oscar depnds on it?

# Build and install Tk-TextANSIColor
RUN apt-get -y install wget
RUN cd /root && wget http://www.usablesecurity.net/OSCAR/pkgs/downloads/Tk-TextANSIColor-0.16.tar.gz
RUN cd /root && tar xvfz Tk-TextANSIColor-0.16.tar.gz
RUN cd /root/Tk-TextANSIColor-0.16 && perl Build.PL --installdirs vendor && perl Build && perl Build install --installdirs vendor

# Add OSCAR repos URL so systemconfigurator is available as a package.
# Comment line if repo is unavailable
RUN echo "deb [trusted=yes] http://www.usablesecurity.net/OSCAR/repos/unstable/debian-10-x86_64 dists/buster/binary-amd64/" > /etc/apt/sources.list.d/oscar.list
RUN echo "deb [trusted=yes] file:/tftpboot/oscar/debian-10-x86_64 dists/buster/binary-amd64/" >> /etc/apt/sources.list.d/oscar.list
RUN apt-get -y update

# Step 16/47: Get OSCAR source tree
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar.git

# Build oscar base and install it
RUN cd /root/oscar && make deb && dpkg -i --force-depends /root/oscar/tmp/*oscar*deb

# Install opkgc build requirements and build it
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar-opkgc.git
RUN cd /root/oscar-opkgc && ./autogen.sh && ./configure --prefix=/usr && make install

# Install oda and configure it to use mysql (needed by oscar-config)
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar-oda.git
RUN cd /root/oscar-oda && make install DESTDIR=/
RUN cd /usr/share/perl5/OSCAR && ln -s ODA/mysql.pm oda.pm

# Reinstall oscar rpm packages.
#RUN rpm -Uvh --nodeps /root/rpmbuild/RPMS/noarch/oscar-*rpm

# Install default config file for OSCAR so oscar-packager will be happy..
RUN cp /root/oscar/share/etc/templates/oscar.conf /etc/oscar/oscar.conf

# Install oscar-config requirements.
# Configure OSCAR (Creates /tftpboot/distro/<distro>.url and /tftpboot/oscar/<distro>.url)
RUN oscar-config --setup-distro debian-10-x86_64

# Install packman
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar-packman.git
RUN cd /root/oscar-packman && make install DESTDIR=/

# Install yume
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar-yume.git
RUN cd /root/oscar-yume && make install DESTDIR=/

# Install rapt
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar-rapt.git
RUN cd /root/oscar-rapt && make install DESTDIR=/

# Install oscar-packager requirements
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar-packager.git
RUN cd /root/oscar-packager && make deb
RUN dpkg -i --force-depends /root/oscar-packager*.deb

# Install oscar-systeminstaller
RUN cd /root && git clone --depth=1 https://github.com/oscar-cluster/oscar-systeminstaller.git
RUN cd /root/oscar-systeminstaller && dpkg-buildpackage -uc -us
RUN dpkg -i --force-depends /root/systeminstaller*deb

# REBUILD oscar essential rpms.
RUN oscar-packager --all Tk-TextANSIColor
RUN oscar-packager --all oscar
RUN oscar-packager --all packman
RUN oscar-packager --all yume
RUN oscar-packager --all opkgc
RUN oscar-packager --all oscar-packager
RUN oscar-packager --all systemconfigurator
RUN oscar-packager --all systemimager
RUN oscar-packager --all oda
RUN oscar-packager --all orm
RUN oscar-packager --all apitest
RUN oscar-packager --all systeminstaller-oscar

# Cleanup build stuffs to make room in the image
RUN /bin/rm -rf /root/*

# Now we add the repo so failed build are available anyway. In a normal situation,
# this should not be required
#RUN rpm -q oscar-release > /dev/null || yume -y install /tftpboot/oscar/*/oscar-release*rpm
RUN apt-get -y update
#RUN /bin/rm -rf /tftpboot/oscar/rhel-7-x86_64/repodata /tftpboot/oscar/rhel-7-x86_64/repocache && yume --prepare
#RUN apt-get install --reinstall oscar-release

# Now install as rpm what has been installed by hand before as bootstrap.
RUN apt-get -y install rapt yume packman opkgc


# now we reinstall core packages and oscar-packager (already installed from build dep requirements. Make sure we use latest version)
RUN apt-get -y install --reinstall oscar oscar-base oscar-base-client oscar-base-lib oscar-base-scripts oscar-base-server oscar-devel oscar-utils oscar-packager

# Renstall systemimager server parts that have already been installed from oscar deps.
RUN apt-get -y install --reinstall systemimager-initrd_template systemimager-x86_64boot-standard systemimager-server systemimager-common

# Install bittorrent that is needed for systemimager-bittorrent
#RUN apt-get -y install bittorrent bittorrent-gui
# Install systemimager missing bits.
RUN apt-get -y install systemimager-bittorrent systemimager-client systemimager-flamethrower

# Cleanup image
# RUN /bin/rm -rf /root/*

CMD [ "bash" ]
