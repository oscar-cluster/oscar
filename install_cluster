#!/usr/bin/perl

# Copyright 2004 Revolution Linux
#           Benoit des Ligneris <bdesligneris@revolutionlinux.com>
# Copyright (c) 2003, The Board of Trustees of the University of Illinois.
#                     All rights reserved.
# Copyright 2002 International Business Machines
#                Sean Dague <japh@us.ibm.com>
# Copyright (c) 2002-2005 The Trustees of Indiana University.  
#                         All rights reserved.
#
# $Id$
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This is the oscar installation program.  It must be called with
#   one argument which is the installation network device

use strict;
use Cwd qw(chdir cwd);

use lib cwd() . "/lib";
use vars qw($VERSION);
use OSCAR::Logger;
use OSCAR::OCA::OS_Detect;
use POSIX;
use Carp;

# First of all, enforce that the user running this script is 'root'

croak "You must be 'root' to run this script.  Aborting" if ($< != 0);

# Validate the interface before we do too much...

my %nics;
open IN, "/sbin/ifconfig |" || die "ERROR: Unable to query NICs\n";
while( <IN> ) {
	next if /^\s/ || /^lo\W/;
	chomp;
	s/\s.*$//;
	$nics{$_} = 1;
}
close IN;

my $adapter = shift;
die "
ERROR: A valid NIC must be specified for the cluster private network.

Valid NICs: ".join( ", ", sort keys %nics )."\n\n"
	unless $adapter && exists $nics{$adapter};

# If $OSCAR_HOME is not set, then set it with whatever came in from
# configure's --prefix.

if (!defined($ENV{OSCAR_HOME})) {
    my $found = 0;

    # Look for an output file from configure that specifies where
    # OSCAR_HOME should be.  First look relative to this directory,
    # then look in /etc/profile.d.

    if (-f "scripts/oscar_home.sh" &&
        open(OH, "grep OSCAR_HOME scripts/oscar_home.sh|")) {
        $found = 1;
    } elsif (-f "/etc/profile.d/oscar_home.sh" &&
             open(OH, "grep OSCAR_HOME /etc/profile.d/oscar_home.sh|")) {
        $found = 1;
    }

    # If we found it, read and use it.  Otherwise, complain and exit.

    if ($found == 1) {
        my $temp = <OH>;
        chomp($temp);
        close(OH);

        my ($bogus, $oscar_home) = split(/=/, $temp);
	$ENV{OSCAR_HOME} = $oscar_home;
        printf("Manually setting OSCAR_HOME to: $ENV{OSCAR_HOME}\n");
    } else {
	    die("ERROR: You must (at a minimum) run configure first.\n");
    }
}

# Now check to see if there is an $ENV{OSCAR_HOME} directory, and if
# so, if we're in it.

if (! -d $ENV{OSCAR_HOME}) {
    die("ERROR: The environment variable \$OSCAR_HOME was set, but the directory 
that it points to ($ENV{OSCAR_HOME}) does not exist!");
}
if (!chdir($ENV{OSCAR_HOME})) {
    die("ERROR: The environment variable \$OSCAR_HOME was set, but could not 
change into the directory that it points to ($ENV{OSCAR_HOME})!");
}

# Get OSCAR's version

my $oscar_version;
my $oscar_version_script = $ENV{OSCAR_HOME} ."/" . "dist/get-oscar-version.sh";
my $oscar_version_file = $ENV{OSCAR_HOME} . "/" . "VERSION";

# Use the scripty-foo to get oscar version information.

if ( -e "$oscar_version_file" ) {
    my $cmd = "$oscar_version_script $oscar_version_file --full";

    open(CMD, "$cmd|") or die "ERROR: failed to get oscar version '$cmd' - $!";
    $oscar_version = <CMD>;
    chomp($oscar_version);

    close(CMD);
}
else {
    die("ERROR: OSCAR VERSION file missing '$oscar_version_file' - aborting!");
}


# Once here, we know that $ENV{OSCAR_HOME} is set, it exists, we can
# get in it, and we have successfully read the VERSION file from it.
# So we should be good to go for the rest of the installation.

# Setup the lockfile

my $lockfile = "$ENV{OSCAR_HOME}/.install_cluster_lockfile";

# Set perl to autoflush all output

$| = 1;

# END processing to remove the lockfile when we die(), exit, or otherwise
# cease to exist.
END {
    unlink $lockfile if $lockfile && -f $lockfile;
}

# Check for the lockfile (this is certainly not foolproof -- it's just
# "good enough")

if (-f $lockfile) {
    open(LOCKFILE, $lockfile);
    my $pid = <LOCKFILE>;
    close(LOCKFILE);
    # chmod($pid);  DNL ASKS: WHO THINKS THIS DOES ANYTHING CORRECT?
    chomp $pid;  #  DNL: Perhaps this was meant?
    print "There is an OSCAR installer lockfile that says an installer process\n";
    print "is still running with process id $pid. Checking if that is true ...\n";
    if( kill 0, $pid ) {
	print "There is a process running with that process id.\n";
	print "If this is no an OSCAR installer process, remove\n";
	print "the following file and run $0 again:\n";
	print "$lockfile\n";
	undef $lockfile; # Prevent END processing from deleting lockfile.
	exit(0);
    } else {
	print "There is no process running with process id $pid.\n";
	print "Removing lockfile $lockfile and continuing.\n";
	unlink $lockfile;
    }
}

# Write our PID to the lockfile

open(LOCKFILE, ">$lockfile");
print LOCKFILE $$;
close(LOCKFILE);

# Setup to capture all stdout/stderr

my $oscar_logfile = $ENV{OSCAR_HOME} . "/oscarinstall.log";
if (!open (STDOUT,"| tee $oscar_logfile") || !open(STDERR,">&STDOUT")) {
    die("ERROR: Cannot tee stdout/stderr into the OSCAR logfile:
   $oscar_logfile
Aborting the install.\n");
}

# First output banner

oscar_log_section("Running OSCAR install_cluster script");

# Fix to make multi lingualness work

$ENV{LANG} = "C";
$ENV{LC_ALL} = "C";
$ENV{LANGUAGE} = "C";
$ENV{LC_COLLATE} = "C";
$ENV{LC_CTYPE} = "C";
$ENV{LC_MESSAGES} = "C";
$ENV{LC_MONETARY} = "C";
$ENV{LC_NUMERIC} = "C";
$ENV{LC_TIME} = "C";

# Check to see if this is a supported platform

oscar_log_subsection("Checking if this is a supported platform");
my $os = OSCAR::OCA::OS_Detect::open();
if (!$os) {
    print("ERROR: This is an unsupported system.  Specifically, no module in OSCAR/OCA/OS_Detect positively identified this as a supported system.\n");
    die("Cannot continue");
}

# add entries to path that we know we will need

$ENV{PATH} = $ENV{PATH} .
    ':/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin';


# Ensure that the package scripts are executable (wizard_prep runs
# some of them)

system("chmod 755 packages/*/scripts/*");

my $pqtv = `rpm -q --quiet --qf '%{VERSION}' perl-Qt 2>/dev/null`;
if ( $pqtv && $pqtv < 3 ) {
  !system("rpm -e perl-Qt") or warn("Couldn't remove perl-Qt");
  oscar_log_subsection("Removing installed perl-Qt RPM because version is < 3");
}

# get rid of installed tftp-server, it conflicts with atftp
# (there should be a check whether this is an RPM based distro here!)
if (!system("rpm -q tftp-server >/dev/null 2>&1")) {
  oscar_log_subsection("Removing installed tftp-server RPM, this conflicts with OSCAR atftp-server");
  !system("rpm -e tftp-server") or warn("Couldn't remove tftp-server");
}

# TJN (10/4/2005): Note, a fairly evil, totally non-obvious issue 
#    occurs if you have /tftpboot setup as a symlink,
#    e.g., /tftpboot -> /var/tftpboot/,  and remove 'tftp-server'. 
#    What happens is the '/tftpboot' dir (symlink) gets removed!  
#    This is b/c '/tftpboot' is part of the RPM file manifest for 
#    tftp-server (at least as of v0.33-3 it does). 
#
#    Adding a sanity check after the RPM removes to check for this case!

croak "\nError: \'/tftpboot\' is gone!" if(! -d "/tftpboot" );

$ENV{OSCAR_HEAD_INTERNAL_INTERFACE}=$adapter;

# Run the wizard_prep script

my $cmd = "cd $ENV{OSCAR_HOME}/scripts && ./wizard_prep";
oscar_log_subsection("Running: \"$cmd\"");
!system($cmd)
    or die("Oscar Wizard preparation script failed to complete");
oscar_log_subsection("Successfully ran wizard_prep");
#
# HORRIBLE HACK ALERT -- FIXING MANDRAKE SNAFU
#
#print __FILE__,":",__LINE__,":INC:",join(", ",@INC),"\n";
my %incs = map { $_ => 1 } @INC;
foreach ( `perl -e 'print "\$_\n" foreach \@INC'` ) {
	chomp;
	eval "use lib \"$_\"" unless $incs{$_};
}
undef %incs;
#print __FILE__,":",__LINE__,":INC:",join(", ",@INC),"\n";

oscar_log_section("Prerequisites installed");

# Print some environment information

oscar_log_subsection("OSCAR version: $oscar_version");
my $hostname = (uname)[1];
my ($shorthostname, $domainname) = split(/\./,$hostname,2);
oscar_log_subsection("Command line invocation: $0 $adapter " . 
		     join(" ", @ARGV));
oscar_log_subsection("Hostname: $shorthostname");
oscar_log_subsection("Domainname: $domainname");
oscar_log_subsection("Network interface: $adapter");
oscar_log_subsection("Linux distribution: $os->{linux_distro} $os->{linux_distro_version}");
oscar_log_subsection("Kernel version: " . (uname)[2]);
oscar_log_subsection("Architecture: $os->{arch}");
oscar_log_subsection("Running in directory: " . cwd());
oscar_log_subsection("PATH: " . $ENV{PATH});

# Do some basic sanity checks -- fail immediately if we can tell right
# now that this install won't [eventually] succeed.

if ($shorthostname eq "localhost") {
    die("
ERROR: Your hostname is \"localhost\".
OSCAR requires that you choose another hostname.
Aborting the install.\n");
}
if ($hostname eq "localhost.localdomain") {
    die("
ERROR: Your hostname is \"localhost.localdomain\".
OSCAR requires that you choose another hostname.
Aborting the install.\n");
}
if (!$ENV{DISPLAY}) {
    die("
ERROR: Your \"DISPLAY\" environment variable is not set, probably
indicating that you are not running in an X windows environment.
OSCAR requires that you run the installer in an X windows environment.
Aborting the install.\n");
}

# Now start the execution

chdir("scripts") or die("Couldn't chdir to scripts");

# Only setup what we have to get to the OSCAR wizard.  All the rest of
# server prep is going to be driven after the first panel of
# questions.

$cmd = "./oscar_wizard";
oscar_log_subsection("Running: \"$cmd\"");
!system("$cmd 2>&1") 
    or die("Oscar Wizard failed to run successfully");
oscar_log_subsection("Successfully ran oscar_wizard");

oscar_log_subsection("Successfully ran OSCAR install_cluster script");

# All done.
