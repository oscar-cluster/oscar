#!/usr/bin/perl

# Copyright 2004 Revolution Linux
#           Benoit des Ligneris <bdesligneris@revolutionlinux.com>
# Copyright (c) 2003, The Board of Trustees of the University of Illinois.
#                     All rights reserved.
# Copyright 2002 International Business Machines
#                Sean Dague <japh@us.ibm.com>
# Copyright (c) 2002-2005 The Trustees of Indiana University.  
#                         All rights reserved.
#
# $Id$
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This is the oscar installation program.  It must be called with
#   one argument which is the installation network device

use strict;
use Cwd qw(chdir cwd);

use lib cwd() . "/lib";
use vars qw($VERSION);
use OSCAR::Logger;
use OSCAR::OCA::OS_Detect;
use POSIX;
use Carp;
use File::Basename;
use Getopt::Long;

my $cli = '';
my $selector = '';
my $build = '';
my $adapter;
my $help = '';

GetOptions('help' => \$help, 'cli' => \$cli, 'selector=s' => \$selector, 'build=s' => \$build);

#If we get a --help flag
if($help)
{
    print "Usage: install_cluster [OPTION] adapter
Starts the OSCAR install process.
By default, install_cluster uses the Graphical mode.

    --cli		Runs the program in command line mode.
    --selector file	Passes the file into the selector stage of the install.
			That stage will not ask for user input.
    --build file	Passes the file into the build stage of the install.
			That stage will not ask for user input.
    --help		Display this help and exit.\n";
    exit 0;
}

#Put the full pathname on there since this will change directories
my $cwd = cwd();
$selector = $cwd . "/$selector" if($selector !~ /$cwd/ && $selector ne '');
$build = $cwd . "/$build" if ($build !~ /$cwd/ && $build ne '');

# First of all, enforce that the user running this script is 'root'
croak "You must be 'root' to run this script.  Aborting" if ($< != 0 || $ENV{'USER'} ne 'root');

my $os = OSCAR::OCA::OS_Detect::open();

# Validate OSCAR_HOME environment variable and write /etc/profile.d files
&oscar_home_env();

# Validate the interface before we do too much...
my %nics;
open IN, "/sbin/ifconfig |" || die "ERROR: Unable to query NICs\n";
while( <IN> ) {
	next if /^\s/ || /^lo\W/;
	chomp;
	s/\s.*$//;
	$nics{$_} = 1;
}
close IN;

my $adapter = shift;
die "
ERROR: A valid NIC must be specified for the cluster private network.

Valid NICs: ".join( ", ", sort keys %nics )."\n\n"
	unless $adapter && exists $nics{$adapter};

# Now check to see if there is an $ENV{OSCAR_HOME} directory, and if
# so, if we're in it.

if (! -d $ENV{OSCAR_HOME}) {
    die("ERROR: The environment variable \$OSCAR_HOME was set, but the directory 
that it points to ($ENV{OSCAR_HOME}) does not exist!");
}
if (!chdir($ENV{OSCAR_HOME})) {
    die("ERROR: The environment variable \$OSCAR_HOME was set, but could not 
change into the directory that it points to ($ENV{OSCAR_HOME})!");
}

# Get OSCAR's version

my $oscar_version;
my $oscar_version_script = $ENV{OSCAR_HOME} ."/" . "dist/get-oscar-version.sh";
my $oscar_version_file = $ENV{OSCAR_HOME} . "/" . "VERSION";

# Use the scripty-foo to get oscar version information.

if ( -e "$oscar_version_file" ) {
    my $cmd = "$oscar_version_script $oscar_version_file --full";

    open(CMD, "$cmd|") or die "ERROR: failed to get oscar version '$cmd' - $!";
    $oscar_version = <CMD>;
    chomp($oscar_version);

    close(CMD);
}
else {
    die("ERROR: OSCAR VERSION file missing '$oscar_version_file' - aborting!");
}

# Once here, we know that $ENV{OSCAR_HOME} is set, it exists, we can
# get in it, and we have successfully read the VERSION file from it.
# So we should be good to go for the rest of the installation.

# Set perl to autoflush all output

$| = 1;

# Setup to capture all stdout/stderr

my $oscar_logfile = $ENV{OSCAR_HOME} . "/oscarinstall.log";
if (!open (STDOUT,"| tee $oscar_logfile") || !open(STDERR,">&STDOUT")) {
    die("ERROR: Cannot tee stdout/stderr into the OSCAR logfile:
   $oscar_logfile
Aborting the install.\n");
}

# First output banner

oscar_log_section("Running OSCAR install_cluster script");

# Fix to make multi lingualness work

$ENV{LANG} = "C";
$ENV{LC_ALL} = "C";
$ENV{LANGUAGE} = "C";
$ENV{LC_COLLATE} = "C";
$ENV{LC_CTYPE} = "C";
$ENV{LC_MESSAGES} = "C";
$ENV{LC_MONETARY} = "C";
$ENV{LC_NUMERIC} = "C";
$ENV{LC_TIME} = "C";

# Check to see if this is a supported platform

oscar_log_subsection("Checking if this is a supported platform");
if (!$os) {
    print("ERROR: This is an unsupported system.  Specifically, no module in OSCAR/OCA/OS_Detect positively identified this as a supported system.\n");
    die("Cannot continue");
}

# add entries to path that we know we will need

$ENV{PATH} = $ENV{PATH} .
    ':/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin';


# Ensure that the package scripts are executable (wizard_prep runs
# some of them)

system("chmod 755 packages/*/scripts/*");

# [EF 14.3.2006]
# find out on which distro perl-Qt comes in an obsolete version
# then edit the share/prereqs/base/prereq.cfg file accordingly
# and remove the following 4 lines
#
# [GVALLEE 25.04.2006]
# this is not compliant at all with Debian and it seems to me it is not anymore usefull
# If you uncomment this, debian will _not_ be supported
#my $pqtv = `rpm -q --quiet --qf '%{VERSION}' perl-Qt 2>/dev/null`;
#if ( $pqtv && $pqtv < 3 ) {
#  !system("rpm -e perl-Qt") or warn("Couldn't remove perl-Qt");
#  oscar_log_subsection("Removing installed perl-Qt RPM because version is < 3");
#}

# TJN (10/4/2005): Note, a fairly evil, totally non-obvious issue 
#    occurs if you have /tftpboot setup as a symlink,
#    e.g., /tftpboot -> /var/tftpboot/,  and remove 'tftp-server'. 
#    What happens is the '/tftpboot' dir (symlink) gets removed!  
#    This is b/c '/tftpboot' is part of the RPM file manifest for 
#    tftp-server (at least as of v0.33-3 it does). 
#
#    Adding a sanity check after the RPM removes to check for this case!

croak "\nError: \'/tftpboot\' is gone!" if(! -d "/tftpboot" );

$ENV{OSCAR_HEAD_INTERNAL_INTERFACE}=$adapter;

# Run the wizard_prep script

my $cmd = "cd $ENV{OSCAR_HOME}/scripts && ./wizard_prep";
oscar_log_subsection("Running: \"$cmd\"");
!system($cmd)
    or die("Oscar Wizard preparation script failed to complete");
oscar_log_subsection("Successfully ran wizard_prep");
#
# HORRIBLE HACK ALERT -- FIXING MANDRAKE SNAFU
#
#print __FILE__,":",__LINE__,":INC:",join(", ",@INC),"\n";
my %incs = map { $_ => 1 } @INC;
foreach ( `perl -e 'print "\$_\n" foreach \@INC'` ) {
	chomp;
	eval "use lib \"$_\"" unless $incs{$_};
}
undef %incs;
#print __FILE__,":",__LINE__,":INC:",join(", ",@INC),"\n";

oscar_log_section("Prerequisites installed");

# Print some environment information

oscar_log_subsection("OSCAR version: $oscar_version");
my $hostname = (uname)[1];
my ($shorthostname) = split(/\./,$hostname,2);
my $dnsdomainname = `dnsdomainname`;
chomp($dnsdomainname);

oscar_log_subsection("Command line invocation: $0 $adapter " . 
		     join(" ", @ARGV));
oscar_log_subsection("Hostname: $shorthostname");
oscar_log_subsection("DNS domain name: $dnsdomainname");
oscar_log_subsection("Network interface: $adapter");
oscar_log_subsection("Linux distribution: $os->{distro} $os->{distro_version}");
oscar_log_subsection("Kernel version: " . (uname)[2]);
oscar_log_subsection("Architecture: $os->{arch}");
oscar_log_subsection("Running in directory: " . cwd());
oscar_log_subsection("PATH: " . $ENV{PATH});

# Do some basic sanity checks -- fail immediately if we can tell right
# now that this install won't [eventually] succeed.

if ($shorthostname eq "localhost") {
    die("
ERROR: Your hostname is \"localhost\".
OSCAR requires that you choose another hostname.
Aborting the install.\n");
}
if ($hostname eq "localhost.localdomain") {
    die("
ERROR: Your hostname is \"localhost.localdomain\".
OSCAR requires that you choose another hostname.
Aborting the install.\n");
}
if (!$ENV{DISPLAY} && !$cli) {
    die("
ERROR: Your \"DISPLAY\" environment variable is not set, probably
indicating that you are not running in an X windows environment.
OSCAR requires that you run the installer in an X windows environment.
Aborting the install.\n");
}

# Now start the execution
chdir("scripts") or die("Couldn't chdir to scripts") unless $cli;
chdir("src/cli") or die("Couldn't chdir to src/cli") if $cli;

# Only setup what we have to get to the OSCAR wizard.  All the rest of
# server prep is going to be driven after the first panel of
# questions.

if ($cli)
{
    $cmd = "./main_cli";
    $cmd = $cmd . " --selector $selector" if $selector;
    $cmd = $cmd . " --build $build" if $build;
    $cmd = $cmd . " $adapter";
}
else
{
    $cmd = "./oscar_wizard";
}

oscar_log_subsection("Running: \"$cmd\"");
!system("$cmd 2>&1") 
    or die("Oscar Wizard failed to run successfully");
oscar_log_subsection("Successfully ran oscar_wizard");

oscar_log_subsection("Successfully ran OSCAR install_cluster script");

# All done.


###

#
# Check for OSCAR_HOME environment variable and its correctness
# in the /etc/profile.d directory
#
sub oscar_home_env {
    my $ohome = &cwd();
    if (dirname($0) ne ".") {
	carp("You MUST execute the program from within the OSCAR top level directory!\n");
    }

    # Two situations now: we are using an RPM based distro therefore we need to update /etc/profile.d/, or we are using a Debian-like distro and therefore, we do not have a /etc/profile.d/ folder (see Debian policies for more information), and we update /root/.bashrc
    # First case: Debian-like distro
    if ($os->{distro} eq "debian") {
    	print "Setup environment variables\n";
	my $ret = `grep OSCAR /root/.bashrc`;
	# We update /etc/.bashrc only if we did not do it before
	if ($ret eq "") {
		my $cmd4deb = "echo \"OSCAR_HOME=/root/oscar\nexport OSCAR_HOME\n\" >> /root/.bashrc";
		system ($cmd4deb);
		$cmd4deb = "source /root/.bashrc";
		system ($cmd4deb);
	}
    }
    # Second case RPM based distros
    else {
        # do profile.d files already exist?
        my ($dir_csh, $dir_sh) = &profiled_files_read();
        if ($dir_csh ne $dir_sh) {
	    print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
	    print "The /etc/profile.d/oscar_home.{csh,sh} files point to\n";
	    print "different \$OSCAR_HOME environment variables!\n";
	    print "Fix or delete them and rerun this program!\n";
	    print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
	    exit 1;
       }
       # is there another OSCAR installation around?
       if ($dir_sh && ($dir_sh ne $ohome)) {
 	    print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
	    print "The /etc/profile.d/oscar_home.{csh,sh} files already exist\n";
	    print "and point to a different OSCAR installation!\n";
	    print "If you want to DELETE the other OSCAR installation (!!!)\n";
	    print "you should do:\n";
	    print "   cd $dir_sh\n";
	    print "   scripts/start_over\n";
	    print "Then rerun this script.\n";
	    print "ATTENTION: The steps described above will remove all OSCAR\n";
	    print "packages and delete all defined cluster nodes!\n";
	    print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n";
	    exit 1;
       }
       # set environment variable OSCAR_HOME
       if ($ENV{OSCAR_HOME} ne $ohome) {
 	    oscar_log_subsection("Setting env variable OSCAR_HOME to $ohome");
	    $ENV{OSCAR_HOME} = $ohome;
       }
       # write profile.d files
       if (!$dir_sh || !$dir_csh) {
	    oscar_log_subsection("Generating /etc/profile.d/oscar_home.{sh,csh} files.");
	    &profiled_files_write($ohome);
       }
    }
}

sub profiled_files_read {
    my ($dir_csh, $dir_sh);
    local *IN;
    my $file = "/etc/profile.d/oscar_home.csh";
    if (-f $file) {
	open IN, "$file" or
	    carp("Could not open $file: $!");
	while (<IN>) {
	    if (/^setenv OSCAR_HOME (\S+)$/) {
		$dir_csh = $1;
	    }
	}
	close IN;
    }
    $file = "/etc/profile.d/oscar_home.sh";
    if (-f $file) {
	open IN, "$file" or
	    carp("Could not open $file: $!");
	while (<IN>) {
	    if (/^OSCAR_HOME=(\S+)$/) {
		$dir_sh = $1;
	    }
	}
	close IN;
    }
    return ($dir_csh, $dir_sh);
}

sub profiled_files_write {
    my ($dir) = @_;
    my $file = "/etc/profile.d/oscar_home.csh";
    open OUT, "> $file" or
	    carp("Could not write file $file: $!");
    print OUT "setenv OSCAR_HOME $dir\n";
    close OUT;
    chmod 0755, $file;
    $file = "/etc/profile.d/oscar_home.sh";
    open OUT, "> $file" or
	    carp("Could not write file $file: $!");
    print OUT "OSCAR_HOME=$dir\n";
    print OUT "export OSCAR_HOME\n";
    close OUT;
    chmod 0755, $file;
}
