#!/usr/bin/perl

# Copyright 2002 International Business Machines
#                Sean Dague <japh@us.ibm.com>
# Copyright (c) 2002 The Trustees of Indiana University.  
#                    All rights reserved.
#
# $Id: install_cluster,v 1.15 2002/10/31 17:22:21 jsquyres Exp $
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This is the oscar installation program.  It must be called with
#   one argument which is the installation network device

use strict;
use Cwd qw(chdir cwd);

use lib cwd() . "/lib";
use vars qw($VERSION);
use OSCAR::Logger;
use OSCAR::Distro;
use POSIX;
use Carp;

# Setting this varible makes a lot of things much easier.  It might also do
# us some good down the road

$ENV{OSCAR_HOME} = cwd();
my $lockfile = "$ENV{OSCAR_HOME}/.install_cluster_lockfile";

# Set perl to autoflush all output

$| = 1;

# Subroutine to make us die and remove the lockfile

sub oscar_die {
    my ($die_msg) = @_;

    # Kill the lockfile

    unlink($lockfile);

    # Either die or exit gracefully

    die($die_msg) if ($die_msg);
    exit(0);
}

# Check for the lockfile (this is certainly not foolproof -- it's just
# "good enough")

if (-f $lockfile) {
    open(LOCKFILE, $lockfile);
    my $pid = <LOCKFILE>;
    close(LOCKFILE);
    chmod($pid);
    print "The OSCAR installer already appears to be running (pid $pid).
If this is not the case, remove the following file and 
run $0 again:
  $lockfile\n";
    exit(1);
}

# Write our PID to the lockfile

open(LOCKFILE, ">$lockfile");
print LOCKFILE $$;
close(LOCKFILE);

# Setup to capture all stdout/stderr

my $oscar_logfile = $ENV{OSCAR_HOME} . "/oscarinstall.log";
if (!open (STDOUT,"| tee $oscar_logfile") || !open(STDERR,">&STDOUT")) {
    oscar_die("ERROR: Cannot tee stdout/stderr into the OSCAR logfile:
   $oscar_logfile
Aborting the install.\n");
}

# First output banner

oscar_log_section("Running OSCAR install_cluster script");

# Fix to make multi lingualness work

$ENV{LANG} = "en_US";
$ENV{LANGUAGE} = "en_US:en";
$ENV{LC_COLLATE} = "en_US";
$ENV{LC_CTYPE} = "en_US";
$ENV{LC_MESSAGES} = "en_US";
$ENV{LC_MONETARY} = "en_US";
$ENV{LC_NUMERIC} = "en_US";
$ENV{LC_TIME} = "en_US";

# add entries to path that we know we will need

$ENV{PATH} = $ENV{PATH} .
    ':/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin';

my $adapter = shift 
    or oscar_die("Program must be invoked as ./install_cluster <network device>");

$ENV{OSCAR_HEAD_INTERNAL_INTERFACE}=$adapter;

# Print some environment information

open (V, "VERSION");
my $oscar_version = "";
while (<V>) {
    chomp;
    $oscar_version = $_;
}
close(V);
oscar_log_subsection("OSCAR version: $oscar_version");
my $hostname = (uname)[1];
my ($shorthostname, $domainname) = split(/\./,$hostname,2);
oscar_log_subsection("Command line invocation: $0 $adapter " . 
		     join(" ", @ARGV));
oscar_log_subsection("Hostname: $shorthostname");
oscar_log_subsection("Domainname: $domainname");
oscar_log_subsection("Network interface: $adapter");
my ($distro_name, $distro_version) = which_distro_server();
oscar_log_subsection("Linux distribution: $distro_name $distro_version");
oscar_log_subsection("Kernel version: " . (uname)[2]);
oscar_log_subsection("Architecture: " . (uname)[4]);
oscar_log_subsection("Running in directory: " . cwd());
oscar_log_subsection("PATH: " . $ENV{PATH});

# Do some basic sanity checks -- fail immediately if we can tell right
# now that this install won't [eventually] succeed.

if ($shorthostname eq "localhost") {
    oscar_die("
ERROR: Your hostname is \"localhost\".
OSCAR requires that you choose another hostname.
Aborting the install.\n");
}
if ($hostname eq "localhost.localdomain") {
    oscar_die("
ERROR: Your hostname is \"localhost.localdomain\".
OSCAR requires that you choose another hostname.
Aborting the install.\n");
}
if ($distro_name eq "UnknownLinux") {
    carp("
##########################################################################
   WARNING: Installing OSCAR on an unsupported distribution of Linux!
##########################################################################\n");
}
if (!$ENV{DISPLAY}) {
    oscar_die("
ERROR: Your \"DISPLAY\" environment variable is not set, probably
indicating that you are not running in an X windows environment.
OSCAR requires that you run the installer in an X windows environment.
Aborting the install.\n");
}

# Check for 2 rpms 1 from each CD

my @basesystem=glob("/tftpboot/rpm/basesystem*rpm");
my @rsync=glob("/tftpboot/rpm/rsync*rpm");
if ((scalar(@basesystem)==0) || (scalar(@rsync)==0)) {
    oscar_die("RPMs missing in /tftpboot/rpm/ (did you copy all CDs?)");
}

# Now start the execution

system("chmod 755 packages/*/scripts/*");
chdir("scripts") or oscar_die("Couldn't chdir to scripts");

# Only setup what we have to get to the OSCAR wizard.  All the rest of
# server prep is going to be driven after the first panel of
# questions.

my $cmd = "./wizard_prep $adapter";
oscar_log_subsection("Running: \"$cmd\"");
!system($cmd) 
    or oscar_die("Oscar Wizard preparation script failed to complete");
oscar_log_subsection("Successfully ran wizard_prep");

$cmd = "./oscar_wizard $adapter";
oscar_log_subsection("Running: \"$cmd\"");
!system("$cmd 2>&1") 
    or oscar_die("Oscar Wizard failed to run successfully");
oscar_log_subsection("Successfully ran oscar_wizard");

oscar_log_subsection("Successfully ran OSCAR install_cluster script");

# All done.  Exit gracefully, killing the lockfile.

oscar_die();
