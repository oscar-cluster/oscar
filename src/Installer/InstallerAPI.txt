                Structure and API of new OSCAR Installer
                ----------------------------------------

First Created : February 25, 2004
Last Updated  : June 2, 2004
Author        : Jason Brechin <brechin@ncsa.uiuc.edu>
Author        : Terry Fleury  <tfleury@ncsa.uiuc.edu>
Copyright (c) 2004 The Board of Trustees of the University of Illinois.
                   All rights reserved.

Modification History
--------------------
June 2, 2004 - Added Helpers as a third widget type.


Directory Structure
-------------------

Summary: 

There are two different directory structures for the main OSCAR Installer.
The first is used when the source code is 'installed', and thus is used by the
end user to do a cluster installation.  The second is used to store the source
code, and thus is used by developers.  

For Installation / End Use:

The main OSCAR Installer Perl code will reside in a directory named
"Installer" directly underneath the $OSCAR_HOME directory.  Within this
directory will be all of the Perl modules necessary to run the OSCAR
Installer.  The main Perl executable will be named Installer.pl.

Under the Installer directory will be directories for each Task, Tool, and
Helper which can appear within the Installer workspace.  These directories
must be listed in the Installer.xml file (located in the main Installer
directory) to classify it as a Task (with a step number), a Tool (without a
step number), or a Helper (a Tool which doesn't appear in the 'Tools' pulldown
menu, and also can be launched with some parameters).  Only one Task can be
displayed at a time, while any number of Tools can be displayed at a time.
For Helpers, you can specify how many of a particular Helper can be displayed
at a time, but only one Helper with a given set of parameters can be shown at
a time.

Details:

$OSCAR_HOME/Installer/
    Installer.xml - List of all Tasks, Tools, and Helpers (see below)
    Installer.pl - Main OSCAR Installer Perl application
    InstallerMainWindow.pm - QMainWindow containing pulldown menus, status
        bar, workspace, etc.
    InstallerWorkspace.pm - QWorkspace which is parent of all Tasks/Tools
    ... - Other files required for main Installer window

$OSCAR_HOME/Installer/<Tasks,Tools,Helpers>/
$OSCAR_HOME/Installer/Opder/ - example of a Task directory
    GUI.xml - Configuration file for this Task/Tool/Helper
    OpderMain.pm - Main QObject / child of InstallerWorkspace (see below)
    ... - Other files required for Task/Tool/Helper window

    Note that with this directory scheme, Task/Tool/Helper files would
    normally have package names of "Directory::Filename" (e.g. "package
    Opder::OpderMain").  However, the Installer does some clever manipulation
    of the @INC path, so you can simpy name your packages "Filename" (e.g.
    "package OpderMain").  This simpifies development of Tasks/Tools/Helpers
    to be run outside of the Installer window.

For Development:

All of the Tasks/Tools/Helpers reside under the "oscar/src" directory.  This
includes the Installer.  This helps development since all Tasks/Tools/Helpers
appear at the same level as the main Installer.  When compiling, symbolic
links are created in the Installer directory to each Task/Tool/Helper so that
the developer can run the Installer as if it were installed.

Details:

oscar/src/Installer/
    Same files as listed in the previous section
    Opder - a symbolic link to ../Opder/, created by 'make'
    Doxyfile - allows for generation of Doxygen-style code documentation

oscar/src/<Tasks,Tools,Helpers>/
    Same files as listed in the previous section
    images - a symbolic link to ../Installer/images/, created by 'make'
        and required by QtDesigner if you use icons on your buttons


Tasks, Tools, and Helpers
-------------------------

The windows which can appear inside the OSCAR Installer fall into three
categories: Tasks, Tools, and Helpers.

Tasks:

A 'task' is equivalent to a 'step' in the old oscar_wizard.  Tasks appear in a
pulldown menu in a given order (specified in the Installer.xml file, see
below).  Each task has a "Back" button, a "Next" button, and a "Close" button.
Only one Task window can be active at a time.  When the user clicks on the
"Back" or "Next" button, the previous or next task is displayed and the
current task is closed.  Alternatively, the user can select a particular task
from the pulldown menu at any time. 

Tasks also allow for the specifications of prerequisite conditions to be met
before the task is allowed to run.  Usually, these conditions relate to the
presence of particular data in the "oda" database.  But the developer can also
write custom Perl code that must return 'true' in order for the Task to run.
If the preconditions are not met, an error message is presented to the user.
The developer can use the default error message (which lists the oda commands
that failed and the return values) or write a custom Perl function which
returns a string to be presented to the user.

Tools:

A 'tool' is a window which does not necessarily need to be executed during the
course of a normal installation, but which may aid the user during the
installation process.  Tools appear in their own pulldown menu, and any
number of Tool windows can be active at a time.  (However, only one tool of a
particular type can run at a time.)  

Since tools should be able to run at any time, there are no preconditions as
found with Tasks.  However, tools can write to the oda database and then send
a signal to the Installer that the information in oda has changed.  The
Installer then tells all other Tasks, Tools, and Helpers that oda has changed
and they can then update themselves as necessary.

Helpers:

A 'helper' is similar to a tool, but it is launched by Task, Tool, or another
Helper.  As such, helpers do not appear in any pulldown menus (other than the
list of active windows).  Helpers have two additional features.  First, they
are launched with one or more parameters.  Second, the maximum number of
Helpers displayed in the Installer can be specified and be greater than one.
However, only one Helper with a given set of parameters can be displayed at a
time.  This is so each Helper window is unique within the list of windows.  


Format of Installer.xml File
----------------------------

Summary:

The Installer.xml file is located in the $OSCAR_HOME/Installer/ directory.
It contains a list of all Tasks/Tools/Helpers available in the Installer.
These Tasks/Tools/Helpers reside in subdirectories under the
$OSCAR_HOME/Installer/ directory.  The Task/Tool/Helper is listed in the XML
file by its directory name.

Details:

<?xml version="1.0" encoding="ISO-8859-1"?>
<oscar>

<!--
  Notes:

  dirname = The name of Task/Tool/Helper subdirectory 
            (under $OSCAR_HOME/Installer/).

  stepnum = The step number for the task - MUST be unique or the Installer
            will exit with an error condition.  Tasks must have a number.
            Tools/Helpers must not.
-->
  <tasks>
    <task>
      <dirname>Opder</dirname>
      <stepnum>1</stepnum>
    </task>

    <task>
      <dirname>NodeMgmt</dirname>
      <stepnum>2</stepnum>
    </task>
  </tasks>

  <tools>
    <tool>
      <name>NodeGroups</name>
    </tool>

    <tool>
      <name>FileList</name>
    </tool>
  </tools>

  <helpers>
    <helper>
      <name>NodeGroupAdder</name>
    </helper>
  </helpers>

</oscar>


Format of GUI.xml Files
-----------------------

Summary:

Each Task/Tool/Helper directory SHOULD contain a GUI.xml file.  (If the file
is not present, then a bunch of defaults will be assumed, as described below.)
This XML file describes the Task/Tool/Helper in terms of its main object class
(which is called by the InstallerWorkspace), a 'full name' which will appear
in the pulldown lists of Tasks/Tools (not applicable for Helpers), and oda
commands/tests which must run and succeed in order for the Task to be allowed
to execute (used only for Tasks since Tools/Helpers can run at any time).  If
a Task can't find all of the information it needs in the oda database, it
should deal with it gracefully.  However, if any of the oda commands/tests
fails, then that Task is not allowed to run.

Details:

<?xml version="1.0" encoding="ISO-8859-1"?>
<oscar>

<!--
  Notes:

  classname = The name of the Perl module file containing the PerlQt NEW
              function.  This will be used in creating a new instance of this
              object.  Note that this name can be different from the directory
              containing the Task/Tool/Helper.  For example, the Opder may
              reside in the directory $OSCAR_HOME/Installer/Opder, but the
              file containing the PerlQt NEW subroutine may be named
              OpderMain.pm.  To create a new instance of the Opder, the
              InstallerWorkspace would call something like this:

              # Opder is directory name, so use it for lib path:
              use lib "$ENV{OSCAR_HOME}/Installer/Opder";
              # OpderMain is object name, so use it for instance creation:
              my $obj = Opder::OpderMain;
              # As with all PerlQt objects, NEW is called implicitly.

              If the 'classname' field is absent, the directory name of the
              Task/Tool/Helper is assumed.  So if no 'classname' field for the
              Opder directory, then the main object file defaults to Opder.pm.

  fullname =  The "pretty" name for the Task/Tool (not applicable to Helpers
              since they are launched by other Tools/Helpers and thus don't
              appear in any pulldown menus) which will appear in the pulldown
              menus.  This shouldn't be TOO long since it will appear in a
              pulldown menu.  If the 'fullname' field is absent, then it
              defaults to the 'classname' field.
-->

  <classname>OpderMain</classname>
  <fullname>OSCAR Package Downloader</fullname>

  <!--
    Notes:

    The following tag information appears only within <oda>...</oda> tags and
    is valid only for Tasks.
    
    command = This is an arbitrary 'oda' command which is executed prior to
              the opening of a particular Task's window.  The results of the
              oda command can be passed to the 'test' (listed below) for
              further processing.  Let this field be stored in the perl
              variable $command.  Then, the code executed by the Installer
              looks like the following:

              my $odasuccess = 1;  # Assume success in case no $command
              my @odaresult = undef;
              my @odaerror = undef;
              $odasuccess = OSCAR::Database::database_execute_command(
                            $command,\@odaresult,\@odaerror) if ($command);

              In effect, the $odasuccess variable holds 0 or 1 for the return
              value of oda's execute_command.  This value isn't necessarily
              very useful since it is set to 0 only upon a major database
              problem.  The @odaresult array is the actual data returned by
              the given oda command (if anything).  The @odaerror array is an
              array of error strings generated by oda, and may or may not be
              useful in figuring out what went wrong.

              The $odasuccess, @odaresult, and @odaerror values are used by
              the 'test' and 'error' fields below.  If the 'command' field is
              blank, then @odaresult and @odaerror are undefined, $odasuccess
              is set to 1, and the 'test' code executed next.

    test    = Arbitrary Perl code which should return 0 or 1.  The values
              $command, $odasuccess, @odaresult, and @odaerror generated by
              the oda 'command' above are available to your Perl test code.
              Your Perl code is executed by the Installer as follows:

              my $testsuccess = (eval ( $test ) );
              
              Your test code should simply return 0 or 1 for failure or
              success.  If the 'test' field is blank, then the test code
              defaults to 'return $odasuccess'.  This may not be what you
              really want since $odasuccess is 0 only upon a major database
              problem.  You may want to use 'return $odaresult[0]' instead.
              However, notice that if both the command field and the test
              field are blank, the Task will always be allowed to run (since
              $odasuccess defaults to 1 if no oda command is given, and $test
              defaults to 'return $odasuccess' if no test command is given).

    error   = Arbitrary Perl code which should return a string describing the
              error condition if the 'test' above returns 0.  The variables
              $command, $odasuccess, @odaresult, @odaerror, $test, and 
              $testsuccess generated by the 'command' and 'test' above are all
              available to your Perl code.  Upon failure of the 'test', your
              error code is executed by the Installer as follows:

              return (eval ( $error ) );
              
              Your error code should simply return a string.  This string is
              displayed in the "Details" section of the error message dialog,
              so you can make it as simple or as complex as you like.  If the
              'error' field is blank, then the default is to print out all
              available information including the oda 'command' and its
              associated variables ($odasuccess, @odaresult, @odaerror), and
              the 'test' and its return value $testsuccess.  

              If you want to include the default error string in your custom
              error string, call the predefined subroutine
              'getDefaultErrorString()' which returns a string.  You can
              concatenate this string with your own error string and return
              the resulting string.

    In summary, the following variables are generated by and available to
    the <oda>, <command>, <test>, and <error> fields above:

        $command    = The <command> field, which is passed as the first
                      argument to database_execute_command(...).
        $odasuccess = The return value from database_execute_command(...).
        @odaresult  = The result array which is set as the second 
                      argument to database_execute_command(...).  This array
                      usually contains the 'useful' information output by
                      the oda command.
        @odaerror   = The error string array which is set as the third
                      argument to database_execute_command(...) upon failure.
        $test       = The <test> field, which is arbitrary Perl code passed to
                      an 'eval' statement and should return 0 or 1.
        $testsuccess= The result of the (eval ( $test )) command.

    One important note: Since these fields are stored in an XML file, you MUST
    use XML/HTML-style notations for special symbols.  For example, use '&lt;'
    for '<' and '&gt;' for '>'.  Otherwise, your XML file will not parse
    correctly.
  -->

  <oda>
    <command>oscar_version</command>
    <test>($odaresult[0] &gt;= 2.3) and ($odaresult[0] &lt;= 3.1)
    </test>
    <error>"OSCAR version is $odaresult[0] . " . 
           "We need OSCAR version between 2.3 and 3.1 inclusive."
    </error>
  </oda>

  <oda>
    <command>read_records packages_provides package=lam type name</command>
    <!-- No test means that the above oda command must return success, which
         is probaby not what you want, since all that means is that the oda
         database is working and the read_records command didn't die. -->
    <error>return ("Major problem with oda!!! " . getDefaultErrorString());
  </oda>
  
  <!--
    Notes:

    The following tag is applicable only to Helpers.  

    maxnum   = The maximum number of this Helper's windows which can be
               displayed at one time within the Installer Workspace.  If
               'maxnum' is zero, then there is no limit on the number of
               Helper windows for this Helper.  Note that regardlesss of the
               maximum number of Helper windows specified, only one window
               with a given set of parameters can be displayed at a time.  For
               example, if you have a Helper that takes a single parameter,
               and you create a new instance of that Helper with the parameter
               "kernel", you cannot create a second instance of that Helper
               with the parameter "kernel".  If you want to create multiple
               instances of the Helper with the parameter "kernel", then pass
               an additional parameter to create instances of the Helper 
               with parameters such as "kernel 1", "kernel 2", "kernel 3",
               etc.
  -->

  <maxnum>0</maxnum>

</oscar>


Program Specifics for Tasks, Tools, and Helpers
-----------------------------------------------

(1) To exit your application, do not use Qt::Application::exit().  Instead, do
    this->close(1) in the MainWindow widget.  When you do a close() in the
    top-level widget, the application will exit.  Passing '1' as an argument
    to close(1) attempts to destroy the widget as well.

(2) In your MainWindow widget, define the closeEvent subroutine so as to
    override the default closeEvent handler.  The code should look like this:

    sub closeEvent
    {
    #########################################################################
    #  Subroutine: closeEvent                                               #
    #  Parameter : A pointer to the QCloseEvent generated.                  #
    #  Returns   : Nothing                                                  #
    #########################################################################
      # Send a signal to the parent workspace letting it know we are closing.
      emit taskToolClosing("Opder");  # Change 'Opder' to YOUR dir name
      SUPER->closeEvent(@_);   # Call the parent's closeEvent
    }

    For Tasks/Tools, the parameter you pass to 'emit taskToolClosing(...)' is
    the name of the directory containing your Task/Tool.  For Helpers, the
    parameter is formed by joining the name of the directory containing the
    Helper with the parameters used to instantiate the helper, separated by
    the character "\000", i.e. 'join "\000", $helperDir, @helperParams'.  You
    will also need to define a Qt::signal for taskToolClosing which should
    look like this:

    use Qt::signals taskToolClosing => ['char*'];

(3) When you want to use images (e.g. '.png' files) in your Task/Tool, you
    should put them in the $ENV{OSCAR_HOME}/Installer/images/ subdirectory and
    make sure they have the '.png' extension.  In your Makefile.am, you should
    add a rule to the 'all-local:' target to create a symbolic link to this
    images directory.  For example:

    all-local:	$(COMPILEDTARGET)
    		ln -sf ../Installer/images; \
    		cd ../Installer; ln -sf ../NodeMgmt

    (Note that in Makefiles, you must use tabs, not spaces, when you have
     multiline make targets such as the one shown here.)

    The first 'ln -sf' creates a symbolic link from an 'images' directory in
    your Task/Tool subdirectory.  You will probably need this symbolic link if
    you design your Task/Tool in Qt-Designer since Qt-Designer expects all
    images to reside in a subdirectory named 'images'.  The second 'ln -sf'
    creates a symbolic link within the Installer directory to your Task/Tool
    directory.  This way, you can put your Task/Tool at the same directory
    level as the Installer for development, but still run the Installer as if
    you had installed the compiled source code.

    Then in the .ui.h file of the Qt-Designer widget that includes images (on
    any buttons, for example), you must add the following line in the
    "Includes (in Declaration)" section:

    "use lib "../Installer"; use InstallerImages;"

    If you do any loading of images yourself, you MUST ALSO add 
    "use InstallerUtils;" to the above line.  This is because Perl-Qt-3.006
    and Perl-Qt-3.008 (and above) have different methods for loading in
    pixmaps (images).  A utility subroutine named 'getPixmap($imageName)' is
    available in InstallerUtils.pm to handle this issue.  Anytime you need to
    load a pixmap, use 'InstallerUtils::getPixmap(...)'.  Also, be sure to run
    'make' in the Installer directory first to build the InstallerImages.pm
    file before it is used by any Tasks/Tools/Helpers.


Qt SLOTS and SIGNALS Implemented by InstallerWorkspace and Its Children
-----------------------------------------------------------------------

Summary:

In order to allow for communication between the InstallerWorkspace and its
children, there are several SIGNALS and SLOTS that need to be implemented in
both the workspace and its children.  

SIGNALS emitted by InstallerWorkspace
-------------------------------------

signalButtonShown(char* childname, char* buttonname, bool shown)

    Tasks must have three buttons at the bottom for navigation among the
    various steps: Back, Close, and Next.  The first step doesn't need a Back
    button and the last step doesn't need a Next button.  However, since each
    Task shouldn't have to care where it appears in the execution path, we
    need a way to have the InstallerWorkspace tell a Task to hide/show its
    buttons.  When the InstallerWorkspace wants one of its child Tasks to
    hide/show either the Back or Next button, it emits this signal with the
    following three arguments:
      (1) the name of the child (actually the name of the Task directory),
      (2) the name of the button, either "Back" or "Next", and
      (3) 0 for hidden, 1 for shown.
    This signal is emitted by the InstallerWorkspace to hide the Back
    button for the first Task and the Next button for the final Task.

    In your Task, you might connect the signal to a slot as follows:

    # If there is a parent of this Task, then we are probably running
    # it in the InstallerWorkspace.  Need to catch some signals.
    if (parent())
      {
        Qt::Object::connect(parent(),
                            SIGNAL 'signalButtonShown(char*,char*,bool)',
                            SLOT   'setButtonShown(char*,char*,bool)');
      }

    sub setButtonShown
    {
    #########################################################################
    #  Subroutine: setButtonShown                                           #
    #  Parameters: (1) The directory name of the target Task for the signal #
    #              (2) The name of the button to show/hide ("Back"/"Next")  #
    #              (3) 1 = Show / 0 = Hide                                  #
    #  Returns   : Nothing                                                  #
    #  This subroutine (SLOT) is called to show/hide the Back/Next button,  #
    #  usually when the parent InstallerWorkspace says to.                  #
    #########################################################################
      my ($childname,$buttonname,$shown) = @_;
      
      # Ignore Hide/Show requests to other Tasks
      return if ($childname ne "Opder");  # Change 'Opder' to YOUR dir name

      if ($buttonname =~ /Back/i)
        {
          ($shown) ? backButton->show() : backButton->hide();
        }
      elsif ($buttonname =~ /Next/i)
        {
          ($shown) ? nextButton->show() : nextButton->hide();
        }
    }


odaWasUpdated(char* childname);

    When a Task/Tool writes information to the oda database, it should tell
    the other Tasks/Tools that the oda database has been updated so that they
    can reread the database and update their GUIs as appropriate.  To do so,
    the InstallerWorkspace emits the "odaWasUpdated(childname)" SIGNAL, where
    the 'childname' is the name of the directory of the Task/Tool that wrote
    to the database.  Each Task/Tool needs to catch this SIGNAL so they can
    have the option of rereading the database and updating their interfaces as
    appropriate.

    The argument to the 'odaWasUpdated' SIGNAL is the directory name of the
    Task/Tool that updated the oda database.  This is so that Task/Tool that
    updated the database can ignore the SIGNAL and not update itself again.

    To catch the SIGNAL in your Task/Tool, you might connect the signal to a
    slot as follows:

    # If there is a parent of this Task/Tool, then we are probably running
    # it in the InstallerWorkspace.  Need to catch some signals.
    if (parent())
      {
        Qt::Object::connect(parent(),
                            SIGNAL 'odaWasUpdated(char*)',
                            SLOT   'reReadOda(char*)');
      }

    sub reReadOda
    {
    #########################################################################
    #  Subroutine: reReadOda                                                #
    #  Parameter : The directory name of the Task/Tool that updated oda     #
    #  Returns   : Nothing                                                  #
    #  This subroutine (SLOT) is called the InstallerWorkspace receives     #
    #  notice that another Task/Tool updated the oda database.              #
    #########################################################################
      my ($childname) = @_;
      
      # Ignore the signal if we were the one that updated oda
      return if ($childname ne "Opder");  # Change 'Opder' to YOUR dir name

      # Reread the oda database and update the GUI as necessary
      # ...
    }


SIGNALS emitted by Tasks/Tools/Helpers
--------------------------------------

parent()->odaWasUpdated(char* childname)

    This is related to the SIGNAL/SLOT connection we just created above.
    This isn't really a SIGNAL implemented in the Task/Tool, but it is a
    signal that should be emitted when the Task/Tool updates the oda database.
    Here, "parent()" returns a pointer to the InstallerWorkspace, and since
    that is where the 'odaWasUpdated' SIGNAL is implemented, we end up
    notifying other Tasks/Tools of changes to the oda database.  So, put this
    statement after every write to oda performed by your Task/Tool.

taskToolClosing(char* childname)

    When a Task/Tool closes/exits, it needs to let the InstallerWorkspace know
    so the workspace can update the list of open windows.  Do to this, the
    MainWindow of each Task/Tool needs to emit the
    'taskToolClosing(childname)' SIGNAL when the main window closes.  To do
    this, you first define the SIGNAL as follows:

    use Qt::signals taskToolClosing => ['char*'];

    Next, you must override the main window's closeEvent as follows:

    sub closeEvent
    {
    #########################################################################
    #  Subroutine: closeEvent                                               #
    #  Parameter : A pointer to the QCloseEvent generated.                  #
    #  Returns   : Nothing                                                  #
    #########################################################################
      # Send a signal to the parent workspace letting it know we are closing.
      emit taskToolClosing("Opder");  # Change 'Opder' to YOUR dir name
      SUPER->closeEvent(@_);   # Call the parent's closeEvent
    }

    For Tasks/Tools, the parameter to the taskToolClosing SIGNAL is the name
    of the Task/Tool directory.  For Helpers, the parameter is formed by
    joining the name of the Helper directory and the parameters used to
    instantiate that helper, separated by the charater "\000", e.g.
    'join "\000", "OpderHelper" @{ $paramListRef }'.

backButtonWasClicked(char* childname)
nextButtonWasClicked(char* childname)

    When the user clicks on a Task's "Back" or "Next" button, it needs to emit
    a SIGNAL to the InstallerWorkspace to have it go to the previous or next
    step in the installation sequence.  However, since a Task can have
    prerequisites that must be fulfilled before it is allowed to run, we don't
    necessarily go to the previous/next step.  So when the InstallerWorkspace
    gets notice of a Task's Back/Next button being pressed, it first checks to
    see if the prerequisites for the previous/next Task are fulfilled, and if
    so, it closes the current Task and opens the previous/next one.

    So first you must define these two SIGNALS as follows:

    use Qt::signals backButtonWasClicked => ['char*'],
                    nextButtonWasClicked => ['char*'];

    Then, you must connect the 'clicked' SIGNALs for the Back/Next buttons to
    appropriate SLOTS.  For example:

    Qt::Object::connect(backButton, SIGNAL 'clicked()', 
                                    SLOT   'backButton_clicked(char*)');
    Qt::Object::connect(nextButton, SIGNAL 'clicked()', 
                                    SLOT   'nextButton_clicked(char*)');

    And the implementations of these SLOTS might look like this:

    sub backButton_clicked
    {
    #########################################################################
    #  Subroutine: backButton_clicked                                       #
    #  Parameters: None                                                     #
    #  Returns   : Nothing                                                  #
    #  When the backButton is clicked, inform the InstallerWorkspace.       #
    #########################################################################
      emit backButtonWasClicked("Opder");  # Change 'Opder' to YOUR dir name
    }

    sub nextButton_clicked
    {
    #########################################################################
    #  Subroutine: nextButton_clicked                                       #
    #  Parameters: None                                                     #
    #  Returns   : Nothing                                                  #
    #  When the nextButton is clicked, inform the InstallerWorkspace.       #
    #########################################################################
      emit nextButtonWasClicked("Opder");  # Change 'Opder' to YOUR dir name
    }

    Note again that the argument to the backButtonWasClicked/
    nextButtonWasClicked SINGALs is the name of the Task's directory.

parent()->launchHelper(QWidget* parent, char* helpername, QStringList* listref)

    When you want to launch a Helper, you need to signal the Installer
    Workspace so it can create a new window for the Helper with the
    appropriate parameters.  You need to pass the
    current object as the 'parent' (so that if the current window closes, the
    associated helper also goes away), the directory name of the helper that
    you want to launch, and a reference to an array of string parameters you
    want to pass to the helper.  


CODE CHANGES IN SUMMARY 
-----------------------

The following modifications need to be made to your Task/Tool to allow it to
run within the Installer Workspace.

    # At the top of your Main Window package:
    use Qt::signals
        taskToolClosing => ['char*'],
        backButtonWasClicked => ['char*'],           # Needed by Tasks only
        nextButtonWasClicked => ['char*'];           # Needed by Tasks only
    use Qt::slots
        reReadOda => ['char*'],
        closeEvent => ['QCloseEvent*'],
        setButtonShown => ['char*','char*','bool'],  # Needed by Tasks only
        backButton_clicked => [],                    # Needed by Tasks only
        nextButton_clicked => [];                    # Needed by Tasks only


    sub init
    {
      # If there is a parent of this MainWindow, then we are probably running
      # it in the InstallerWorkspace.  Need to connect some signals/slots.
      if (parent())
        {
          Qt::Object::connect(parent(),
                              SIGNAL 'odaWasUpdated(char*)',
                              SLOT   'reReadOda(char*)');

          # For Tasks, do stuff when we click the Back or Next Buttons
          Qt::Object::connect(parent(),
                              SIGNAL 'signalButtonShown(char*,char*,bool)',
                              SLOT   'setButtonShown(char*,char*,bool)');
          Qt::Object::connect(backButton, 
                              SIGNAL 'clicked()', 
                              SLOT   'backButton_clicked(char*)');
          Qt::Object::connect(nextButton, 
                              SIGNAL 'clicked()", 
                              SLOT   'nextButton_clicked(char*)');
        }
      else
        { # For Tasks, hide the Back/Next button if not running inside
          # the InstallerWorkspace window.
          backButton->hide();
          nextButton->hide();
        }

      # When this window closes, destroy it, too
      setWFlags(getWFlags() | Qt::WDestructiveClose());
    }

    sub setButtonShown
    {
    #########################################################################
    #  Subroutine: setButtonShown                                           #
    #  Parameters: (1) The directory name of the target Task for the signal #
    #              (2) The name of the button to show/hide ("Back"/"Next")  #
    #              (3) 1 = Show / 0 = Hide                                  #
    #  Returns   : Nothing                                                  #
    #  This subroutine (SLOT) is called to show/hide the Back/Next button,  #
    #  usually when the parent InstallerWorkspace says to.                  #
    #########################################################################
      my ($childname,$buttonname,$shown) = @_;
      
      # Ignore Hide/Show requests to other Tasks
      return if ($childname ne "Opder");

      if ($buttonname =~ /Back/i)
        {
          ($shown) ? backButton->show() : backButton->hide();
        }
      elsif ($buttonname =~ /Next/i)
        {
          ($shown) ? nextButton->show() : nextButton->hide();
        }
    }

    sub backButton_clicked
    {
    #########################################################################
    #  Subroutine: backButton_clicked                                       #
    #  Parameters: None                                                     #
    #  Returns   : Nothing                                                  #
    #  When the backButton is clicked, inform the InstallerWorkspace.       #
    #########################################################################
      emit backButtonWasClicked("Opder");
    }

    sub nextButton_clicked
    {
    #########################################################################
    #  Subroutine: nextButton_clicked                                       #
    #  Parameters: None                                                     #
    #  Returns   : Nothing                                                  #
    #  When the nextButton is clicked, inform the InstallerWorkspace.       #
    #########################################################################
      emit nextButtonWasClicked("Opder");
    }

    sub reReadOda
    {
    #########################################################################
    #  Subroutine: reReadOda                                                #
    #  Parameter : The directory name of the Task/Tool that updated oda     #
    #  Returns   : Nothing                                                  #
    #  This subroutine (SLOT) is called the InstallerWorkspace receives     #
    #  notice that another Task/Tool updated the oda database.              #
    #########################################################################
      my ($childname) = @_;
      
      # Ignore the signal if we were the one that updated oda
      return if ($childname ne "Opder");

      # Reread the oda database and update the GUI as necessary
      # ...
    }

    sub closeEvent
    {
    #########################################################################
    #  Subroutine: closeEvent                                               #
    #  Parameter : A pointer to the QCloseEvent generated.                  #
    #  Returns   : Nothing                                                  #
    #########################################################################
      # Send a signal to the parent workspace letting it know we are closing.
      emit taskToolClosing("Opder");
      SUPER->closeEvent(@_);   # Call the parent's closeEvent
    }


