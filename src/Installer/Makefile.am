# List the binaries needed by the Makefile
PUIC		=	@PUIC@
PERL_CW		=	@PERL@ -cw
RM		=	/bin/rm -f

# Enter the filename of the Perl script to be run
EXECUTABLE	=	Installer.pl

# Enter the filenames of Perl modules which are to be generated by PUIC
pms		=	InstallerImages.pm \
			InstallerErrorDialog.pm

# Enter the filenames of Perl scripts which are to be generated by PUIC
pls		=

# Enter the filenams of Perl modules which DO NOT need to be compiled
static_pms	=	InstallerMainWindow.pm \
			InstallerParseXML.pm \
			InstallerUtils.pm \
			InstallerWorkspace.pm 

# Enter the filenams of Perl scripts which DO NOT need to be compiled
static_pls	=	Installer.pl

COMPILEDTARGET	=	$(pms) $(pls)
STATICTARGET	=	$(static_pms) $(static_pls)
ALLTARGET	=	$(COMPILEDTARGET) $(STATICTARGET)

# These are items to be distributed, i.e. put into the tarball
EXTRA_DIST	=	$(ALLTARGET) Installer.xml
DIST_SUBDIRS    =       images

# Enter the name of the target directory for files during a 'make install'
instdir			=	$(prefix)/Installer
inst_SCRIPTS		=	$(ALLTARGET)
# Enter any extra files which need to go into the install directory
inst_DATA		=	Installer.xml

# Enter any extra make rules for files which don't have a default make rule
InstallerImages.pm:	
	$(PUIC) -o InstallerImages.pm -embed InstallerImages images/*.png

# May need to add extra stuff here, such as creating symbolic links
all-local:	$(COMPILEDTARGET)

### SHOULDN'T NEED TO CHANGE ANYTHING BELOW HERE!

# General rule to make a .pm from a .ui
.ui.pm:	$<.h $<
	@ $(PUIC) -o $@ $<

# General rule to make a .pl from a .ui
.ui.pl:	$<.h $<
	@ $(PUIC) -x -o $@ $<

# Hook target that Automake runs at the end of its own internal "clean" target.
clean-local:	
	$(RM) $(COMPILEDTARGET)

# Checks to see if the Perl modules and scripts pass a syntax check
check-local:	$(ALLTARGET)
		@err=0; \
		for myfile in $(ALLTARGET); do \
		  $(PERL_CW) $$myfile; \
		  if [ $$? -ne 0 ]; then \
		    err=1; \
		  fi; \
		done; \
		if [ $$err -eq 1 ]; then \
		  echo "ERROR IN BUILT CODE!!!"; \
		  exit 1; \
		else \
		  echo "OK"; \
		fi

# Runs the main Perl script, but only works from the current directory
run:		$(EXECUTABLE)
		perl ./$(EXECUTABLE)

# Same as 'make run', but output LOTS of debugging information
debug:		$(EXECUTABLE)
		perl -MQt::debug=calls,gc,ambiguous,verbose ./$(EXECUTABLE)

