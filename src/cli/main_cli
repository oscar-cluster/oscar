#!/usr/bin/perl -w

# $Id$
#
# Copyright (c) 2006 Oak Ridge National Laboratory.
#                  All rights reserved.
#
# This is the main script for the Command Line Installer
# The CLI mirrors the GUI installer by using the same steps only in
# a more scriptable command line version.  This script should not do
# any installation on its own, but should call other scripts to run
# each step.  Doing this will keep the installation process much more
# modular and easy to maintain.
#
# To start the installation process, type the name of this script and
# the network interface to use for OSCAR.
#
# By adding additional flags, this script can be automated:

use strict;
use lib "$ENV{OSCAR_HOME}/lib","/usr/lib/systeminstaller","/usr/lib/systemimager/perl";
use OSCAR::Logger;
use OSCAR::MAC;
use OSCAR::WizardEnv;
use Getopt::Long;

# Need the output immediately
$| = 1;

# The flag variables for the command line
my $selectorfile = " ";
my $buildfile = " ";
my $definefile = " ";
my $netfile = " ";
my $skipselector = '';
my $skipbuild = '';
my $skipinstall = '';
my $skipdefine = '';
my $skipnet = '';
my $skipcomplete = '';
my $skiptest = '';
my $help = '';
my $bootscript = "$ENV{OSCAR_HOME}/src/cli/simple_complete.pl";

# Parses the command line and sets the varaibles
GetOptions('help' => \$help, 'skipselector' => \$skipselector, 'skipbuild' => \$skipbuild, 'skipinstall' => \$skipinstall, 'skipdefine' => \$skipdefine, 'skipnet' => \$skipnet, 'skipcomplete' => \$skipcomplete, 'skiptest' => \$skiptest, 'opkgselector=s' => \$selectorfile, 'buildimage=s' => \$buildfile, 'defineclients=s' => \$definefile, 'networkclients=s' => \$netfile, 'bootscript=s' => \$bootscript);

# The last arguement should be the ethernet adapter used for the installation
my $return;
my $interface = shift;
if (!$interface) {
    $interface = "<none>";
    $return = 1;
} else {
    $return = system("ifconfig $interface > /dev/null 2>&1");
}
if ($return && !$help) {
    print "The interface $interface specified is invalid.\n";
    exit $return
}

# The help text
# Prints if there are extra arguements left or the --help flag is activated
if ($#ARGV >= 0 || $help)
{
    print "Usage: main_cli [FLAGS] interface 
Flags (Provide automation):
    --opkgselector    <filename>  Passes the filename to the selector script
    --buildimage      <filename>  Passes the filename to the build script
    --defineclients   <filename>  Passes the filename to the define script
    --networkclients  <filename>  Passes the filename to the networking script
    --skipselector                Skips the Select Packages step
    --skipinstall                 Skips the Install Packages step
    --skipbuild                   Skips the Build OSCAR Image step
    --skipdefine                  Skips the Define OSCAR Clients step
    --skipnet                     Skips the Setup Networking step
    --skipcomplete                Skips the Complete Cluster Setup step
    --skiptest                    Skips the Test Cluster Setup step
    --bootscript                  The script that will be used to confirm the
                                  nodes have booted and loaded their images
    --help                        Prints this text\n";
    exit 1;
}

oscar_log_section("Running OSCAR CLI Installer");

# Step 0 should be taken care of with the OPD command line utility

# Step 1 - Select Packages
unless ($skipselector) {
    my $cmd = "./selector_cli";
    $cmd = $cmd . " --file $selectorfile" if ($selectorfile ne " ");
    oscar_log_subsection("Running command: $cmd");
    !system($cmd) or die "Failed on Step 1 - Select Packages";
}

# Step 2 - Configure Packages
# ---Wesley Bland---
# There were problems implementing this step.
# The configuration values and formatting were initially stored in
# an HTML file.  This caused problems when the files needed to be
# displayed on the command line.  Then the values were moved to the
# database which helped keep track of the values, but still causes
# problems when displaying the data.  For now this step is skipped.
#system("./configurator_cli");

# Step 3 - Install Packages
# This step doesn't need a seperate cli script as it already has one
unless ($skipinstall) {
    oscar_log_section("Installing Packages");
    my $cmd = "$ENV{OSCAR_HOME}/scripts/install_server $interface";
    oscar_log_subsection("Running command: $cmd");
    if(!system($cmd))
    {
        oscar_log_section("Packages Successfully Installed");
    }
    else
    {
        oscar_log_section("Packages not Installed!");
        die ("Failed Step 3 - Install OSCAR Packages");
    }
}

# Update the env for any newly installed software (oscar opkgs, etc.) 
WizardEnv::update_env();

# Step 4 - Build OSCAR Client Image
unless ($skipbuild) {
    my $cmd = "./build_oscar_image_cli";
    $cmd = $cmd . " --file $buildfile" if ($buildfile ne " ");
    $cmd = $cmd . " $interface";
    oscar_log_subsection("Running command: $cmd");
    !system($cmd) or (die "Failed on Step 4 - Build OSCAR Client Image");
}

# Step 5 - Define OSCAR Clients
unless ($skipdefine) {
    my $cmd = "./define_oscar_clients_cli";
    $cmd = $cmd . " --file $definefile" if ($definefile ne " ");
    $cmd = $cmd . " $interface";
    oscar_log_subsection("Running command: $cmd");
    !system($cmd) or die "Failed on Step 5 - Define OSCAR Clients";
}

# Step 6 Setup networking
unless ($skipnet) {
    !OSCAR::MAC::mac_cli($netfile, 6, {interface => $interface}, 'netboot') or die "Failed on Step 6 - Setup Networking";
}

# Step 7 Complete Cluster Setup
unless ($skipcomplete) {
    # This script should confirm that the client nodes have
    # booted and loaded their images.  The default will be
    # to use a script that waits for the user to type
    # 'continue'.  Other scripts can be run by passing in
    # the flag --bootscript with another script's filename.
    oscar_log_subsection("Running script \"$bootscript\"");    
    
    if(!system($bootscript)) {
        oscar_log_subsection("Script successful.  Continuing...");
    } else {
        oscar_log_subsection("Script failed.  Exiting");
        die ("Failed to confirm client node boot before Step 7 - Complete Cluster Setup");
    }
    
    oscar_log_section("Complete Cluster Setup");
    my $cmd = $ENV{OSCAR_HOME} . "/scripts/post_install";
    if(!system($cmd)) {
        oscar_log_subsection("Successfully completed the cluster install");
    } else {
        oscar_log_subsection("Failed to properly complete the cluter install; please check the logs");
        die ("Failed on Step 7 - Complete Cluster Setup");
    }
}

# This needs to be done before the testing can take place
WizardEnv::update_env();

# Step 8 Test Cluster Setup
unless ($skiptest) {
    oscar_log_section("Test Cluster Setup");
    my $cmd = $ENV{OSCAR_HOME} . "/testing/test_cluster";
    if (!system($cmd)) {
        oscar_log_subsection("Step 8 - Successfully tested the cluster setup");
    } else {
        oscar_log_subsection("Failed to properly test the cluster setup");
        die ("Failed on Step 8 - Test Cluster Setup");
    }
}
