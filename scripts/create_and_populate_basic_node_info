#! /usr/bin/perl

# Copyright 2004 NCSA
#           Neil Gorsuch <ngorsuch@ncsa.uiuc.edu>
# Copyright (c) 2005-2007 The Trustees of Indiana University.  
#                    All rights reserved.
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#
# $Id$

#
# This program is implemented in the "package_config_xmls_to_database"
# script to populate the basic node informaton of the OSCAR database
# More specifically, this populates the Nodes table and updates 
# Groups table only if there is any missing group.
# 
# - Nodes
#

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::Database;
use OSCAR::Database_generic;
use OSCAR::Package;
use OSCAR::oda;

my %options = ();
my %field_value_hash = ();
my $OSCAR_SERVER_NODE = "oscar_server";
my $OSCAR_SERVER_GROUP = "oscar_server";

$options{debug} = 1 if $ENV{OSCAR_DB_DEBUG}; 
$options{verbose} = 1 if $ENV{OSCAR_DB_VERBOSE}; 

# see if there is already a node named oscar_server,
# and make it if it doesn't already exist, this will also
# make a special associated node group named oscar_server
# and a special associated configuration named oscar_server

my @nodes = ();
print "Checking for database existence of node oscar_server ...\n";

# dikim commented out the LOCKING codes here because he believes
# that InnoDB type can handle the all the crossing locking issues.
# He does not want to remove these codes because he easily forgets
# what files have locking codes and where they are and he may need
# them in case innodb works as we expected.

# START LOCKING FOR NEST and open the database.

my @tables =("Groups", "Group_Nodes", "Nodes", "Clusters");
my @errors = ();
#locking("write", \%options, \@tables, \@errors);

# Populate "Nodes" table
my $msg = "in create_and_populate_basic_node_info Populating Nodes records for oscar_server ...\n";
print "DB_DEBUG>$0:====>\n$msg" if $options{debug};
@errors = ("cannot read nodes database table");
set_node_with_group($OSCAR_SERVER_NODE,$OSCAR_SERVER_GROUP,\%options,\@errors);


# update some of the fields in the node record for oscar_server

my $hostname = `hostname`;
chomp $hostname;
%field_value_hash = ( "hostname" => $hostname );
my $where = " WHERE name='oscar_server' ";
print "Updating the hostname field in the oscar_server node to <$hostname> ...\n";
update_table( \%options, "Nodes", \%field_value_hash, $where, \@errors );
my $dns_domain = `dnsdomainname`;
chomp $dns_domain;
if ( defined $dns_domain && $dns_domain ne "" ) {
    print "Updating the dns_domain field in the oscar_server node to ".
          "<$dns_domain>\n";
    %field_value_hash = ( "dns_domain" => $dns_domain );
    my $where = "WHERE name='oscar_server'";
    update_table( \%options, "Nodes", \%field_value_hash, $where, \@errors );
}

# make sure that certain node groups exist

foreach my $node_group_name ( "oscar_clients", "all", "Default_node" ) {
    oscar_log_subsection ("Checking for existence of node group ".
                          "$node_group_name ...");
    my @node_groups = ();
    my $group = get_groups(\@node_groups,\%options,\@errors,$node_group_name);
    if ( ! $group ) {
        oscar_log_section ("Creating node group $node_group_name ...)";
        set_groups($node_group_name,\%options,\@errors,"node");
    }
}


# UNLOCKING FOR NEST.
#unlock(\%options, \@errors);


#exit 0;

