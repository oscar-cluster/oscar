#! /usr/bin/perl

# Copyright 2004 NCSA
#           Neil Gorsuch <ngorsuch@ncsa.uiuc.edu>
# Copyright (c) 2005-2006 The Trustees of Indiana University.  
#                    All rights reserved.
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This script creates or fixes the following:
#   creates the oscar_server node record,
#   creates the node attribute set oscar_server,
#   creates the node attribute set oscar_clients.
#
# $Id$

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::Database;
use OSCAR::Package;
use OSCAR::oda;

my %options = ();
my %field_value_hash = ();
my $OSCAR_SERVER_NODE = "oscar_server";
my $OSCAR_SERVER_GROUP = "oscar_server";

sub do_it_or_die {
    my ( $command, $results_ref, $error ) = @_;
    
    return if oda::do_query(\%options, $command, $results_ref, $error );
    database_disconnect();
    die "$0: $error";
}


# see if there is already a node named oscar_server,
# and make it if it doesn't already exist, this will also
# make a special associated node group named oscar_server
# and a special associated configuration named oscar_server

my @nodes = ();
print "Checking for database existence of node oscar_server ...\n";

# START LOCKING FOR NEST and open the database.

my @tables =("Groups", "Group_Nodes", "Nodes");
my @errors = ();
locking("write", \%options, \@tables, \@errors);

my $msg = "Creating node, node group, configurations records for oscar_server ...\n";
@errors = ("cannot read nodes database table");
set_node_with_group($OSCAR_SERVER_NODE,$OSCAR_SERVER_GROUP,\%options,\@errors);


# update some of the fields in the node record for oscar_server

my $hostname = `hostname`;
chomp $hostname;
%field_value_hash = ( "hostname" => $hostname );
my $where = " WHERE name='oscar_server' ";
print "Updating the hostname field in the oscar_server node to <$hostname> ...\n";
    update_table( \%options, "Nodes", \%field_value_hash, $where, \@errors);
my $dns_domain = `dnsdomainname`;
chomp $dns_domain;
if ( defined $dns_domain && $dns_domain ne "" ) {
    print "Updating the dns_domain field in the oscar_server node to <$dns_domain>\n";
    %field_value_hash = ( "dns_domain" => $dns_domain );
    my $where = "WHERE name='oscar_server'";
    update_table( \%options, "Nodes", \%field_value_hash, $where, \@errors );
}    

# make sure that certain node groups exist

foreach my $node_group_name ( "oscar_clients", "all", "Default_node" ) {
    
    print "Checking for existence of node group $node_group_name ...\n";
    my @node_groups = ();
    my $group = get_groups(\@node_groups,\%options,\@errors,$node_group_name);
    if ( ! $group ) {
        print "Creating node group $node_group_name ...\n";
        set_groups($node_group_name,\%options,\@errors,"node");
    }
}


# UNLOCKING FOR NEST.
unlock(\%options, \@errors);


#exit 0;

