#! /usr/bin/perl

# Copyright 2004 NCSA
#           Neil Gorsuch <ngorsuch@ncsa.uiuc.edu>
# Copyright (c) 2005-2007 The Trustees of Indiana University.  
#                    All rights reserved.
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#
# $Id$

#
# This program is implemented in the "package_config_xmls_to_database"
# script to populate the basic node informaton of the OSCAR database
# More specifically, this populates the Nodes table and updates 
# Groups table only if there is any missing group.
# 
# - Nodes
#

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use OSCAR::ConfigFile;
use OSCAR::Database;
use OSCAR::Database_generic;
use OSCAR::oda;
use OSCAR::Logger;
use OSCAR::Package;
use OSCAR::Network;

my %options = ();
my %field_value_hash = ();
my $OSCAR_SERVER_NODE = "oscar-server";
my $OSCAR_SERVER_GROUP = "oscar-server";

$options{debug} = 1 if $ENV{OSCAR_DB_DEBUG}; 
$options{verbose} = 1 if $ENV{OSCAR_DB_VERBOSE}; 

# see if there is already a node named oscar-server,
# and make it if it doesn't already exist, this will also
# make a special associated node group named oscar-server
# and a special associated configuration named oscar-server

my @nodes = ();
print "Checking for database existence of node oscar-server ...\n";

# dikim commented out the LOCKING codes here because he believes
# that InnoDB type can handle the all the crossing locking issues.
# He does not want to remove these codes because he easily forgets
# what files have locking codes and where they are and he may need
# them in case innodb works as we expected.

# START LOCKING FOR NEST and open the database.

my @tables =("Groups", "Group_Nodes", "Nodes", "Clusters");
my @errors = ();
#locking("write", \%options, \@tables, \@errors);

#
# Populate "Nodes" table
#

# First, we create the appropriate node group for the headnode.
# This will also create the entry for the node itself.
my $msg = "in create_and_populate_basic_node_info Populating Nodes records for oscar-server ...\n";
print "DB_DEBUG>$0:====>\n$msg" if $options{debug};
@errors = ("cannot read nodes database table");
if (set_node_with_group($OSCAR_SERVER_NODE,
                        $OSCAR_SERVER_GROUP,
                        \%options,
                        \@errors) != 1) {
    die "ERROR: Impossible to set headnode information in the database";
}

# Then, we update some of the fields in the node record for oscar-server.
# If the entry does not exist, we include it.
# fqdn: fully qualified domain name: = $hostname.$dns_domain
# name: hostname without dns domainname
my $hostname = `hostname`;
chomp ($hostname);
print "Updating the hostname field in the oscar-server node to <$hostname> ...\n";
%field_value_hash = ( );
my $dns_domain = `dnsdomainname`;
chomp ($dns_domain);
if ( defined $dns_domain && $dns_domain ne "" ) {
    $field_value_hash{"dns_domain"} = $dns_domain;
    # Get the non fqdn hostname.
    # Note: when dnsdomainname is set, sometimes hostname returns fqdn, sometimes not.
    $hostname =~ s/\.$dns_domain//g;
    $field_value_hash{"hostname"} = $hostname;
    # We are sure it is a fqdn
    $field_value_hash{"fqdn"} = $hostname.$dns_domain;
} else {
    %field_value_hash = ( "hostname" => $hostname );
}

if (OSCAR::Database::update_node ('oscar-server',
                                  \%field_value_hash,
                                  undef,
                                  undef) != 1) {
    die "ERROR: Impossible to update the entry for oscar-server";
}

# make sure that certain node groups exist
# Note that those groups are necessary for the population of ODA regarding
# headnode information.
foreach my $node_group_name ( "oscar_clients", "all", "Default_node" ) {
    oscar_log_subsection ("Checking for existence of node group ".
                          "$node_group_name ...");
    my @node_groups = ();
    my $group = OSCAR::Database::get_groups(\@node_groups,
                                            \%options,
                                            \@errors,
                                            $node_group_name);
    if ( ! $group ) {
        oscar_log_section ("Creating node group $node_group_name ...");
        if (OSCAR::Database::set_groups($node_group_name,
                                        \%options,
                                        \@errors,
                                        "node") != 1) {
            die "ERROR: Impossible to create node group $node_group_name";
        }
    }
}

# Finally we make sure that the Nics of the headnodes are correctly set in ODA.
if (OSCAR::Network::update_head_nic()) {
    die "ERROR: Impossible to store data about the head NIC used for cluster ".
        "deployment";
}

#
# Now populate the Packages table with the info from the reachable
# repositories.
# TODO: Since this function is about storing network data, the following
# function should not be there.
#
my $binaries_path = OSCAR::ConfigFile::get_value ("/etc/oscar/oscar.conf",
                                                  undef,
                                                  "OSCAR_SCRIPTS_PATH");
my $cmd = "$binaries_path/populate_oda_packages_table";
if ($ENV{OSCAR_VERBOSE} >= 5) {
    $cmd .= " --debug";
}
my $exit_status = system($cmd)/256;
if ($exit_status) {
    die ("ERROR: Couldn't populate packages table");
}

# UNLOCKING FOR NEST.
#unlock(\%options, \@errors);


#exit 0;

