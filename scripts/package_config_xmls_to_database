#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# Copyright © 2003, The Board of Trustees of the University of Illinois. All rights reserved.
# Copyright 2003 NCSA
#                Neil Gorsuch <ngorsuch@ncsa.uiuc.edu>

use strict;
use Getopt::Long;
use lib "$ENV{OSCAR_HOME}/lib","$ENV{OSCAR_HOME}/lib/OSCAR","../../../lib","../../../lib/OSCAR";
use OSCAR::Package;
use OSCAR::Network;
use oda;
use Data::Dumper;
use OSCAR::Distro;
use OSCAR::Database;

my $folding_character = "_";
my %list_of_multiple_value_folded_fields = ();
my %multiple_value_folded_fields = ();
my %oda_fieldnames = ();
my %oda_shortcuts = ();
my %options = ();
my $package_tables_name_prefix = "package_";
my $packages_table_name = "packages";
my %single_value_folded_fields = ();
my $xml_file_name = "config.xml";

# function to convert an options hash into a string of
# appropriate oda command line options

sub options_to_string {
    my( $options_ref ) = @_;
    
    my $string = "";
    $string = "$string --database=$$options_ref{database}" 
	if exists $$options_ref{database};
    $string = "$string --debug" if $$options_ref{debug};
    $string = "$string --host=$$options_ref{host}"
	if exists $$options_ref{host};
    $string = "$string --host=$$options_ref{password}"
	if exists $$options_ref{password};
    $string = "$string --host=$$options_ref{port}"
	if exists $$options_ref{port};
    $string = "$string --host=$$options_ref{type}"
	if exists $$options_ref{type};
    $string = "$string --verbose" if $$options_ref{verbose};
    $string =~ s/^ //;
    return $string;
}

# function to do a debug print of a hash
# inputs: leading_spaces  string to put in front of lines
#         name            string to print as the hash name
#         hash_ref        pointer to the hash to print       

sub print_hash {
    my( $leading_spaces, $name, $hashref ) = @_;
    print "$0: $leading_spaces$name ->\n";
    foreach my $key ( sort keys %$hashref ) {
	my $value = $$hashref{$key};
	if (ref($value) eq "HASH") {
	    print_hash(  "$leading_spaces    ", $key, $value );
	} elsif (ref($value) eq "ARRAY") {
	    my $string = join(',', @$value);
	    print "$0: $leading_spaces    $key => ($string)\n";
	} elsif (ref($value) eq "SCALAR") {
	    print "$0: $leading_spaces    $key is a scalar ref\n";
	    print "$0: $leading_spaces    $key => $$value\n";
	} else {
	    $value = "undef" unless defined $value;
	    print "$0: $leading_spaces    $key => <$value>\n";
	}
    }
}

sub usage {
    my ( $exit_status, @error_strings ) = @_;
    my $progname = $0;
    print <<USAGE;

$progname initializes the database, doing the followingt:
1. Start the mysql database service if it isn't running.
2. Create the oscar database if it doesn't already exist.
3. Read in all the included oscar package config.xml files,
   populating the database with information in them,
   including creating tables and fields and any shortcuts.
   Already existing records and fields are not modified.

Options:
  --debug             turns on debug output
  --database=DATABASE database name, default is oscar
  --help              prints out usage information then exits
  --host=HOST         database host, default localhost
  --nodebug           turns off debug output
  --password=PASSWORD database password, default allows access
  --port=PORT         database port number, default 3306
  --noverbose         turns off verbose output
  --type=DATABASETYPE set the database type, default is mysql
  --user USER         database user id, default anonymous if non-root
  --verbose           turns on verbose output

Usage:
$progname [options]

USAGE
    if ( @error_strings ) {
	print "\n";
	warn shift @error_strings while @error_strings;
    }
    exit $exit_status;
}

# find the base directory of the oscar distribution,
my $oscar_home;
# first try the environmental variable
if ( exists $ENV{OSCAR_HOME} ) {
    $oscar_home = $ENV{OSCAR_HOME};
    die "$0: bad OSCAR_HOME environmental variable value <$oscar_home>"
	if ( ! -d "$oscar_home");
} 
# or if that fails, try to figure out the directory we're running from
else {
    $oscar_home = $0;
    my $cwd = `pwd`;
    chomp $cwd;
    $oscar_home = $cwd . '/' . $oscar_home
	if $oscar_home !~ /^\//;   # prepend current dir if not abs
    $oscar_home =~ s,/\.\./[^/][^/][^/]+/,/,g; # change /../???*/ to /
    $oscar_home =~ s,/\.\./[^\./][^\./]/,/,g;  # change /../??/   to /
    $oscar_home =~ s,/\./,/,g;                 # change /./       to /
    $oscar_home =~ s,/packages/[^/]+/scripts/,/,g;
    $oscar_home =~ s,/[^/]+$,,;  # Remove the name of the program
    die "$0: bad calculated oscar base directory <$oscar_home>"
	if ( ! -d "$oscar_home");
    $ENV{OSCAR_HOME} = $oscar_home;
}
print "$0: oscar_home=<$oscar_home>\n" if $options{debug};

# configure command line options parsing
Getopt::Long::Configure("ignore_case"); # ignore case
Getopt::Long::Configure("bundling");    # allow -a -b or -ab
Getopt::Long::Configure("auto_abbrev"); # allow abbreviated input

# set default option values
my %options = ( 'debug'       => 0,
                'verbose'     => 0 );

# parse command line options
GetOptions( \%options,
            'debug!',
            'database|d=s',
            'help',
            'host|h=s',
            'password=s',
            'port|p=i',
            'type|t=s',
            'user|u=s',
            'verbose!',
            'version' )
    || usage(1);
print "$0: after GetOptions ARGV=<@ARGV>\n" if $options{debug};
oda::print_hash( "", "$0: options after GetOptions", \%options) if $options{debug};
my $option_strings = options_to_string( \%options );
print "$0: options_strings=<$option_strings>\n" if $options{debug};

# --help flag just prints out usage information and exits
if ( exists $options{help} ) {
    usage( 0 );
}

# any arguments left is an error
usage( 1 ) if @ARGV;

# find the name of the mysql service and start the mysql server
my ($oscar_server_distribution,$oscar_server_distribution_version) = which_distro_server();
my $mysql_service_name;
if ($oscar_server_distribution eq "redhat" || $oscar_server_distribution eq "rhas") {
    $mysql_service_name="mysqld";
} elsif ($oscar_server_distribution eq "mandrake") {
    $mysql_service_name="mysql";
} elsif ($oscar_server_distribution eq "suse") {
    $mysql_service_name="mysql";
} else {
    die "$0: unknown distribution <$oscar_server_distribution>";
}
my $command="LC_ALL=EN;/etc/init.d/$mysql_service_name status";
#print $command;
my @command_output = `$command`;
my $status = $?;
chomp @command_output;
if ( ! grep( /is\ running/, @command_output ) || ! $status ) {
    print "Starting the mysql database server ...\n";
    my $command = "LC_ALL=EN;/etc/init.d/$mysql_service_name start";
    print "$command\n";
    if ( system( $command ) ) {
	my @error_strings = ();
	oda::disconnect( \%options );
	warn shift @error_strings while @error_strings;
	die "$0: cannot start the mysql database server!";
    }
    sleep 2;
}
    
# create the database if not already there and leave us connected to it
my %databases = ();
oda::list_databases( \%options, \%databases );
if ( ! $databases{ oscar } ) {
    print "Creating the OSCAR database ...\n";
    my @error_strings = ();
    if ( ! oda::create_database( \%options,
				 \@error_strings ) ) {
	warn shift @error_strings while @error_strings;
	die "$0: cannot create the OSCAR database";
    }
    print "... OSCAR database successfully created.\n";
}
my @error_strings = ();
if ( ! oda::connect( \%options,
		     \@error_strings ) ) {
    warn shift @error_strings while @error_strings;
    die "$0: cannot connect to the OSCAR database";
}

# initialize the oscar packages related database information by
# slurping in (or supplying default) package config.xml files
# for all packages that were supplied in the oscar tarball/rpm
# (the config.xml file for oda is a special case and is always 
# read in first since it defines a number of database tables
# and is critical for oscar operations)
my $packages_dir = "$oscar_home/packages";
opendir(PACKAGES, $packages_dir)
    || die "$0: cannot open packages directory $packages_dir";
my @packages = ();
my $oda_found = 0;
while ( my $package = readdir(PACKAGES) ) {
    chomp $package;
    if ( $package eq "oda" ) {
	$oda_found = 1;
    } else {
	push @packages, $package;
    }
}
die "$0: cannot find oda package directory $packages_dir/oda"
    if ! $oda_found;
die "$0: cannot find oda package xml file $packages_dir/oda/$xml_file_name"
    if ! -f "$packages_dir/oda/$xml_file_name";
my $script = "$oscar_home/scripts/read_package_config_xml_into_database";
die "$0: cannot find oscar script $script"
    if ! -x $script;
my $script_with_options = $script;
$script_with_options = "$script $option_strings" if $option_strings ne "";
my $command = "$script_with_options $packages_dir/oda/ oda";
print "$0: executing:\n$command\n" if $options{debug};
system($command) == 0 || die "$0: failed to execute:\n$command";
my @results = ();
my @error_strings = ();
die "$0: cannot find or execute the oda shortcut \"packages\""
    if ! oda::execute_command( \%options, "packages" );

print "$0: packages=(" . join( ',', @packages ) . ")\n" if $options{debug};
foreach my $package ( @packages ) {
    my $package_directory = "$packages_dir/$package";
    if ( -d $package_directory &&
	 $package ne "." &&
	 $package ne ".." &&
	 $package ne "CVS" &&
	 ! -e "$package_directory/.oscar_ignore" ) {
        print "$0: package=<$package>\n" if $options{debug};
        my $command = "$script_with_options $package_directory";
	print "$0: executing:\n$command\n" if $options{debug};
	system($command) == 0 ||
	    warn "$0: failed to process package directory $package_directory for package $package";
    }
}

oda::disconnect( \%options );
exit 0;

