#!/bin/bash
#
# embed HPCL extras into $OSCAR_HOME by symbolically linking files
# or directories into corrsponding places in $OSCAR_HOME
# -r option removes symbolic links.
#
# $Id$
#
# (C)opyright Erich Focht <efocht@hpce.nec.com>,
#             all rights reserved.


while [ -n "$1" ]; do
    case "$1" in
	--test|-t) TEST="y"
	    shift
	    ;;
	--remove|-r) REMOVE="y"
	    shift
	    ;;
	--into)
	    shift
	    if [ -z "$1" -o ! -d "$1" ]; then
		echo "Option --into requires a directory argument!"
		exit
	    fi
	    INTO=$1
	    shift
	    ;;
	*)
	    if [ ! -d "$1" ]; then
		echo "Argument $1 is not a directory!"
		exit
	    fi
	    mydir=$1
	    shift
	    break
	    ;;
    esac
done

# special compatibility case with older embed.sh
if [ -z "$INTO" ]; then
    if [ -z "$OSCAR_HOME" ]; then
	echo "\$OSCAR_HOME is not set!"
	exit 1
    fi
    INTO=$OSCAR_HOME
    if [ -z "$mydir" ]; then
	mydir=`pwd`
    fi
fi


if [ -z "$mydir" -o -z "$INTO" ]; then
    echo "USAGE:   $0 --into target_directory [--remove] [--test] directory_to_embed"
    exit 1
fi
if [ ! -d "$mydir" ]; then
    echo "Directory $mydir not found."
    exit 1
fi
cd $mydir || exit 1

this=`basename $0`
cwd=`pwd`

# backup directory
if [ ! -d .backup ]; then
    mkdir .backup
fi




restore_backup () {
    local name=$1
    echo "  mv $cwd/.backup/$name $INTO/$name"
    [ -z "$TEST" ] && mv $cwd/.backup/$name $INTO/$name
}

create_backup () {
    local name=$1
    local btgt=`dirname $cwd/.backup/$name`
    if [ ! -d $btgt ]; then
	echo "  mkdir -p $btgt"
	[ -z "$TEST" ] && mkdir -p $btgt
    fi
    echo "  mv $INTO/$name $btgt"
    [ -z "$TEST" ] && mv $INTO/$name $btgt
}

our_link () {
    local name=$1
    local oname=$2
    if [ -L $oname ]; then
	local link=`/bin/ls -l $oname | awk '{print $NF}'`
	if [ "$link" = "$cwd/$name" ]; then
	    echo "yes"
	    return
	fi
    fi
    echo "no"
}

create_link () {
    local name=$1
    local oname=$2
    echo "  ln -s $cwd/$name $oname"
    if [ -z "$TEST" ]; then
	ln -s $cwd/$name $oname
	if [ $? -ne 0 ]; then
	    echo "Symbolic link creation failed!"
	fi
    fi
}

remove_link () {
    local name=$1
    local oname=$2
    if [ -L $oname ]; then
	if [ `our_link $name $oname` = "yes" ]; then
	    echo "  rm -f $oname"
	    if [ -z "$TEST" ]; then
		rm -f $oname
		if [ $? -ne 0 ]; then
		    echo "Error while removing $oname!"
		fi
	    fi
	else
	    echo "$oname is not our link! Are you sure about the unlink order?"
	fi
    else
	echo "Symlink $oname not found!"
    fi
}

# subroutine for linking in files/directories
# called recursively

linkin () {
    local name=$1
    local oname=$INTO/$name
    local f
    echo ":linkin: $name"
    if [ -L $oname ]; then
	if [ `our_link $name $oname` = "yes" ]; then
	    echo "  ... own link. Skipping."
	    return
	fi
    fi

    if [ -f $name ]; then

	# is a backup needed?
	if [ -e $oname ]; then

	    cmp -s $name $oname
	    if [ $? -ne 0 ]; then
		echo "  File $name already exists in $INTO, backing it up"
		create_backup $name
	    else
		echo "Existing file $oname is identical to $name. Skipping"
		return
	    fi
	fi

	# create symbolic link of file in right place
	create_link $name $oname

    elif [ -d $name ]; then

	if [ -d $oname -o -L $oname ]; then
	    # recursively try to link in each file in the directory
	    echo "Descending directory $name"
	    for f in `/bin/ls -1 $name`; do
		linkin $name/$f
	    done
	    return

	elif [ ! -e $oname ]; then
	    # create backup path
	    mkdir -p $cwd/.backup/`dirname $name`
	    # link in entire directory
	    create_link $name $oname

	else
	    echo "WARNING: $oname is neither a directory, nor a symlink. Skipping!"
	    return
	fi
    fi
}


linkout () {
    local name=$1
    local oname=$INTO/$name
    local f
    echo ":linkout: $name"
    # is it a file?
    if [ -f $name ]; then
	remove_link $name $oname
	
	# does it have a backup?
	if [ -f $cwd/.backup/$name ]; then
	    restore_backup $name
	fi

    # is it a directory?
    elif [ -d $name ]; then
	# is there a backup link?
	if [ -L $cwd/.backup/$name ]; then
	    remove_link $name $oname
	    restore_backup $name
	else
	    # is there a backup directory?

	    if [ -d $cwd/.backup/$name ]; then
	        # so descend directory
		echo "Descending directory $name"
		for f in `/bin/ls -1 $name`; do
		    linkout $name/$f
		done
	    else
		if [ -L $oname ]; then
		# no backup directory, so simply remove the link
		    remove_link $name $oname
		fi
	    fi
	fi
    fi
    return
}


if [ -n "$TEST" ]; then
    echo "Not performing actions, just showing what would be done."
fi

for f in `ls -1 .`; do
    echo ": $f"
    if [ "$f" = "$this" -o "$f" = "CHANGELOG" -o "$f" = ".backup" ]; then
	continue
    fi
    if [ -n "$REMOVE" ]; then
	linkout $f
    else
	linkin $f
    fi
done

