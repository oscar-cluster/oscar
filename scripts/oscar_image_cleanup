#!/usr/bin/env perl
#
# Copyright (c) 2007-2009   Oak Ridge National Laboratory
#                           Geoffroy Vallee <valleegr@ornl.gov>
#                           All rights reserved
#
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# This script tries to clean-up the OSCAR database, the SIS database and the 
# file system when those have non synchronnized images.
#
# Input: None.
# Return: 1 if success, 0 or die else.
#
# $Id: oscar_image_cleanup 5134 2006-07-12 05:51:29Z valleegr $
#
# TODO: automatically get the path for image from the SIS configuration and not
# use the hardcoded path.
#

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use Carp;
use Getopt::Long;
use warnings "all";

use OSCAR::ImageMgt;
use OSCAR::Logger;

sub help () {
    print "Usage: $0 OPTION\n";
    print "\n";
    print "Cleanup OSCAR images.\n";
    print "For more details, please refer to the man page ".
          "(man oscar_image_cleanup)\n";
    print "\n";
}

sub help_and_exit () {
    help ();
    exit 1;
}

sub sanity_check () {
    my $file = "/usr/bin/mksiimage";

    if (!-f $file) {
        carp "ERROR: The mandory file $file is missing";
        return -1;
    }

    return 0;
}

my ($verbose, $debug, $force_delete);
GetOptions(
        "force-delete|f"                  => \$force_delete,
        "debug|d"                         => \$debug,
        "verbose|v"                       => \$verbose,
        ) || help_and_exit ();

OSCAR::Logger::init_log_file ("/var/log/oscar/oscar_image_cleanup.log");

my $initial_verbose_value = 0;
$initial_verbose_value = $ENV{OSCAR_VERBOSE} if (defined $ENV{OSCAR_VERBOSE});
if ($debug) {
    $ENV{OSCAR_VERBOSE} = 10;
}
if ($verbose) {
    $ENV{OSCAR_VERBOSE} = 5;
}

OSCAR::Logger::oscar_log_section "OSCAR Image Cleaning up";

if (sanity_check ()) {
    die "ERROR: System not correctly setup";
}

my @corrupted_images = OSCAR::ImageMgt::get_list_corrupted_images();
print "List of corrupted images: ";
foreach my $image (@corrupted_images) {
    print ($image->{'name'} . " ");
}
print "\n";

my $cmd;
foreach my $corrupted_image (@corrupted_images) {
    print "=== Image cleanup ===\n";
    print "Image name: $corrupted_image->{'name'}\n";
    print "ODA Status: $corrupted_image->{'oda'}\n";
    print "SIS Status: $corrupted_image->{'sis'}\n";
    print "FS Status: $corrupted_image->{'fs'}\n";
    if ($corrupted_image->{'oda'} eq "missing" &&
        $corrupted_image->{'sis'} eq "ok" &&
        $corrupted_image->{'fs'} eq "ok") {
        print ("Deleting the SIS image...\n");
        OSCAR::ImageMgt::delete_image ($corrupted_image->{'name'});
        $cmd = "/usr/sbin/si_rmimage ".$corrupted_image->{'name'}." --force";
        OSCAR::Logger::oscar_log_subsection ("Executing: $cmd");
        system ($cmd);
        print ("Image Deleted.\n");
    } elsif ($corrupted_image->{'oda'} eq "missing" &&
             $corrupted_image->{'sis'} eq "ok" &&
             $corrupted_image->{'fs'} eq "missing") {
        $cmd = "/usr/sbin/si_rmimage ".$corrupted_image->{'name'}." --force";
        OSCAR::Logger::oscar_log_subsection ("Executing: $cmd");
        system ($cmd);
        print ("Image Deleted.\n");
    } elsif ($corrupted_image->{'oda'} eq "missing" &&
             $corrupted_image->{'sis'} eq "missing" &&
             $corrupted_image->{'fs'} eq "ok") {
        my $image_path = "/var/lib/systemimager/images/" .
                         $corrupted_image->{'name'};
        system("rm -rf $image_path");
    } elsif ($corrupted_image->{'oda'} eq "ok" &&
             $corrupted_image->{'sis'} eq "ok" &&
             $corrupted_image->{'fs'} eq "ok") {
        print "Valid image.\n";
    } elsif ($corrupted_image->{'oda'} eq "ok" &&
             $corrupted_image->{'sis'} eq "missing" &&
             $corrupted_image->{'fs'} eq "missing") {
        if ($force_delete) {
            OSCAR::ImageMgt::delete_image_from_oda ($corrupted_image->{'name'});
        } else {
            print "Sorry we do not know yet how to deal with this situation\n";
        }
    }else {
        print "Sorry we do not know yet how to deal with this situation\n";
    }
    print "=====================\n\n";
}

__END__

=head1 NAME

oscar_image_cleanup, a command line tool that checks the status of OSCAR images
(used to deploy clusters) and detect & fix corrupted images.

=head1 SYNOPSIS

oscar_image_cleanup

=head1 DESCRIPTION

oscar_image_cleanup is a command line tool that checks the status of OSCAR 
images (used to deploy clusters) and detect & fix corrupted images. It 
typically checks if SIS images, the file system and information from the OSCAR
database are synchronized. If they are not synchronized, the tool tries to 
delete corrupted images and all associated data.

=head1 OPTIONS

None.

=head1 AUTHOR

Geoffroy Vallee <valleegr@ornl.gov>

=head1 SEE ALSO

perl(1)

=cut
