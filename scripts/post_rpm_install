#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   Copyright 2001-2002      International Business Machines
#                            Sean Dague <japh@us.ibm.com>
#                            Michael Chase-Salerno <bratac@us.ibm.com>
#   (C)opyright 2005         Erich Focht <efocht@hpce.nec.com>
#   Copyright (c) 2005       The Trustees of Indiana University.  
#                            All rights reserved.
#   Copyright (c) 2008-2009  Oak Ridge National Laboratory
#                            Geoffroy Vallee <valleegr@ornl.gov>

#   This script is designed to be run after the image is built.
#   It will do all the fixups required.

# $Id$

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use Carp;
use File::Copy;
use File::Path;
use File::Basename;
use AppConfig;
use SystemInstaller::Utils;
use OSCAR::Env;
use OSCAR::ConfigFile;
use OSCAR::Database;
use OSCAR::Logger;
use OSCAR::LoggerDefs;
use OSCAR::Network;
use OSCAR::Package;
use OSCAR::Utils;
use Getopt::Long;
use Cwd;

my ($verbose,$debug,$quiet);
GetOptions(
            "verbose"   => \$verbose,
            "debug"     => \$debug,
            "quiet"     => \$quiet,
          );

my $initial_verbose_value = 0;
$initial_verbose_value = $ENV{OSCAR_VERBOSE} if (defined $ENV{OSCAR_VERBOSE});

if ($debug) {
    $ENV{OSCAR_VERBOSE} = 10;
    $OSCAR::Env::oscar_verbose=10;
} elsif ($verbose) {
    $ENV{OSCAR_VERBOSE} = 5;
    $OSCAR::Env::oscar_verbose=5;
} elsif ($quiet) {
    $ENV{OSCAR_VERBOSE} = 0;
    $OSCAR::Env::oscar_verbose=0;
} else {
    $ENV{OSCAR_VERBOSE} = 1;
    $OSCAR::Env::oscar_verbose=1;
}

my $imagename = shift 
    or (oscar_log(1, ERROR, "No arguments passed - please pass <image name> and <headnode interface name>"),exit 1);
my $serverint = shift 
    or (oscar_log(5, ERROR, "Only one argument passed - please pass <image name> and <headnode interface name>"), exit 1); 

my $config = SystemInstaller::Utils::init_si_config();

my $targetdir = $config->default_image_dir . "/$imagename";

if(!-d $targetdir) {
    oscar_log(1, ERROR, "The directory $targetdir doesn't exist");
    exit 1;
}

oscar_log(2, SUBSECTION, "Running post_rpm_install");

oscar_log(3, INFO, "post_rpm_install: Running ssh setup");
my $binaries_path = OSCAR::ConfigFile::get_value ("/etc/oscar/oscar.conf",
                                                  undef,
                                                  "OSCAR_SCRIPTS_PATH");
my $cmd = "$binaries_path/ssh_install $targetdir";
if(oscar_system($cmd)) {
    oscar_log(1, ERROR, "Couldn't generate ssh keys ($cmd)");
    exit 1;
}

$cmd = "$binaries_path/integrate_image --name $imagename --verbose";
if (oscar_system ($cmd)) {
    oscar_log(1, ERROR, "Failed to integrate_image");
    exit 1;
}

# Here we run all the post_rpm_install scripts

my @pkgs = OSCAR::Database::list_selected_packages(); # We assume that all cores are selected.

my $return = 0;

oscar_log(3, INFO, "Running OSCAR package post_rpm_install scripts for "
                     .join(", ", @pkgs));

#Â Fist we mount specific filesystems into the image for chrooted runs.

my @bind = ('/dev', '/proc', '/sys', '/run', '/tmp');
my $cmd = "";
$SIG{INT}  = \&UmountSigHandler; # Catch signals so we can unmount garbage.
$SIG{QUIT} = \&UmountSigHandler;
$SIG{TERM} = \&UmountSigHandler;
$SIG{KILL} = \&UmountSigHandler;
$SIG{HUP}  = \&UmountSigHandler;
for my $mpt (@bind) {
   if ( -d $mpt ) {
       oscar_log(5, INFO, "Mounting $mpt into image $targetdir$mpt");
       $cmd = "mount -o bind $mpt $targetdir$mpt";
       if(oscar_system($cmd)) {
           oscar_log(5, WARNING, "Failed to mount -o bind $mpt into the image $targetdir$mpt");
       }
   }
}

foreach my $pkg (@pkgs) {       # %$pkg_ref has the two keys ( package, version);
    if(OSCAR::Package::run_pkg_script_chroot($pkg, $targetdir) != 1) {
       oscar_log(2, ERROR, "Couldn't run post_rpm_install for $pkg");
       $return++;
    }
    # Config script running outside chroot, for access to
    # master databases, xml files and parsing perl modules.
    # Argument passed: image directory path.
    if(!OSCAR::Package::run_pkg_script($pkg,"post_rpm_nochroot",1,$targetdir)) {
       oscar_log(2, ERROR, "Couldn't run post_rpm_nochroot for $pkg");
       $return++;
    }
}

$SIG{INT}  = 'DEFAULT'; # Reset signal handler
$SIG{QUIT} = 'DEFAULT';
$SIG{TERM} = 'DEFAULT';
$SIG{KILL} = 'DEFAULT';
$SIG{HUP}  = 'DEFAULT';
UmountSpecialFS();

if($return) {
    oscar_log (1, ERROR, "There were errors running post_rpm_install scripts. Please check your logs.");
}

$ENV{OSCAR_VERBOSE} = $initial_verbose_value;


exit($return);

sub RunChrootSigHandler {
    my $signal=@_;
    oscar_log(1, INFO, "post_rpm_install: Caught signal $signal");
    UmountSpecialFS();
    exit 1;
}

sub UmountSpecialFS {
    if(defined($targetdir) && ($targetdir ne "/") && (-d $targetdir)) {
        for my $mount ('/dev', '/proc', '/sys', '/run', '/tmp') {
            if (-d $mount) {
                my $cmd = "umount $targetdir$mount";
                oscar_log(5, INFO, "Unmounting [$mount]");
                oscar_system($cmd);
            }
        }
    } else {
        oscar_log(1, INFO, "post_rpm_install: no image dir: nothing to unmount");
    }
}
