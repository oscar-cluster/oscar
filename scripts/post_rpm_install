#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   Copyright 2001-2002      International Business Machines
#                            Sean Dague <japh@us.ibm.com>
#                            Michael Chase-Salerno <bratac@us.ibm.com>
#   (C)opyright 2005         Erich Focht <efocht@hpce.nec.com>
#   Copyright (c) 2005       The Trustees of Indiana University.  
#                            All rights reserved.
#   Copyright (c) 2008-2009  Oak Ridge National Laboratory
#                            Geoffroy Vallee <valleegr@ornl.gov>

#   This script is designed to be run after the image is built.
#   It will do all the fixups required.

# $Id$

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use lib "/usr/lib/systeminstaller";
use Carp;
use File::Copy;
use File::Path;
use File::Basename;
use AppConfig;
use SystemInstaller::Utils;
use OSCAR::ConfigFile;
use OSCAR::Database;
use OSCAR::Logger;
use OSCAR::Network;
use OSCAR::Package;
use Getopt::Long;
use Cwd;

my $verbose;
GetOptions(
    "verbose"   => \$verbose,
    );

my $initial_verbose_value = 0;
$initial_verbose_value = $ENV{OSCAR_VERBOSE} if (defined $ENV{OSCAR_VERBOSE});
if ($verbose) {
    $ENV{OSCAR_VERBOSE} = 5;
}

my $imagename = shift 
    or die("ERROR: No arguments passed - please pass <image name> and <headnode interface name>");
my $serverint = shift 
    or die("ERROR: Only one argument passed - please pass <image name> and <headnode interface name>"); 

my $config = SystemInstaller::Utils::init_si_config();

my $targetdir = $config->default_image_dir . "/$imagename";

if(!-d $targetdir) {
    die ("ERROR: The directory $targetdir doesn't exist");
}

oscar_log_subsection("post_rpm_install: Making sure /dev/null is r/w for all");
!system("chmod a+rw $targetdir/dev/null") 
    or die("ERROR: Couldn't set $targetdir/dev/null permissions!");

oscar_log_subsection("post_rpm_install: Syncing system files");
sync_system_files($targetdir) 
    or die("ERROR: Couldn't sync system files ($targetdir)");

oscar_log_subsection("post_rpm_install: Syncing user files");
sync_user_files($targetdir) 
    or die("ERROR: Couldn't sync user files ($targetdir)");

oscar_log_subsection("post_rpm_install: Running ssh setup");
my $binaries_path = OSCAR::ConfigFile::get_value ("/etc/oscar/oscar.conf",
                                                  undef,
                                                  "OSCAR_SCRIPTS_PATH");
my $cmd = "$binaries_path/ssh_install $targetdir";
!system($cmd) 
    or die("ERROR: Couldn't generate ssh keys ($cmd)");

$cmd = "$binaries_path/integrate_image --name $imagename --verbose";
if (system ($cmd)) {
    die "ERROR: Impossible to execute $cmd";
}

# unmount /proc from image, if needed
if (!system("grep $targetdir/proc /proc/mounts >/dev/null 2>&1")) {
    oscar_log_subsection("post_rpm_install: unmounting /proc from image $imagename");
    !system("umount $targetdir/proc") or croak("Couldn't umount /proc from image!");
}

# Here we run all the post_rpm_install scripts

my @pkgs = OSCAR::Database::list_selected_packages();

my $return = 0;

oscar_log_subsection "Running OSCAR package post_rpm_install scripts for"
                     .join(", ", @pkgs);
foreach my $pkg (@pkgs) {       # %$pkg_ref has the two keys ( package, version);
    if(OSCAR::Package::run_pkg_script_chroot($pkg, $targetdir) != 1) {
       carp("ERROR: Couldn't run post_rpm_install for $pkg");
       $return++;
    }
    # Config script running outside chroot, for access to
    # master databases, xml files and parsing perl modules.
    # Argument passed: image directory path.
    if(!OSCAR::Package::run_pkg_script($pkg,"post_rpm_nochroot",1,$targetdir)) {
       carp("ERROR: Couldn't run post_rpm_nochroot for $pkg");
       $return++;
    }
}

if($return) {
    die ("ERROR: There were errors running post_rpm_install scripts.  Please check your logs.");
}

$ENV{OSCAR_VERBOSE} = $initial_verbose_value;
exit($return);

# DEPRECATED????
# Return: 1 if success, 0 else.
sub link_kernel_files {
    my ($imagedir) = @_;
    my @file;
    my $dir=cwd();
    chdir "$imagedir/boot" or croak ("Can't change to image /boot directory");
    foreach my $link ("module-info","System.map","vmlinuz") {
        unless (-e $link) {
	    @file = glob("$link*smp");
	    symlink($file[0], $link) or croak("Couldn't make symlink for $link");
	}
    }
    chdir "$dir" 
        or (carp ("ERROR: Can't change back to original directory"), return 0);
    return 1;
}

# Return: 1 if success, 0 else.
sub sync_system_files {
    my ($imagedir) = @_;

    my @files = qw(/etc/localtime);
    foreach my $file (@files) {
      if(-e $file) {
        copy($file,$imagedir . $file) 
            or (carp("Couldn't populate $file to $imagedir"), return 0);
      }
    }
    return 1;
}

sub sync_user_files {
    my ($imagedir) = @_;

    my @files = qw(/etc/gshadow /etc/shadow /etc/passwd /etc/group /etc/hosts);
    foreach my $file (@files) {
      if(-e $file) {
        copy($file,$imagedir . $file) 
            or (carp("Couldn't populate $file to $imagedir"), return 0);
      }
    }
    return 1;
}

