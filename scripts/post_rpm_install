#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   Copyright 2001-2002 International Business Machines
#                       Sean Dague <japh@us.ibm.com>
#                       Michael Chase-Salerno <bratac@us.ibm.com>

#   This script is designed to be run after the image is built.
#   It will do all the fixups required.

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use Carp;
use File::Copy;
use File::Path;
use File::Basename;
use AppConfig;
use OSCAR::Network;
use OSCAR::Package;
use Cwd;

my $imagename = shift or croak("No image name specified!"); 
my $serverint = shift or croak("No server interface name specified!"); 

my $config = init_si_config();

my $targetdir = $config->default_imagedir . "/$imagename";

if(!-d $targetdir) {croak("The directory $targetdir doesn't exist");}

sync_user_files($targetdir) or croak("Couldn't sync user files");

!system("./ssh_install $targetdir") or croak("Couldn't generate ssh keys");

# Here we run all the post_rpm_install scripts

my @pkgs = list_pkg();

foreach my $pkg (@pkgs) {
    run_pkg_script_chroot($pkg,$targetdir) or croak("Couldn't run post_rpm_install for $pkg");
}

sub link_kernel_files {
    my ($imagedir) = @_;
    my @file;
    my $dir=cwd();
    chdir "$imagedir/boot" or croak ("Can't change to image /boot directory");
    foreach my $link ("module-info","System.map","vmlinuz") {
        unless (-e $link) {
	    @file = glob("$link*smp");
	    symlink($file[0], $link) or croak("Couldn't make symlink for $link");
	}
    }
    chdir "$dir" or croak ("Can't change back to original directory");
    return 1;
}

sub sync_user_files {
    my ($imagedir) = @_;

    my @files = qw(/etc/gshadow /etc/shadow /etc/passwd /etc/group);
    foreach my $file (@files) {
      if(-e $file) {
        copy($file,$imagedir . $file) or (carp("Couldn't populate $file to $imagedir"),
                                          return undef);
      }
    }
    return 1;
}

sub init_si_config {
    my $config = new AppConfig(
                               DEFAULT_IMAGEDIR => { ARGCOUNT => 1},
                               AUTOINSTALL_SCRIPT_DIR => { ARGCOUNT => 1},
                               AUTOINSTALL_BOOT_DIR => { ARGCOUNT => 1},
                               RSYNCD_CONF => { ARGCOUNT => 1},
                               CONFIG_DIR => { ARGCOUNT => 1}
                              );
    $config->file("/etc/systemimager/systemimager.conf");
    return $config;
}
