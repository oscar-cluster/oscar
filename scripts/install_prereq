#!/usr/bin/env perl
#
# Copyright (c) Erich Focht <efocht@hpce.nec.com>
#               All rights reserved
# Copyright (c) 2007 The Trustees of Indiana University.
#                    All rights reserved.
# Copyright (c) 2007-2009   Oak Ridge National Laboratory.
#                           Geoffroy R. Vallee <valleegr@ornl.gov>
#                           All rights reserved.
#
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# $Id$

use strict;
use Getopt::Long;
use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::Env;
use OSCAR::OCA::OS_Detect;
use OSCAR::PackagePath;
use OSCAR::CmpVersions;
use OSCAR::Prereqs;
use OSCAR::Logger;
use OSCAR::LoggerDefs;
use OSCAR::Utils;
use Data::Dumper;
use Carp;

use vars qw($pm $ohome $dumb $smart @prereqs $separator $oscar_pkg_pool 
            $distro_pkg_pool);

my ($debug, $verbose, $quiet, $path, $status, $remove);
GetOptions(
           "dumb"      => \$dumb,
           "smart"     => \$smart,
           "remove"    => \$remove,
           "status"    => \$status,
           "verbose"   => \$verbose,
           "debug"     => \$debug,
           "quiet"     => \$quiet,
           ) || &usage(1);

#
# Own distro detection
#
my $os = OSCAR::OCA::OS_Detect::open();
if (!defined $os) {
    oscar_log(1, ERROR, "Unable to determine the local operating system");
}
my $distro    = $os->{distro};
my $distrover = $os->{distro_version};
my $arch      = $os->{arch};
my $suffix    = $os->{pkg};
my $dstring   = $os->{compat_distro}.$os->{compat_distrover}.
    "-".$os->{arch};
my $cstring   = "common-".$suffix."s";

my $march = $arch;
my $rarch = $arch;
if ($arch eq "i386") {
    $march = "i?86";  # used for shell-like globbing
    $rarch = "i.86";  # used for regular expressions
} elsif ($arch eq "ppc64"){ # DIKIM added for supporting YDL-ppc64
    $march = "ppc64,ppc";
    $rarch = "ppc64|ppc";
}

sub handle_smart_pkgs ($@) {
    my ($remove, @pkgs) = @_;
    my ($err, @out);

    return if (!scalar(@pkgs));
    if ($remove) {
        oscar_log(4, INFO, "Smartly removing: ".join(",",@pkgs));
        ($err, @out) = $pm->smart_remove(@pkgs);
    } else {
        oscar_log(4, INFO, "Smartly installing: ".join(",",@pkgs));
    my $pm_status = $pm->status();
    oscar_log(5, INFO, "Packman status: $pm_status");
        ($err, @out) = $pm->smart_install(@pkgs);
    }
    require OSCAR::PackManDefs;
    if ($err == OSCAR::PackManDefs::ERROR()) {
        oscar_log(1, ERROR, "$err error(s) occured for prereq ".join(", ", @pkgs)."("
             .join("\n",@out).")");
        return -1;
    }
    return 0;
}

#
# Simple implementation for dumb rpm handling
#
sub handle_dumb_rpms ($@) {
    my ($remove, @pkgs) = @_;
    my $cmd;
    return if (!scalar(@pkgs));
    for my $pkg (@pkgs) {
        # make sure we deal with package names, not file names
        my $pkgname = $pkg; $pkgname =~ s/\.rpm$//;
        if ($remove) {
            $cmd = "rpm -q $pkgname >/dev/null 2>&1";
            if (!system($cmd)) {
                # remove all instances of package
                $cmd = "rpm -ev --all --nodeps $pkgname";
                oscar_system($cmd) or oscar_log(1, WARNING, "Removal failed: $!");
            } else {
                oscar_log(1, INFO, "Package $pkgname not installed.");
            }
        } else {
            # already installed?
            $cmd = "rpm -q $pkgname >/dev/null 2>&1";
            if (oscar_system($cmd)) {
                # not installed, so do it now: 
                # - we try first to find the package locally
                # - if the package is not locally available, we try to find it
                #   on remote repositories.
                my $pkgpath = locate_pkg($pkg);
                if (defined $pkgpath && $pkgpath ne "") {
                    $cmd = "rpm -Uhv $pkgpath"; # FIXME (does not handle deps)
                } else {
                    # If we cannot find the package locally try to use yum
                    $cmd = "yum -y install $pkg";
                }
                if (oscar_system($cmd)) {
                    oscar_log(1, ERROR, "Install failed: $!");
                    exit 1;
                }
            }
        }
    }
}

#
# Simple implementation for dumb debian package handling
# hacked by Erich Focht out of the dumb_rpms code, without much
# knowledge of dpkg
#
sub handle_dumb_debs ($@) {
    my ($remove, @pkgs) = @_;
    my $cmd;
    my $ret;
    return if (!scalar(@pkgs));
    for my $pkg (@pkgs) {
        # make sure we deal with package names, not file names
        my $pkgname = $pkg; $pkgname =~ s/\.deb$//;
        if ($remove) {
            # we test first if the package is installed
            #$cmd = "dpkg -l | grep \"ii  $pkgname \"";
            #oscar_log(7, ACTION, "About to run: $cmd");
            #$ret = `$cmd`;
            if (!OSCAR::Prereqs::is_deb_pkg_installed($pkgname)) {
                # remove all instances of package
                $cmd = "apt-get remove $pkgname --assume-yes";
                oscar_system($cmd);
            }
        } else {
            # we try first to find the package locally
            my $pkgpath = locate_pkg($pkg);
            if ($pkgpath) {
                # if we find a package locally we use it
                oscar_log(5, INFO, "Package $pkgname locally found $pkgpath");
                $cmd = "dpkg -i $pkgpath";
                !oscar_system($cmd) or (oscar_log(1, ERROR, "install failed: $!"), exit 1);
            } else {
                # if we do not find a package locally, we try to find one online
                $cmd = "apt-get update && apt-get install $pkgname --assume-yes --allow-unauthenticated";
                oscar_system($cmd);
            }
        }
    }
}

#
# try to locate a package file in the repositories
#
sub locate_pkg ($) {
    my ($pkg) = @_;
    my $found = 0;
    my @pkgs;
    my @globstr;
    my $pkgmatch;
    my $sepmatch = $separator."[0-9]";
    $pkgmatch = $pkg;
    if ($pkg =~ /\.$suffix$/) {
        $pkgmatch =~ s/\.$suffix$/*.$suffix/;
    } elsif ($pkg =~ /\.($rarch|noarch|all)$/) {
        my $parch = $1;
        $pkgmatch =~ s/\.$parch$/*.$parch.$suffix/;
    } else {
        $pkgmatch .= "*{$march,noarch,all}.$suffix";
    }
    # 
    my @lrepos;
    for my $repo ( split(",",$oscar_pkg_pool), split(",",$distro_pkg_pool) ) {
        if (($repo =~ /^\//) || ($repo =~ /^(file):/)) {
            $repo =~ s/^file://;
            push @lrepos, $repo;
        }
    }

    push @globstr, $ENV{OSCAR_HOME}."/packages/*/distro/{$cstring,$dstring}/$pkgmatch";
    push @globstr, $ENV{OSCAR_HOME}."/share/prereqs/*/distro/{$cstring,$dstring}/$pkgmatch";

    push @globstr, map { "$_/$pkgmatch" } @lrepos;

    oscar_log(5, INFO, "globstring: ".join(" ",@globstr));
    my @tmp = glob(join(" ",@globstr));
    oscar_log(5, INFO, "locate_pkg glob result: ".join(",",@tmp));

    # detect best version
    return best_version($pkg, @tmp);
}

sub best_version ($@) {
    my ($pkg, @candidates) = @_;
    my ($best, $bestversion);

    # Simple case, we do not have any candidates so there is no best version
    if (scalar(@candidates) == 0) {
        return undef;
    }

    for my $p (@candidates) {
    my ($name, $ver, $parch);
    if ($suffix eq "rpm") {
        my $cmd = "rpm -q --qf \"%{NAME} %{VERSION}-%{RELEASE} %{ARCH}\" -p $p";
        oscar_log(7, ACTION, "About to run: $cmd");
        my $info = `$cmd`;
        my $err = $?;
        if (!$err) {
            ($name,$ver,$parch) = split(" ",$info);
        } else {
            oscar_log(5, ERROR, " ? rpm query returned $err");
        }
    } elsif ($suffix eq "deb") {
        local *IN;
        my $cmd = "dpkg --info $p";
        oscar_log(7, ACTION, "About to run: $cmd");
        open IN, "$cmd |" or (oscar_log(1, ERROR, "Failed to open $p"), exit 1);
        while (<IN>) {
            chomp;
            if (/^ Package: (.*)$/) {
                $name = $1;
            } elsif (/^ Version: (.*)$/) {
                $ver = $1;
            } elsif (/^ Architecture: (.*)$/) {
                $parch = $1;
            }
        }
        close IN;
    }
    oscar_log(5, INFO, ":: $p :: $name $ver $parch<");
    next if (!$name || !$ver);
    next if ($pkg !~ /^$name/);
    #$rarch = "ppc64|pcc" if $rarch eq "ppc64"; # DIKIM added it for YDL
    next if ($parch !~ /^($rarch|noarch|all)$/);
    if (!$best || (cmp_version_strings($ver, $bestversion) == 1)) {
        oscar_log(5, INFO, "   - $p selected");
        $best = $p;
        $bestversion = $ver;
    }
    }
    return $best;
}

sub usage {
    my $ret = shift;
    print <<USAGE;
Usage:
\t$0 --dumb|--smart|--status [--verbose] prereq_path

Install prerequisites located in prereq_path. They should have
the same directory structure like normal OSCAR packages but
need to contain the configuration file prereq.cfg
This file is required because prereqs are installed before
config.xml files can be parsed.
The option --status only displays the current prereqs status.
Typically it shows if prereqs packages are already installed or
removed.
If --status is not used, one of --smart|--dumb must be selected!
--dumb installs packages listed in the prereq.cfg file with the
base package manager and is unable to resolve dependencies. It
should be used for bootstrapping a smart package manager
--smart installs prereqs with the help of a smart package manager
like yum(e).
USAGE
    exit $ret if ($ret);
}


# Remove a prereq. Remember that the install and remove lists are defined based
# on the installation phase. So here, we need to remove the packages that are
# installed at installation time.
#
# Return: 0 if success, value different to 0 else.
#
# Note that we can only use PackMan here because this is the minimal piece of
# software we can rely on to deal with binary packages. ORM is of a too high
# level.
sub remove_prereq ($$$$$) {
    my ($distro, $distrover, $arch, $prereqs, $suffix) = @_;

    my $distro_id = "$distro-$distrover-$arch";
    my ($installs, $removes, $shellcmds) = 
        OSCAR::Prereqs::get_rawlist_prereqs($distro, $distrover, $arch, @$prereqs);

    require OSCAR::PackMan;
    if ($suffix eq "rpm") {
        $pm = PackMan::RPM->new;
    } elsif ($suffix eq "deb") {
        $pm = PackMan::DEB->new;
    } else {
        oscar_log(5, ERROR, "Support for dumb $suffix install is not implemented.");
        return -1;
    }
    $pm->{Distro} = $distro_id;
    oscar_log(1, INFO, "Following packages will be removed: ".
        join(", ",@$installs));
    my ($err, @out) = $pm->smart_remove(@$installs);
    return $err;
}

sub install_prereq($$$$$) {
    my ($distro, $distrover, $arch, $prereqs, $suffix) = @_;

    my ($installs, $removes, $shellcmds) = 
        OSCAR::Prereqs::get_prereqs($distro, $distrover, $arch, @$prereqs);

    # try to detect smart installer, fall-back to dumb installer if not found
    if (!$dumb) {
        $dumb = 1;
        $smart = 0;
        eval "require OSCAR::PackMan";
        if (!$@ and eval("PackMan->new()") ) {
            my $tp;
            eval "\$tp = PackMan->new()";
            if ($tp->is_smart()) {
                #(system("which yume >/dev/null 2>&1") && ($suffix eq "rpm")) or
                #(system("which rapt >/dev/null 2>&1") && ($suffix eq "deb"))) {
                $smart = 1;
                $dumb = 0;
                oscar_log(5, INFO, "Detected OSCAR::PackMan, ".
                    "using smart mode");
            }
        }
        if ($dumb) {
            oscar_log(5, INFO, "Could not detect ".
                "OSCAR::PackMan, falling back to dumb mode");
        }
    }

    # locate destination path for prereq package files and repository url
    $oscar_pkg_pool = &OSCAR::PackagePath::oscar_repo_url();
    $distro_pkg_pool = &OSCAR::PackagePath::distro_repo_url();
    $separator = &OSCAR::PackagePath::pkg_separator();

    oscar_log (4, INFO, "OSCAR pools: $oscar_pkg_pool");
    oscar_log (4, INFO, "Distro pools: $distro_pkg_pool");
    oscar_log (4, INFO, "Prereq paths: ".join(",",@prereqs));

    #
    # Is this "smart mode"? Then load PackMan and regenerate the metadata cache
    #
    if ($smart) {
        require OSCAR::PackMan;
        require OSCAR::PackageSmart;

        OSCAR::Logger::oscar_log_subsection "Adding repos $oscar_pkg_pool, ".
            "$distro_pkg_pool";
        my $local_repos = "$oscar_pkg_pool";
        $local_repos .= ", $distro_pkg_pool" if $distro_pkg_pool ne "";
        my @repos = split (",", $local_repos);
        OSCAR::Utils::print_array (@repos);
        $pm = PackMan->new;
        if (!defined $pm) {
            oscar_log(5, ERROR, "ERROR: invalid Packman object");
            return -1;
        }
        my $ret = $pm->repo(@repos);
        if ($ret != scalar(@repos)) {
            oscar_log(5, INFO, "We added ".
                scalar(@repos)." but only $ret were saved");
        }
        if (!defined $pm) {
            oscar_log(5, ERROR, "Invalid Packman object");
            return -1;
        }
    }

    oscar_log(1, INFO, "Following packages will be removed: ".
        join(", ",@$removes));
    oscar_log(1, INFO, "Following packages will be installed: ".
        join(", ",@$installs));
    oscar_log(5, INFO, "Following shell commands will be ".
        "executed: ".join(", ",@$shellcmds));

    if ($dumb) {
        if ($suffix eq "rpm") {
            # do the removes before the installs
            handle_dumb_rpms(1, @$removes);
            handle_dumb_rpms(0, @$installs);
        } elsif ($suffix eq "deb") {
            # do the removes before the installs
            handle_dumb_debs(1, @$removes);
            handle_dumb_debs(0, @$installs);
        } else {
            oscar_log(5, ERROR, "Support for dumb $suffix install is not implemented.");
        }
    } else {
        # do the removes before the installs
        handle_smart_pkgs(1, @$removes);
        handle_smart_pkgs(0, @$installs);
    }

    # check whether binary packages were really installed!!!
    # ...
    if (scalar(@$installs)) {
        my @missing_pkgs = OSCAR::Prereqs::check_installed(@$installs);
        if (scalar (@missing_pkgs) > 0) {
            oscar_log(5, ERROR, "The following packages were NOT installed:\n".
                 join (", ", @missing_pkgs));
            return -1;
        }
    }

    for my $cmd (@$shellcmds) {
        $cmd =~ s/\$OSCAR_HOME/$ohome/g;
        # We do not check the return code because we need here to deal with
        # warnings versus errors, and we do not have any policy to do so.
        oscar_system("$cmd");
    }
    return 0;
}


# check paths
&usage(1) if (!scalar(@ARGV));

$ohome = $ENV{OSCAR_HOME};

#my $initial_verbose_value = 0;
#$initial_verbose_value = $ENV{OSCAR_VERBOSE} if (defined $ENV{OSCAR_VERBOSE});

if ($debug) {
    $ENV{OSCAR_VERBOSE} = 10;
    $OSCAR::Env::oscar_debug = 1;
    $OSCAR::Env::oscar_verbose = 10;
} elsif ($verbose) {
    $ENV{OSCAR_VERBOSE} = 5;
    $OSCAR::Env::oscar_verbose = 5;
} elsif ($quiet) {
    $ENV{OSCAR_VERBOSE} = 0;
    $OSCAR::Env::oscar_verbose = 0;
} else {
    $ENV{OSCAR_VERBOSE} = 1;
    $OSCAR::Env::oscar_verbose = 1;
}

for my $p (@ARGV) {
    if (! -d "$p" || ! -f "$p/prereq.cfg") {
        oscar_log(1, ERROR, "$p is not a directory or ".
            "doesn't contain a prereq.cfg file!");
        usage(1);
    } else {
        push @prereqs, "$p";
    }
}

if ($status) {
    oscar_log(1, INFO, "Prereq status for $distro, ".
        "$distrover, $arch");
    my $ret = OSCAR::Prereqs::get_prereqs_status ($distro,
                                                  $distrover,
                                                  $arch,
                                                  @prereqs);

    exit ($ret);
}


# collect all config lines and build list of packages to be installed/removed
# collect all shell commands to be executed
# ...
oscar_log(2, INFO, "Searching prereqs for $distro, ".
    "$distrover, $arch in ".join (", ", @prereqs));

# now go with the processing
if ($smart || $dumb) {
    if (install_prereq ($distro, $distrover, $arch, \@prereqs, $suffix)) {
        oscar_log(1, ERROR, "Impossible to install the prereqs");
        exit 1;
    }
} elsif ($remove) {
    if (remove_prereq ($distro, $distrover, $arch, \@prereqs, $suffix)) {
        oscar_log(1, ERROR, "Impossible to remove the prereqs");
        exit 1;
    }
}

# $ENV{OSCAR_VERBOSE} = $initial_verbose_value;

exit 0;


__END__

=head1 NAME

install_prereq, a command line tool for OSCAR for the management of
prerequriments.

=head1 SYNOPSIS

install_prereq OPTIONS <prereq_path>

=head1 DESCRIPTION

install_prereq is a command line tool for OSCAR for the management of
prerequirements. Prereqs may be binary packages to install or remove, as well as
scripts to execute. The prereqs are mandatory for the usage of OSCAR.
Install prerequisites located in prereq_path. They should have the same
directory structure like normal OSCAR packages but need to contain the
configuration file prereq.cfg. This file is required because prereqs are 
installed before config.xml files can be parsed.
For more information about this configuration file and prereqs functionnalities,
please refer to the OSCAR documentation. For more information about OSCAR, 
please visit http://oscar.openclustergroup.org/.

=head2 Syntax

install_prereq [options] <prereq_path>

=over 1

=item prereq_path

The path of the configuration file for a given prereq.

=back

=head2 Options

Recognized options include: --dumb|--smart|--status [--verbose]

=over 4

=item --dumb

Installs packages listed in the prereq.cfg file with the base package manager 
and is unable to resolve dependencies. It should be used for bootstrapping a 
smart package manager.

=item --smart

Installs prereqs with the help of a smart package manager like yum(e).

=item --status

Give the current status of a given prereq (1 means that the prereq is installed, 0 that the prereq is not fully installed).

=item --verbose

Display debugging information.

=back

=cut
