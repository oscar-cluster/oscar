#!/usr/bin/env perl
#
# Copyright (c) 2002-2005 The Trustees of Indiana University.  
#                         All rights reserved.
# Copyright (c) 2005 Bernard Li <bli@bcgsc.ca>
# 
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# Generic setup script for copying distro and arch specific RPMs/packages
# from distro/*/ to /tftpboot/rpm. Can also be used for deleting RPMs from
# the /tftpboot/rpm package pool.
#
# $Id$
#
# (c) 2005 Erich Focht <efocht@hpce.nec.com>

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use POSIX;
use Carp;
use OSCAR::OCA::OS_Detect;
use OSCAR::Package;
use Getopt::Long;
use File::Basename;
use File::Copy;

sub vprint;

# One must always protect oneself.
#
die "\$OSCAR_HOME: not defined.\n" unless exists $ENV{OSCAR_HOME};
die "$ENV{OSCAR_HOME}: not a directory.\n" unless -d $ENV{OSCAR_HOME};
die "$ENV{OSCAR_HOME}: not accessible.\n" unless -x $ENV{OSCAR_HOME};
die "\$OSCAR_PACKAGE_HOME: not defined.\n" unless exists $ENV{OSCAR_PACKAGE_HOME};
die "$ENV{OSCAR_PACKAGE_HOME}: not a directory.\n" unless -d $ENV{OSCAR_PACKAGE_HOME};
die "$ENV{OSCAR_PACKAGE_HOME}: not accessible.\n" unless -x $ENV{OSCAR_PACKAGE_HOME};

# Different distros require different RPMs. Different architectures, too.

my $base_dir= $ENV{OSCAR_PACKAGE_HOME} . "/distro";
my $oscar_pkg_pool = $OSCAR::Package::RPM_POOL;

# configure command line options parsing
Getopt::Long::Configure("ignore_case"); # ignore case
Getopt::Long::Configure("auto_abbrev"); # allow abbreviated input

my %options;
GetOptions( \%options,
	    'arch|a',
	    'distro|d=s',
            'erase|e',
	    'help|h',
	    'pool|p=s',
            'test|t',
            'verbose|v!'
            ) || usage();

# Query distro/version of the master node
!OSCAR::OCA::OS_Detect::open() or
    die "Unable to determine operating system";
my $os = $OS_Detect->{query};

# set package name
my $pkg_name = $ENV{OSCAR_PACKAGE_HOME};
$pkg_name =~ s:^.*\/::g;

# force verbose output if --test was selected
$options{verbose} = 1 if exists $ENV{DEBUG_OSCAR_SETUP} || $options{test};

if ($options{pool}) {
    $oscar_pkg_pool = $options{pool};
}

usage() if ($options{help});

# Quick sanity check
if (! -d $oscar_pkg_pool) {
    croak("Directory $oscar_pkg_pool does not exist");
}

# Which architecture are we dealing with?
my $march;
if ($options{arch}) {
    $march = $options{arch};
} else {
    $march = $os->{arch};
    $march = "i386" if $march =~ /^i[3456]86$/;
}

#
# Packages to which command applies. If empty, use all packages!
#
my @argpkgs = @ARGV;

################################
## Do the job
################################

# List of RPM files found in the distro-specific directories
my @pkgfiles;

# Find first compatible subdirectory
# Note ordering, later occurrence of identical filenames overwrite earlier.
# ../RPMS, common-arch, and distro-compat dir.
#
my @src_dirs;
push @src_dirs, "../RPMS" if (-d "$base_dir/../RPMS");
push @src_dirs, "common-rpms" if (-d "$base_dir/common-rpms");
for my $dir (distro_compat()) {
    if (-d "$base_dir/$dir") {
	push @src_dirs, $dir;
	last;
    }
}
print "Distro specific packages come from\n\t$base_dir/"
       . join("\n\t$base_dir/",@src_dirs)."\n";

# List packages.
#
my %pkglist = map { /([^\/]+)$/, $_ } map { glob("$base_dir/$_/*") } @src_dirs;
vprint "Available Packages:\n\t".join( "\n\t", map {"$_: $pkglist{$_}"} keys %pkglist )."\n";

#
# No packages on the argument line? Then take all packages.
#
@argpkgs = keys %pkglist unless @argpkgs;

###
# Copy packages to the package pool.
###
for my $pkg (@argpkgs) {
    
    my $basename;

    my @possibles = grep /^\Q$pkg\E[-\.]/, keys %pkglist;
    push @possibles, ($pkg) if exists $pkglist{$pkg};  # above fails for complete match.
    vprint "Matching packages:\n\t".join( "\n\t", @possibles )."\n" if @possibles > 1;
    unless ( @possibles ) {
	print STDERR "Package $pkg not found\n";
	next;
    }
    if( @possibles == 1 ) {
	$basename = $possibles[0];
    } else {
    	$basename = (sort {length($a) <=> length($b)} @possibles)[0];
    }
    if ($options{erase}) {
	print "Delete $basename from $oscar_pkg_pool\n";
	unless( -f "$oscar_pkg_pool/$basename" && $options{test} ) {
	    unlink( "$oscar_pkg_pool/$basename" ) ||
		croak("Error occured while deleting: $!");
	}
    } else {
	my $filename = $pkglist{$basename};
	my $msg = dirname($filename)."/${pkg}.txt";
	if (-f $msg) {
	    print STDOUT "\n::::::::::::::-------------------------\n";
	    open IN, "< $msg" or croak("Couldn't open $msg");
	    my @lines = <IN>;
	    close IN;
	    print STDOUT map {": $_"} @lines;
	    print STDOUT "::::::::::::::-------------------------\n";
	}
	print " Copy $filename -> $oscar_pkg_pool\n";
	if (!defined $options{test}) {
	    copy($filename, $oscar_pkg_pool) ||
		croak("Error occured while copying: $!");
	}
    }
}

exit 0;

############################################################################
######## only subroutines below
############################################################################

sub vprint {
    print @_ if ($options{verbose});
}

#
# Compatibility chain of distro-specific RPM sources
#
sub distro_compat {
    my @compatlist;
    # get standard distro name and version
    my ($name, $ver) = distroname();

    # remove "." from version name
    my $ver1 = $ver;
    $ver1 =~ s/\.//;

    # remove part behind first dot in version name
    my $ver2 = $ver;
    $ver2 =~ s/\..*$//g;

    # the order is important!
    push @compatlist, $name . $ver  . "-" . $march;
    push @compatlist, $name . $ver;
    if( $ver1 ne $ver ) {
	push @compatlist, $name . $ver1 . "-" . $march;
	push @compatlist, $name . $ver1;
    }
    if( $ver2 ne $ver ) {
	push @compatlist, $name . $ver2 . "-" . $march;
	push @compatlist, $name . $ver2;
    }
    push @compatlist, $name         . "-" . $march;
    push @compatlist, $name;

    vprint("Compatlist: ".join(" ",@compatlist)."\n");
    return @compatlist;
}

#
# Standardized distribution subdirectory name.
# Currently based on the OSCAR::Distro.pm framework, should be migrated to
# OSCAR::OCA::OS_Detect as soon as that framework is complete.
#
sub distroname {
    my ($name, $ver);

    # override distro detection
    if ($options{distro}) {
	($name, $ver) = split /-/, $options{distro};
    } else {
        $name = $os->{compat_distro};
        $ver = $os->{compat_distrover};
    }
    return ($name,$ver);
}


sub usage {
    print <<END_USAGE;
Usage: generic-setup [options] [pkg1 pkg2 ...]

  Scan the distribution specific directories distro/\$distro\$version-\$arch
  and the common directory (distro/common-rpms) for best packages for
  current or specified architecture (or noarch). Either copy the package
  files to the OSCAR package repository (/tftpboot/rpm) or delete them
  from there.

  If package names are passed as arguments, actions are limited to these
  packages.

  When copying in packages, if a file named \$pkg.txt exists, it will be
  displayed in the STDOUT of the command as comment.

 Options:
   --arch|-a      : override locally detected architecture
   --distro  D-V  : translated distro string (for testing only!)
   --erase|-e     : erase packages with same name from RPM pool (tftpboot/rpm)
   --help|-h      : display this help text
   --pool|-p path : override setting of RPM pool path (default /tftpboot/rpm)
   --test|-t      : just test without copying or erasing files
   --verbose|-v   : verbose printout
END_USAGE
   exit(1);
}

