#!/usr/bin/env perl
#
# Copyright (c) 2002-2003 The Trustees of Indiana University.  
#                         All rights reserved.
# 
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# Generic setup script for copying distro and arch specific RPMs/packages
# from distro/*/ to /tftpboot/rpm. Can also be used for deleting RPMs from
# the /tftpboot/rpm package pool.
#
# $Id$
#
# (c) 2005 Erich Focht <efocht@hpce.nec.com>

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use POSIX;
use Carp;
use OSCAR::Distro;
use OSCAR::PackageBest;
use Getopt::Long;
use File::Basename;
use File::Copy;

# Different distros require different RPMs. Different architectures, too.

my $base_dir= $ENV{OSCAR_PACKAGE_HOME} . "/distro";
my $oscar_pkg_pool = '/tftpboot/rpm';   # No env var, using name in Package.pm

# configure command line options parsing
Getopt::Long::Configure("ignore_case"); # ignore case
Getopt::Long::Configure("auto_abbrev"); # allow abbreviated input

my %options;
GetOptions( \%options,
	    'arch|a',
	    'distro|d=s',
            'erase|e',
	    'help|h',
	    'pool|p=s',
            'test|t',
            'verbose|v!'
            ) || usage();

# set package name
my $pkg_name = $ENV{OSCAR_PACKAGE_HOME};
$pkg_name =~ s:^.*\/::g;

# force verbose output if --test was selected
$options{verbose} = 1 if ($options{test});

if ($options{pool}) {
    $oscar_pkg_pool = $options{pool};
}

usage() if ($options{help});

# Quick sanity check
if (! -d $oscar_pkg_pool) {
    croak("Directory $oscar_pkg_pool does not exist");
}

# Which architecture are we dealing with?
my ($iarch,$garch);
if ($options{arch}) {
    $iarch = $options{arch};
} else {
    $iarch = `uname -i`;
    chop $iarch;
}
if ($iarch eq "i386") {
    $garch = "i386,i486,i586,i686";
} else {
    $garch = $iarch;
}

#
# Packages to which command applies. If empty, use all packages!
#
my @argpkgs = @ARGV;

################################
## Do the job
################################

# List of RPM files found in the distro-specific directories
my @pkgfiles;

# Find first compatible subdirectory
my @src_dirs;
for my $dir (distro_compat()) {
    if (-d "$base_dir/$dir") {
	push @src_dirs, $dir;
	last;
    }
}
push @src_dirs, "common-rpms" if (-d "$base_dir/common-rpms");
push @src_dirs, "../RPMS" if (-d "$base_dir/../RPMS");
print "Distro specific packages come from\n\t$base_dir/"
       . join("\n\t$base_dir/",@src_dirs)."\n";

# List packages and their "best" files
my %pkglist = best_rpms(@src_dirs);

###
# Remove packages from OSCAR RPM pool
###
if ($options{erase}) {
    print "Removing old files from $oscar_pkg_pool:\n";
    if (@argpkgs) {
	my $pattern = join("|",@argpkgs);
	# trim package files list down to matching list
	my $march = join("|", split(/,/, $garch));
	@pkgfiles = grep /\/($pattern)-[0-9].*\.($march|noarch)\.rpm/, @pkgfiles;
    }
    for my $f (@pkgfiles) {
	my $sf = $oscar_pkg_pool . "/" . basename($f);
	if (-f $sf) {
	    print(" - $sf\n");
	    unlink("$sf") if (!defined($options{test}));
	}
    }
    exit 0;
}

#
# No packages on the argument line? Then take all packages.
#
if (!scalar(@argpkgs)) {
    # all packages apply
    @argpkgs = grep {s/:.*$//} keys(%pkglist);
}

###
# Copy best packages to the package pool.
# arch specific files have priority over noarch packages.
###
for my $pkg (@argpkgs) {
    my ($filename, $label, $msg);
    for my $march (split(/,/, $garch) , "noarch") {
	if (defined($pkglist{"$pkg:$march"})) {
	    $label = "$pkg:$march";
	    last;
	}
    }
    if (!$label) {
	print STDERR "Package $pkg not found for ($garch,noarch)\n";
	next;
    }
    $filename = $pkglist{$label}{file};
    $msg = dirname($filename)."/${pkg}.txt";
    if (-f $msg) {
	print STDOUT "\n::::::::::::::-------------------------\n";
	open IN, "$msg" or croak("Couldn't open $msg");
	my @lines = <IN>;
	close IN;
	print STDOUT map {": $_"} @lines;
	print STDOUT "::::::::::::::-------------------------\n";
    }
    if (-f "$oscar_pkg_pool/".basename($filename)) {
	# don't overwrite file if it already exists in the repository
	print STDERR "WARNING: File ".basename($filename).
	    " is already in $oscar_pkg_pool! Not overwriting!\n";
    } else {
	print " Copy $filename -> $oscar_pkg_pool\n";
	if (!defined $options{test}) {
	    copy($pkglist{$label}{file}, $oscar_pkg_pool) ||
		croak("Error occured while copying: $!");
	}
    }
}

exit 0;

############################################################################
######## only subroutines below
############################################################################

sub vprint {
    print @_ if ($options{verbose});
}

#
# List of best packages in directories passed as argument
#
sub best_rpms {
    my (@src_dirs) = @_;

    my %rpms;
    for my $dir (@src_dirs) {
	push @pkgfiles, glob("$base_dir/$dir/*.{$garch,noarch}.rpm");
    }
    #vprint("RPM files found: ".join(" ",@pkgfiles)."\n");

    for my $f (@pkgfiles) {
	my ($name, $version, $release, $arch) = split " ",
	`rpm -q --qf '%{NAME} %{VERSION} %{RELEASE} %{ARCH}' -p $f`;
	#vprint("$f : $name $version $release $arch\n");

	# create hash entry for this file
	my $tmp = { 'file' => $f,
		    'ver'  => $version,
		    'rel'  => $release };
	my $label = $name . ":" . $arch;
	if (defined($rpms{$label})) {
	    if (rpm_newer($tmp, $rpms{$label})) {
		# replace old entry by new one
		vprint("replacing " . $tmp->{file} . " as newest rpm\n");
		$rpms{$label} = $tmp;
	    }
	} else {
	    vprint("registered " . $tmp->{file} . "\n");
	    $rpms{$label} = $tmp;
	}
    }
    return %rpms;
}

#
# Compatibility chain of distro-specific RPM sources
#
sub distro_compat {
    my @compatlist;
    # get standard distro name and version
    my ($name, $ver) = distroname();

    # remove "." from version name
    my $ver1 = $ver;
    $ver1 =~ s/\.//;

    # remove part behind first dot in version name
    my $ver2 = $ver;
    $ver2 =~ s/\..*$//g;

    # the order is important!
    push @compatlist, $name . $ver  . "-" . $iarch;
    push @compatlist, $name . $ver               ;
    push @compatlist, $name . $ver1 . "-" . $iarch;
    push @compatlist, $name . $ver1              ;
    push @compatlist, $name . $ver2 . "-" . $iarch;
    push @compatlist, $name . $ver2              ;
    push @compatlist, $name         . "-" . $iarch;
    push @compatlist, $name;

    vprint("Compatlist: ".join(" ",@compatlist)."\n");
    return @compatlist;
}

sub rpm_newer ($$) {
    my ($a, $b) = @_;
    my $vera = $a->{ver} . "-" . $a->{rel};
    my $verb = $b->{ver} . "-" . $b->{rel};
    if (OSCAR::PackageBest::compareversion($vera, $verb) == 1) {
	return 1;
    } else {
	return 0;
    }
}

#
# Standardized distribution subdirectory name.
# Currently based on the OSCAR::Distro.pm framework, should be migrated to
# OSCAR::OCA::OS_Detect as soon as that framework is complete.
#
sub distroname {
    my ($name, $ver);

    # override distro detection
    if ($options{distro}) {
	($name, $ver) = split /-/, $options{distro};
    } else {
	($name, $ver) = OSCAR::Distro::which_distro_server();

	# translate distro names
	if ($name eq "redhat") {
	    if ($ver eq "3as") {
		$name = "rhel";
		$ver = "3";
	    } elsif ($ver eq "el4") {
		$name = "rhel";
		$ver = "4";
	    } else {
		$name = "rh";
	    }
	} elsif ($name eq "fedora") {
	    $name = "fc";
	} elsif ($name eq "mandrake") {
	    $name = "mdk";
	}
    }
    return ($name,$ver);
}


sub usage {
    print <<END_USAGE;
Usage: generic-setup [options] [pkg1 pkg2 ...]

  Scan the distribution specific directories distro/\$distro\$version-\$arch
  and the common directory (distro/common-rpms) for best packages for
  current or specified architecture (or noarch). Either copy the package
  files to the OSCAR package repository (/tftpboot/rpm) or delete them
  from there.

  If package names are passed as arguments, actions are limited to these
  packages.

  When copying in packages, if a file named \$pkg.txt exists, it will be
  displayed in the STDOUT of the command as comment.

 Options:
   --arch|-a      : override locally detected architecture
   --distro  D-V  : translated distro string (for testing only!)
   --erase|-e     : erase packages with same name from RPM pool (tftpboot/rpm)
   --help|-h      : display this help text
   --pool|-p path : override setting of RPM pool path (default /tftpboot/rpm)
   --test|-t      : just test without copying or erasing files
   --verbose|-v   : verbose printout
END_USAGE
   exit(1);
}

