#!/usr/bin/perl
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# $Id$
#
# (C)opyright Erich Focht <efocht@hpce.nec.com>
#             All rights reserved
##############################################################################
# This tool is provided AS IS with no support.
#
#
# Based on a distro-aware configuration file this tool builds RPMs for OSCAR
# packages and prerequisites and stores them into the generic-setup compliant
# location (either distro/common-rpms/ or distro/$distro$version-$arch/)
#
# The configuration file allows the specification of build requirements, they
# will be installed with yume and removed after the package build.
#
# You will need to install yume manually and configure the default distro package
# pool manually (yume --repo /tftpboot/distro/$distro-$version-$arch --prepare)
# in order to be able to install requirements and dependencies.
#
# You will need to copy the build_rpms tool into the scripts/ directory
# before using this tool. It is used for building RPMs out of the SRPMs.
#
# CONFIGURATION:
# -------------
# This tool requires a configuration file called build.cfg to be located
# in the SRPMS directory of the package. It's format is somewhat similar to
# the prereq.cfg file:
#
# 
# [distro:version:architecture]
# 
# # install pkg1 belonging to opkg before building
# requires: opkg:pkg1
# common: srpm_name [additional_rpmbuild_options]
# srpm_name 
# ...
#
# [distro2:version:architecture]
# ...
#
# The distro name, version or arch info can contain a "*". This matches
# like a .* regexp. The distro names are the "compat" names!!!
# Examples:
# [rh*:3:*]     matches all rhel3 architectures.
# [fc:*:*]      matches all fedora core distros on all architectures
# [md*:*:*]     matches both mdk and mdv
# [*:*:*]       matches everything.
#
#
# A configuration block can contain multiple "requires:" lines. This gives
# us a chance to use build requires from inside the same opkg. The config
# file will be executed in pieces split by the "requires:" lines.
# For example: the ganglia package requires rrdtool-devel for building,
# a package included into the ganglia opkg. Therefore the ganglia rpms will
# be built with the following configuration file:
#
# [*:*:*]
# requires: php-devel
# rrdtool-1.0.49-2.rf.src.rpm
# requires: ganglia:rrdtool*
# ganglia-3
# common: ganglia-web-3
#
# This translates to following steps:
# - install php-devel requirement
# - build packages resulting from the rrdtool srpm and install them into
#   distro/$distro$ver-$arch/
# - install all rpms starting with rrdtool belonging to the ganglia opkg
# - build rpms out of the srpm matching the string ganglia-3* and install
#   them into the directory distro/$distro$ver-$arch/
# - build the common rpms resulting from the srpm matching "ganglia-web-3*"
#   and install them into the distro/common-rpms/ directory.
#
# - after the block was executed, attempt to remove the requires which were
#   installed 
#
##########################################################################

use strict;
use Cwd;
use File::Basename;
use Data::Dumper;
use Getopt::Long;
use Carp;

my ($OHOME, $os, $verbose, $test, @installed_reqs);

my $pwd = cwd();

if (-d "$pwd/../scripts" && -d "$pwd/../packages" && -d "$pwd/../share") {
    $OHOME=dirname($pwd);
    $ENV{OSCAR_HOME} = $OHOME;
    print "OHOME = $OHOME\n";
} else {
    print "You must execute this program from within the scripts/ directory\n",
    "of an OSCAR tree!\n";
    exit 1;
}

GetOptions(
           "verbose"   => \$verbose,
	   "test"      => \$test,
           );

# all other arguments are interpreted as OSCAR package or prereq names
my @pkgs = @ARGV;

# where do we look for opkgs and prereqs?
my @pkg_srcs = ( "share/prereqs", "packages" );

eval "use lib \"$ENV{OSCAR_HOME}/lib\"";
eval "use OSCAR::OCA::OS_Detect";

# detect own distro with OS_Detect
eval "\$os = OSCAR::OCA::OS_Detect::open()";
if (!exists($os->{pkg})) {
    die "Could not detect OS for this machine's distro!";
}
if ($os->{pkg} ne "rpm") {
    print "This program is only for building RPMs!\n";
    print "This distro's package format is ".$os->{pkg}."\n";
    exit 1;
}

eval "use OSCAR::PackagePath";
my $pool;
eval "\$pool = &OSCAR::PackagePath::distro_repo_url()";


my $bindir = "distro/".$os->{compat_distro}.$os->{compat_distrover}.
    "-".$os->{arch};
my $arch = $os->{arch};
my $march = $arch;
$march =~ s/^i.86$/i?86/;

my $err;
for my $pkg (@pkgs) {
    print "============ $pkg ===========\n";

    my $pdir;
    # locate package directory
    $pdir = locate_opkg_dir($pkg);
    die "Could not locate package directory for $pkg!" if (!$pdir);

    my @config;
    # read in package build config file
    my $cfile = "$pdir/SRPMS/build.cfg";
    if (-e $cfile) {
	@config = &get_config($cfile,
			       $os->{compat_distro},
			       $os->{compat_distrover},
			       $os->{arch}
			       );
    } else {
	die "Build configuration file $cfile not found!";
    }

    # main build routine
    $err = &build_rpms($pdir,\@config);

    # remove installed requires
    &remove_installed_reqs;

    print "--------------------------------------------------------\n";
}

exit 0;

########################################################################

sub locate_opkg_dir {
    my ($pkg) = @_;
    for my $dir (@pkg_srcs) {
	if (-d "$OHOME/$dir/$pkg") {
	    return "$OHOME/$dir/$pkg";
	}
    }
    return "";
}

sub build_rpms {
    my ($pdir,$confp) = @_;

    my @conf_blocks = &split_config(@$confp);

    for my $cblock (@conf_blocks) {
	my %conf = %{$cblock};

	# install requires
	&install_requires($conf{requires});

	# check and build common-rpms if needed
	$err = &build_if_needed(\%conf,$pdir,"common","distro/common-rpms");

	# check and build dist specific rpms if needed
	$err = &build_if_needed(\%conf,$pdir,"dist",$bindir);
    }
}

#
# Install requires by invoking yume!
# Requires are remembered in the global array @installed_reqs, which is used
# for deleting them after the successful build.
#
sub install_requires {
    my ($requires) = @_;
    return if (!$requires);

    my @reqs = split(" ",$requires);
    print "Requires: ".join(" ",@reqs)."\n";

    my @install_stack;
    for my $r (@reqs) {
	if ($r =~ /^(.*):(.*)$/) {
	    my $opkg = $1;
	    my $pkg = $2;
	    my $pdir = &locate_opkg_dir($opkg);
	    die "Could not locate opkg directory for $opkg!" if (!$pdir);
	    my @rpms = glob("$pdir/distro/common-rpms/$pkg*.{$march,noarch}.rpm ".
			    "$pdir/$bindir/$pkg*.{$march,noarch}.rpm");
	    if (@rpms) {
		push @install_stack, @rpms;
	    }
	} else {
	    push @install_stack, $r;
	}
    }
    if (!$test) {
	# remember RPMs which were installed before
	my %before = map { $_ => 1 } split("\n",`rpm -qa`);
	my $cmd = "yume --repo $pool -y install ".join(" ",@install_stack);
	print "Executing: $cmd\n" if $verbose;
	if (system($cmd)) {
	    print "Warning: failed to install requires: ".join(" ",@reqs)."\n";
	}
	local *CMD;
	open CMD, "rpm -qa |" or do {
	    print "Could not run rpm command\n";
	    return;
	};
	while (<CMD>) {
	    chomp;
	    next if exists $before{$_};
	    push @installed_reqs, $_;
	}
	close CMD;
	undef %before;
    }
}

sub remove_installed_reqs {
    if (@installed_reqs) {
	my @pre_pkgs;
	for (@installed_reqs) {
	    if (!/\.rpm$/) {
		push @pre_pkgs,$_;
	    } else {
		my $name = `rpm -q --qf '%{NAME}-%{VERSION}-%{RELEASE}' -p $_`;
		push @pre_pkgs, $name;
	    }
	}
	print "Removing requires: ".join(" ",@pre_pkgs)."\n";
	if (!$test) {
	    !system("yume --repo $pool -y remove ".join(" ",@pre_pkgs));
	}
	@installed_reqs = ();
    }	    
}

#
# Core rpm building routine
# - detects name and version-release from source rpms
# - checks whether rpms containing name/version already exist in the target dir
# - builds by calling build_rpms, adds build options from config file
# - all rpms resulting from build end up in the target directory
#
sub build_if_needed {
    my ($confp,$pdir,$sel,$target) = @_;

    my %conf = %{$confp};
    if (exists($conf{$sel})) {
	&srpm_name_ver($pdir,$conf{$sel});

	print "== $sel ==\n".Dumper(%conf)."=====\n" if $verbose;

	# gather list of srpms which need to be built
	my (@sbuild,@buildopts);
	for my $g (keys(%{$conf{$sel}})) {
	    print "key: $g\n";
	    my $name = $conf{$sel}{"$g"}{name};
	    my $ver = $conf{$sel}{"$g"}{ver};
	    my $str = "$pdir/$target/$name-*$ver.{$march,noarch}.rpm";
	    print "str: $str\n" if $verbose;
	    my @gres = glob($str);
	    if (!scalar(@gres)) {
		push @sbuild, $conf{$sel}{"$g"}{srpm};
		push @buildopts, $conf{$sel}{"$g"}{opt};
	    } else {
		print "Found RPMs for $g:\n\t".join("\n\t",@gres).
		    "\nSkipping build.\n";
	    }
	}
	if (@sbuild) {
	    if (! -d "$pdir/$target") {
		print "Creating directory: $pdir/$target\n";
		!system("mkdir -p $pdir/$target")
		    or croak("Could not create $target in $pdir: $!");
	    }
	    chdir("$pdir/$target");

	    for my $s (@sbuild) {
		my $opt = shift @buildopts;
		$ENV{RPMBUILDOPTS} = $opt;
		if ($opt) {
		    print "setting \$RPMBUILDOPTS=$opt\n";
		}
		my $cmd = "$OHOME/scripts/build_rpms --only-rpm $s";
		print "Executing: $cmd\n";
		if (!$test) {
		    my $ret = system($cmd);
		    if ($ret) {
			die "Command execution failed: $!";
		    }
		}
	    }
	}
    }
    return $err;
}

#
# Extend configuration hash by info on srpms: add srpm path, name and version
#
sub srpm_name_ver {
    my ($pdir,$conf) = @_;

    my %c = %{$conf};

    # @names are actually glob patterns
    for my $g (keys(%c)) {
	my @SRPM = glob("$pdir/SRPMS/$g*");
	if (scalar(@SRPM) == 0) {
	    die "Pattern $g matched no srpm! Edit your build.cfg file!";
	} elsif(scalar(@SRPM) > 1) {
	    croak("Pattern $g matched more than one srpm! Edit your build.cfg file!");
	}
	my $srpm = $SRPM[0];
	my ($name,$ver) = split(" ",`rpm -q --qf '%{NAME} %{VERSION}-%{RELEASE}' -p $srpm`);

	$c{"$g"}{srpm} = $srpm;
	$c{"$g"}{name} = $name;
	$c{"$g"}{ver}  = $ver;
    }
}

#########################
# Split up config lines into config blocks headed by requires lines.
# This allows multiple requires to be included in one opkg and
# the usage of requirements coming from the own opkg.
#
# The resulting array contains references to hashes with following structure:
# {
#   'requires' => requires_string, # requirements for current block
#   'common' => {                  # build results go to distro/common-rpms/
#                 'pkg_match1' => {       # match string (glob) for srpm name
#                                   'opt' => 'rpmbuild_additional_options'
#                                 },
#                 'pkg_match2' => {...},
#               },
#   'dist' => {                  # build results go to distro/$dist$ver-$arch/
#               'pkg_match3' => {       # match string (glob) for srpm name
#                                 'opt' => 'rpmbuild_additional_options'
#                               },
#               'pkg_match4' => {...},
#               ...
#             },
# },
#########################
sub split_config {
    my (@config_array) = @_;

    my @conf_blocks;
    my $conf = {};
    for (my $i = 0; $i <= $#config_array; $i++) {
	my $line = $config_array[$i];

	my ($cmd,@data) = split(/\s+/,$line);
	if ($cmd =~ /^requires:/) {
	    if (exists($conf->{requires}) ||
		(!exists($conf->{requires}) && $i > 0)) {
		push @conf_blocks, $conf;
		$conf = {};
	    }
	    $conf->{requires} = join(" ",@data);
	} elsif($cmd =~ /^common:/) {
	    my $pkg = shift @data;
	    $conf->{common}{"$pkg"}{opt} = join(" ",@data);
	} elsif($cmd !~ /:$/) {
	    $conf->{dist}{"$cmd"}{opt} = join(" ",@data);
	}
    }
    push @conf_blocks, $conf;
    
    print "conf_blocks:\n".Dumper(@conf_blocks)."\n============\n" if $verbose;
    return @conf_blocks;
}


############################################################################
# Read in package_build config file.
# This is called build.cfg and should be located in the SRPMS directory.
# - matches the first header of the form [$distro:$version:$arch] that
#   fits the current machine
# - returns the lines of the matched block in an array
############################################################################
sub get_config {
    my ($path, $distro, $distver, $arch) = @_;
    local *IN;
    my ($line, $match, @config);
    
    open IN, "$path" or die "Could not open $path: $!";
    while ($line = <IN>) {
	chomp $line;
	if ($line =~ /^\s*\[([^:]+):([^:]+):([^:]+)\]/) {
	    my ($d,$v,$a) = ($1,$2,$3);
	    $d =~ s/\*/\.*/g;
	    $v =~ s/\*/\.*/g;
	    $a =~ s/\*/\.*/g;
	    my $str = "$distro:$distver:$arch";
	    my $mstr = "$d:$v:$a";
	    $match = 0;
	    if ($str =~ m/^$mstr$/) {
		$match = 1;
		print "found matching block [$d:$v:$a]\n" if $verbose;
		last;
	    }
	}
    }
    if ($match) {
	while ($line = <IN>) {
	    chomp $line;
	    last if ($line =~ /^\[([^:]+):([^:]+):([^:]+)\]/);
	    next if ($line =~ /^\s*\#/);
	    $line =~ s/^ *//g;
	    next if ($line =~ /^$/);

	    push @config, $line;
	}
    }
    close IN;
    if (@config) {
	return @config;
    } else {
	return undef;
    }
}
