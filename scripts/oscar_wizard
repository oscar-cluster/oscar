#!/usr/bin/perl -w
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
# Copyright (c) 2003, The Board of Trustees of the University of Illinois.
#                     All rights reserved.
#
# Copyright (c) 2002-2005,2007 The Trustees of Indiana University.  
#                    All rights reserved.
#
# Copyright (c) 2005-2006 Bernard Li <bli@bcgsc.ca>
#                         All rights reserved.
#
# Copyright (c) 2006 Erich Focht <efocht@hpce.nec.com>
#                    All rights reserved.
# 
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# $Id$
#

use strict;
use Tk;
use Tk::ROText;
use lib "$ENV{OSCAR_HOME}/lib","/usr/lib/systemconfig","/usr/lib/systeminstaller","/usr/lib/systemimager/perl";
use POSIX;
use OSCAR::Help;
use OSCAR::Network;
use OSCAR::GUI_MAC;
use OSCAR::Database;
use OSCAR::Distro;
use OSCAR::DelNode;
use OSCAR::AddNode;
use OSCAR::Logger;
use OSCAR::Configurator;
use OSCAR::Package;
use OSCAR::PackagePath;
use OSCAR::PackageInUn;
use OSCAR::WizardEnv;
use OSCAR::Tk;
use OSCAR::ImageMgt qw (
                        do_setimage 
                        do_post_binary_package_install 
                        do_oda_post_install
                        get_image_default_settings
                       );
use OSCAR::Opkg qw ( create_list_selected_opkgs );
use OSCAR::Network qw ( get_network_config );
use OSCAR::ClientMgt;
use AppConfig;
use SystemInstaller::Tk::Image;
use SystemInstaller::Tk::AddClients;
use SystemInstaller::Env;
use SystemInstaller::Tk::Common;
use Carp;
use FileHandle;
use vars qw($config);

# First of all, enforce that the user running this script is 'root'
croak "You must be 'root' to run this script.  Aborting" if ($< != 0);

if(!$ENV{OSCAR_HOME}) {
    croak "The environmental variable OSCAR_HOME is not set.  Please set it to the directory that OSCAR is untarred in, or run oscar_wizard again.";
}

# Some globals

my $save_text;
my %options = ();
my @errors = ();
my @client_nodes = ();
my $debug = $ENV{DEBUG_OSCAR_WIZARD};
my $mode = "manage"; # default mode is manage

my %buttons = ();

our $monitortk_pid;

my $lockfile = "$ENV{OSCAR_HOME}/.oscar_wizard_lockfile";

my $oscarsamples_dir = "$ENV{OSCAR_HOME}/oscarsamples";


# END processing to remove the lockfile when we die(), exit, or otherwise
# cease to exist.
END {
    unlink $lockfile if $lockfile && -f $lockfile;
}

# Check for the lockfile (this is certainly not foolproof -- it's just
# "good enough")

if (-f $lockfile) {
    open(LOCKFILE, $lockfile);
    my $pid = <LOCKFILE>;
    close(LOCKFILE);
    chomp $pid;
    print "There is an OSCAR Wizard lockfile that says a process\n";
    print "is still running with process id $pid. Checking if that is true ...\n";
    if( kill 0, $pid ) {
        print "There is a process running with that process id.\n";
        print "If this is not an OSCAR Wizard process, remove\n";
        print "the following file and run $0 again:\n";
        print "$lockfile\n";
        undef $lockfile; # Prevent END processing from deleting lockfile.
        exit(1);
    } else {
        print "There is no process running with process id $pid.\n";
        print "Removing lockfile $lockfile and continuing.\n";
        unlink $lockfile;
    }
}

# Write our PID to the lockfile

open(LOCKFILE, ">$lockfile");
print LOCKFILE $$;
close(LOCKFILE);

if ( $ARGV[0] ) {
   if ( $ARGV[0] eq "manage" ) {
      $mode = "manage";
   } elsif ( $ARGV[0] eq "install" ) {
      $mode = "install";
   } else {
      print "Usage: oscar_wizard [install|manage]\n\n";
      print "       install brings up the wizard in installation mode\n";
      print "       manage brings up the wizard in management mode (default)\n";
      exit 1;
   }
}

my $interface = get_headnode_iface();

# Set some things in the environment

$ENV{PATH}= $config->binpath .":" . $ENV{PATH};
# Create the main window...
my $window = MainWindow->new();
$window->withdraw();
chomp(my $shostname = `hostname -s`);
$window->title("OSCAR Wizard - $shostname");

# Get OSCAR's version

my $oscar_version;
my $oscar_version_script = $ENV{OSCAR_HOME} ."/" . "dist/get-oscar-version.sh";
my $oscar_version_file = $ENV{OSCAR_HOME} . "/" . "VERSION";

# Use the scripty-foo to get oscar version information.

if ( -e "$oscar_version_file" ) {
    my $cmd = "$oscar_version_script $oscar_version_file --full";

    open(CMD, "$cmd|") or die "ERROR: failed to get oscar version '$cmd' - $!";
    $oscar_version = <CMD>;
    chomp($oscar_version);

    close(CMD);
}
else {
    die("ERROR: OSCAR VERSION file missing '$oscar_version_file' - aborting!");
}

# Define the main buttons

#
# The title Group
#
my $image = "$ENV{OSCAR_HOME}/images/oscar.gif"; 

my $GIF_t=$window->Label(-image=> $window->Photo(-file=>$image),
                         -background=>"white");
my $GIF_t2=$window->Label(-image=> $window->Photo(-file=>$image),
                          -background=>"white");
my $wizard_text = "Welcome to the OSCAR Wizard!\n\nOSCAR Version: $oscar_version";
$wizard_text .= "\n\n";
if ( $mode eq "install" ) {
   $wizard_text .= "- INSTALL MODE -";
} else {
   $wizard_text .= "- MANAGE MODE -";
}
$wizard_text .= "\n\n[DEBUG ON]" if ($debug);
my $Title_l=$window->Label(-text=>"$wizard_text",
			   -background=>"white");
$GIF_t->grid($Title_l,"-",-sticky=>"nsew");

my $browser;
my $url = "http://oscar.openclustergroup.org";

# Default Web Browser is Firefox, if not found, try Mozilla
if ( !($browser = `which firefox 2> /dev/null`) ) {
  $browser = `which mozilla 2> /dev/null`;
}

# Bring up OSCAR Website when OSCAR Logo is clicked
if ($browser ne "") {
  chomp($browser);
  $GIF_t->bind( "<Button-1>" => sub { system("$browser $url > /dev/null 2>&1 &") } );
}

my $step_number;
my $step_string = "";

# Download packages using OPD
if ( $mode eq "install" ) {
   $step_number = 0;
   $step_string = "Step $step_number:"
} else {
   $step_number = undef;
   $step_string = "";
}

my $step_status = get_wizard_status(\%options,\@errors);
my $manage_status = get_manage_status(\%options,\@errors);

oscar_button($window, $step_string,
             "Download Additional OSCAR Packages...",
             [sub { my $olddir = Cwd::cwd();
		    chdir($ENV{OSCAR_HOME} . '/lib/Qt');
		    system('/usr/bin/perl Opder.pl');
		    chdir($ENV{OSCAR_HOME} . '/scripts');
		    system("./prep_oscar_repos --add --include /var/lib/oscar/packages");
		    chdir($olddir);
		}],
	     'download_packages');

if ( $mode eq "install" ) {
   # Select packages for installation
   $step_number++;
   oscar_button($window, "Step $step_number:", 
	        "Select OSCAR Packages To Install...", 
	        [sub { my $olddir = Cwd::cwd();
                 chdir($ENV{OSCAR_HOME} . '/lib/Qt');
                 system('/usr/bin/perl Selector.pl');
                 chdir($olddir);
               }], 
	        'select_packages');

   # Configure selected packages
   $step_number++;
   oscar_button($window, "Step $step_number:", 
	        "Configure Selected OSCAR Packages...", 
	        [\&displayPackageConfigurator, $window, $step_number],
	        'configure_packages');

   # Install OSCAR server packages
   $step_number++;
   oscar_button($window, "Step $step_number:", "Install OSCAR Server Packages",
	        [\&run_server_install, $window, $step_number,
	         {interface => $interface} ], 'install_server');
}

# Build OSCAR Client Image
if ( $mode eq "install" ) {
   $step_number++;
   $step_string = "Step $step_number:";
} else {
   $step_number = undef;
   $step_string = "";
}

oscar_button($window, $step_string, "Build OSCAR Client Image...", 
      [\&build_oscar_image, $window, $step_number], 'build_image');

if ( $mode eq "manage" ) {
   oscar_button($window, "", "Add OSCAR Clients...",
                [\&addnode_window, $window, $interface], 'add_nodes');
   oscar_button($window, "", "Delete OSCAR Clients...",
                [\&delnode_window, $window], 'delete_nodes');
   oscar_button($window, "",
                "Install/Uninstall OSCAR Packages...",
          [\&install_uninstall_packages, $window], 'install_uninstall_packages');
}

if ( $mode eq "install" ) {
   # Add Clients to OSCAR Image
   $step_number++;
   oscar_button($window, "Step $step_number:", "Define OSCAR Clients...", 
	        [\&build_oscar_clients, $window, $step_number, $interface], 
	        'addclients');

   # Setup Network Booting
   $step_number++;
   oscar_button($window, "Step $step_number:", "Setup Networking...", 
	        [\&setup_network, $window, $step_number,
	         $interface], 'netboot');

   # Delete Clients returns due to popular demand!
   oscar_button($window, "", "Delete OSCAR Clients...",
                [\&delnode_window, $window], 'delete_nodes');

   # Monitor Cluster Deployment
   our $monitor_button = oscar_button($window, "", "Monitor Cluster Deployment",
                [\&monitor_deployment, $window], 'monitor_deployment');

   my $boot=$window->Label (-text => 
   			    "Before continuing, network boot all of your nodes.
   Once they have completed installation, reboot them from 
   the hard drive. Once all the machines and their ethernet
   adaptors are up, move on to the next step.",-relief=>"groove");
   $boot->grid("-","-",-sticky=>"nsew");

   # OSCAR post install script
   $step_number++;
   oscar_button($window, "Step $step_number:", "Complete Cluster Setup", 
	        [\&run_post_install, $window, $step_number], 'post_install');
}

# Test script
if ( $mode eq "install" ) {
   $step_number++;
   $step_string = "Step $step_number:"
} else {
   $step_number = undef;
   $step_string = "";
}

oscar_button($window, $step_string, "Test Cluster Setup", 
	     [\&run_tests, $window, $step_number], 'test_install');

if ( $mode eq "manage" ) {
   oscar_button($window, "", "Network Boot Manager", [\&netbootmgr, $window], 'netbootmgr') if is_installed_on_node("netbootmgr");
   oscar_button($window, "", "Ganglia Monitoring System", [\&ganglia, $window], 'ganglia') if is_installed_on_node("ganglia");
}

#
# The close button
#
my $cl_b=$window->Button(-text=>"Quit",
       -borderwidth=>"6", -relief=>"groove",
       -command=> sub {kill "HUP" => $monitortk_pid if $monitortk_pid; $window->destroy},-pady=>"2");
$window->bind("<Escape>",sub {$cl_b->invoke()});
$cl_b->grid("-","-",-sticky=>"nsew",-ipady=>"4");

if( $debug ) {
    my $cl_b=$window->Button(-text=>"Restart $0",
           -borderwidth=>"6", -relief=>"groove",
           -command=> sub {exec "$0"},-pady=>"2");
    $cl_b->grid("-","-",-sticky=>"nsew",-ipady=>"4");
}

if( $debug ) {
    my $cl_b=$window->Button(-text=>"Dump Wizard Environment",
           -borderwidth=>"6", -relief=>"groove",
           -command=> sub { use Data::Dumper; $Data::Dumper::Terse = 1; print "\nWizard Env: " . Dumper(\%ENV) . "\n\n"; }
           ,-pady=>"2");
    $cl_b->grid("-","-",-sticky=>"nsew",-ipady=>"4");
}

OSCAR::Tk::center_window( $window );
#
# Execution goes into an infinite Tcl/Tk loop here
#

MainLoop;

###########################################################################


sub oscar_button {
    my ($window, $labeltxt, $buttontext, $buttoncmd, $helptext) = @_;
    
    if ( $helptext eq "delete_nodes" ){
        $helptext = ($mode eq "install"?"delete_nodes5":"delete_nodes8");
    }
    my $status = $$step_status{$helptext};
    $status = $$manage_status{$helptext} if ! $status;
    $status = "normal" if ! $status;
    
    my $label = $window->Label(-text => $labeltxt);
    my $button = $window->Button(-text => $buttontext, 
                                 -command => $buttoncmd, 
                                 -pady => 2);
    $button->configure(-state => $status);
    my $help = $window->Button(-text=>"Help",
                               -command=> [\&open_help, $window, $helptext], 
                               -pady => 2);
    $label->grid($button, $help, -sticky => "nsew");

    #put each step button into the %buttons hash
    $buttons{$helptext} = $button;
    
    return $button;
}

###########################################################################

sub run_command {
    my ($parent_window, $step_number, $vars) = @_;
    my $result;
    my $window_func;

    if ($mode eq "install") {
       oscar_log_subsection("Step $step_number: Running: $$vars{cmd}");
    } else {
       oscar_log_subsection("OSCAR Manage Wizard: Running: $$vars{cmd}");
    } 

    if (system($$vars{cmd})) {
        $result = $$vars{failure};
        $window_func = \&OSCAR::Tk::error_window;
    } else {
        $result = $$vars{success};
        $window_func = \&OSCAR::Tk::done_window;
    }

    if ($mode eq "install") {
       oscar_log_subsection("Step $step_number: " . $result->{message});
    } else {
       oscar_log_subsection($result->{message});
    }
    if ($result->{unbusy}) {
        &$window_func($parent_window, $result->{message},
		     sub { $parent_window->Unbusy(); });
    } else {
        &$window_func($parent_window, $result->{message});
    }
    $parent_window->Unbusy();
    return $result->{return_status};
}

###########################################################################

sub run_server_install {
    my ($window, $step_number, $vars) = @_;
    my @mod_env = ();

    # Make the top-level OSCAR wizard window busy so that the user
    # can't click in another step while this one is running.

    $window->Busy(-recurse => 1);

    oscar_log_section("Running step $step_number of the OSCAR wizard: Install OSCAR server packages");

    my $cmd_vars = { 
        cmd => "./install_server $$vars{interface}",
        success => {
            message => "Successfully installed OSCAR server",
            unbusy => 1,
            return_status => 0,
        },
        failure => {
            message => "Failed to properly install OSCAR server; please check the logs",
            unbusy => 1,
            return_status => 1,
        },
    };
    my $check = run_command($window, $step_number, $cmd_vars);

    if ($check == 0 && $$step_status{build_image} eq "disabled") {
        my $next_step_button = $buttons{build_image};
        $next_step_button->configure(-state => "normal");
        set_wizard_status("build_image",\%options,\@errors);
    }
    $step_status = get_wizard_status(\%options,\@errors);
    if($$step_status{addclients} eq "normal"){
        my $next_step_button2 = $buttons{addclients};
        $next_step_button2->configure(-state=> "normal");
    }

    oscar_log_subsection('Update Wizard Env (as needed)');
    @mod_env = WizardEnv::update_env();
}

###########################################################################

sub build_oscar_image {
    my ($window, $step_number) = @_;

    if ($mode eq "install") {
       oscar_log_section("Running step $step_number of the OSCAR wizard: Build OSCAR client image");
    } else {
       oscar_log_section("OSCAR Manage Wizard: Build OSCAR client image");
    } 

    my $step_string = "";
    $step_string = "Step $step_number: " if $mode eq "install";

    # We get the default settings for images.
    my %vars = get_image_default_settings ();

    # Update settings: ee set the last few points specific to the current
    # situation.
    $vars{title} = "Build OSCAR Client Image";
    $vars{noshow} = {
                     arch => 1,
                     imgpath => 1,
                     password => 1,
                    };
    $vars{postinstall} = \&postimagebuild;
    $vars{step_number} = $step_number;

    createimage_window($window, %vars);
}

sub postimagebuild {
    my ($vars) = @_;
    my $step_number = $$vars{step_number};
    my $img = $$vars{imgname};

    print ("Setting up image in the database\n");
    do_setimage ($img, \%options);

    my $cmd = "post_binary_package_install ($img, $interface)";
    my $step_string = "";
    $step_string ="Step $step_number: " if $mode eq "install";
    oscar_log_subsection("$step_string"."Running: $cmd");
    do_post_binary_package_install ($img, $interface);

    do_oda_post_install (%$vars, \%options);

    # All done -- remove the temp file that held all the binary packages
    # filenames

    #unlink($save_text); # breaks createimage_window

    # Set the next button "Define OSCAR Clients..." available
    if ( $$step_status{addclients} eq "disabled" ) {
        my $next_step_button = $buttons{addclients};
        $next_step_button->configure(-state => "normal");
        set_wizard_status("addclients",\%options,\@errors);
    }


    oscar_log_subsection("$step_string"."Completed successfully");

    1;
}

###########################################################################

sub build_oscar_clients {
    my ($window, $step_number, $interface) = @_;

    my @network_config = get_network_config ($interface, \%options, \@errors);
    my $netmask = $network_config[0];
    my $dnsdomainname = $network_config[1];
    my $gw = $network_config[2];
    my $startip = $network_config[3];

    if ($mode eq "install") {
       oscar_log_section("Running step $step_number of the OSCAR wizard: ".
                         "Define OSCAR clients");
    } else {
       oscar_log_section("OSCAR Management Wizard: Define OSCAR clients");
    }

    get_client_nodes(\@client_nodes,\%options,\@errors)
        if $#client_nodes == -1; # If @client_nodes is empty
    my $client_basename = "oscarnode";
    if ($#client_nodes != -1){
        my $first_node = "";
        foreach my $node_ref (@client_nodes){
            $first_node = $$node_ref{name};
            last;
        }
        print "BEFORE : $first_node\n";
        $first_node =~ s/^([^\d]+)(\d+)$/$1/g ;
        print "AFTER : $first_node\n";
        $client_basename = $first_node;
    }

    my %vars = (
                title => "Define OSCAR Clients",
                imgname => "oscarimage",
                basename => $client_basename,
                domainname => $dnsdomainname,
                numhosts => "0",
                startinghostnum => "1",
                netmask => $netmask,
                gateway => $gw,
                startip => $startip,
                postinstall => \&postaddclients,
                noshow => {
                           endip => 1,
                           endinghostnum => 1,
                          },
		step_number => $step_number
               );
    addclients_window($window, %vars);
}

sub postaddclients {
    my ($vars) = @_;
    my $step_number = $$vars{step_number};

    my $cmd = "./post_clients";
    my $step_string = "";
    $step_string = "Step $step_number: " if $mode eq "install";

    oscar_log_subsection("$step_string"."Running: $cmd");
    !system($cmd) or (carp($!), return undef);
    &populate_client_group_nodes;
    
    # Set the following next buttons available
    if( $$step_status{netboot} eq "disabled" ){
        my @tmp_next_steps = ("netboot", 
                              "delete_nodes5",
                              "monitor_deployment",
                              "netbootmgr",
                              "ganglia");
        foreach my $next_step (@tmp_next_steps){                          
            my $next_step_button = $buttons{$next_step};
            if ($next_step ne "netbootmgr" && $next_step ne "ganglia" ){
                $next_step_button->configure(-state => "normal");
            }
            if ($next_step eq "netboot" || $next_step eq "post_install" ){
                set_wizard_status($next_step,\%options,\@errors);
            } else {
                set_manage_status($next_step,\%options,\@errors);
            } 
        }
    }

    oscar_log_subsection("$step_string"."Successfully ran: $cmd");
    oscar_log_subsection("$step_string"."Completed successfully");
    return 1;
}

#
# NEST
#
# This script inserts the records into node_config_revs and config_opkgs
# tables for client nodes.
# Unless node_config_revs already has the record of node_id and configurations_id,
# do the following two steps. Otherwise, skip them.
# 1. Insert node_config data for client nodes.
#    add_node_config_revs is a shortcut to insert a record of node_id, configurations_id, and version
#    e.g) add_node_config_revs [$node_id] [$configurations_id] [$version]
#         Where $version is optional (The default value of $version is 0).
# 2. Insert core packages into config_opkgs table for client nodes.
#    add_config_opkgs is a shortcut to insert a record of configurations_id and
#    package_id
#    e.g) add_config_opkgs [$configurations_id] [$package_id]
#

sub do_it_or_die {
    my ( $command, $results_ref, $error ) = @_;
    return if dec_already_locked( $command, $results_ref, 1 );
    database_disconnect();
    die "$0: $error";
}

sub populate_client_group_nodes {
    my @pkgs = list_selected_packages("all");
    my @tables = ("Nodes", "Group_Nodes", "Groups", "Packages",
                  "Node_Package_Status", "Image_Package_Status");
#    locking("WRITE", \%options, \@tables, \@errors);
    get_client_nodes(\@client_nodes,\%options,\@errors)
        if $#client_nodes == -1;  # If @client_nodes is empty
    my @nodes = ();
    foreach my $client_ref (@client_nodes){
        my $node_id = $$client_ref{id};
        my $node_name = $$client_ref{name};
        push @nodes, $node_name;
    }
    my $client_group = "oscar_clients";
    set_group_nodes($client_group,\@nodes,\%options,\@errors);

    # We assume that all the selected packages should be installed
    my $status = 2;
    foreach my $node_name (@nodes){
        update_node_package_status(\%options,
                                   $node_name,
                                   \@pkgs,
                                   $status,
                                   \@errors);
    }

#    unlock(\%options, \@errors);
}

###########################################################################

sub setup_network {
    my ($window, $step_number, $interface) = @_;
    mac_window($window, $step_number, {interface=> $interface});
    if ( $$step_status{post_install} eq "disabled" ) {
        my $next_step_button = $buttons{post_install};
        $next_step_button->configure(-state => "normal");
        set_wizard_status("post_install",\%options,\@errors);
    }
}

sub run_post_install {
    my ($window, $step_number) = @_;
    my @mod_env = ();

    $window->Busy(-recurse => 1);

    if ($mode eq "install") {
       oscar_log_section("Running step $step_number of the OSCAR wizard: Complete cluster setup");
    } else {
       oscar_log_section("OSCAR Management Wizard: Complete cluster setup");
    }

    oscar_log_subsection('Update Wizard Env (as needed)');
    @mod_env = WizardEnv::update_env();

    my $cmd_vars = { 
	cmd => "./post_install",
	success => {
	    message => "Successfully completed the cluster install",
	    unbusy => 1,
	    return_status => 1,
	},
	failure => {
	    message => "Failed to properly complete the cluster install; please check the logs",
	    unbusy => 1,
	    return_status => 0,
	},
    };
    my $status = run_command($window, $step_number, $cmd_vars);

    OSCAR::ClientMgt::update_client_node_package_status (\%options, \@errors);
    # Set the next button "Test Cluster Setup" available
    if( $status && $$step_status{test_install} eq "disabled" ){
        my $next_step_button = $buttons{test_install};
        $next_step_button->configure(-state => "normal");
        set_wizard_status("test_install",\%options,\@errors);
    }

    oscar_log_subsection('Update Wizard Env (as needed)');
    @mod_env = WizardEnv::update_env();
}


###########################################################################

sub run_tests {
    my ($window, $step_number) = @_;
    $window->Busy(-recurse => 1);

    my $title = "OSCAR Test Cluster Setup";

    if ($mode eq "install") {
       oscar_log_section("Running step $step_number of the OSCAR wizard: Test cluster setup");
    } else {
       oscar_log_section("OSCAR Management Wizard: Test cluster setup");
    }

    my $cmd = "cd $ENV{OSCAR_HOME}/testing && xterm -T '$title' -n '$title' -geometry 80x47 -sl 500 -e ./test_cluster --wait";
    my $string = "";

    if ($mode eq "install") {
        $string = "Step $step_number: Running tests";
    } else {
        $string = "Running tests";
    }

    if ($debug) {
        $string .= ": $cmd";
    }

    oscar_log_subsection("$string");
    !system("$cmd &") or (carp($!), $window->Unbusy(), return undef);
  
    if ($mode eq "install") {
       oscar_log_subsection("Step $step_number: Not waiting for completion");
    } else {
       oscar_log_subsection("Not waiting for completion");
    }
 
    $window->Unbusy();

    # Set the following next buttons available for manage mode
    if ( $$manage_status{delete_nodes8} eq "disabled" ) {
        my @tmp_next_steps = ("add_nodes", 
                              "delete_nodes8",
                              "install_uninstall_packages");
        foreach my $next_step (@tmp_next_steps){                          
            set_manage_status($next_step,\%options,\@errors);
        }
    }

    return 1;
}

# Pop up si_monitortk from SystemImager
sub monitor_deployment {
    my ($window) = @_;
    our $monitor_button;

    my $cmd = "/usr/sbin/si_monitortk --progress";
    $monitor_button->configure(-state => 'disabled');

    my $pipe = new FileHandle;
    our $monitortk_pid = $pipe->open("$cmd |") or die "Cannot fork: $!";
    $window->fileevent($pipe, 'readable', [\&stop_monitor_deployment, $window, $pipe]);
    return 1;
}

# Unfreeze the "Monitor Cluster Deployment" button in the main OSCAR Wizard widget
sub stop_monitor_deployment {
    my ($window, $pipe) = @_;
    our $monitortk_pid;
    our $monitor_button;

    waitpid($monitortk_pid, WNOHANG);
    $monitor_button->configure(-state => 'normal') if Tk::Exists($monitor_button);;
    $window->fileevent($pipe, 'readable', "");
}

# Pop up Network Boot Manager widget
sub netbootmgr {
    my ($window, $pipe) = @_;
    my $cmd = "/usr/sbin/netbootmgr";
    system("$cmd &");
}

# Brings up Ganglia main page using your favourite browser
sub ganglia {
    my ($window, $pipe) = @_;
    my $url = "http://localhost/ganglia";

    if ($browser ne "") {
      chomp($browser);
      system("$browser $url > /dev/null 2>&1 &");
    }
}

__END__

=head1 NAME

oscar_wizard, a script which creates the main GUI for OSCAR.

=head1 SYNOPSIS

oscar_wizard [install|manage]

=head1 DESCRIPTION

oscar_wizard, a script which creates the main GUI for OSCAR. It must be
executed as root.

=head1 OPTIONS

Supported options include:

=over 2

=item install 

Brings up the wizard in installation mode.

=item manage

Brings up the wizard in management mode (default).

=back

=head1 AUTHORS

=item The Board of Trustees of the University of Illinois.

=item The Trustees of Indiana University.

=item Bernard Li <bli@bcgsc.ca>

=item Erich Focht <efocht@hpce.nec.com>

=head1 SEE ALSO

perl(1)

=cut

