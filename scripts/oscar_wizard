#!/usr/bin/perl -w

use strict;
use Tk;
use Tk::ROText;
use lib "$ENV{OSCAR_HOME}/lib","/usr/lib/systemconfig","/usr/lib/systeminstaller","/usr/lib/systemimager/perl";
use POSIX;
use OSCAR::Help;
use OSCAR::Network;
use OSCAR::MAC;
use OSCAR::FrontPanel;
use OSCAR::Distro;
use OSCAR::DelNode;
use OSCAR::AddNode;
use SystemInstaller::Tk::Image;
use SystemInstaller::Tk::AddClients;
use SystemInstaller::Env;
use SystemInstaller::Tk::Common;
use POSIX;
use Carp;
use vars qw($config);

if( $#ARGV != 0 ) {
    croak "usage: $0 <cluster interface>\n";
}

if(!$ENV{OSCAR_HOME}) {
    croak "The environmental variable OSCAR_HOME is not set.  Please set it to the directory that OSCAR is untarred in.";
}

my $interface = $ARGV[0];

$ENV{PATH}= $config->binpath .":" . $ENV{PATH};

# Create the main window...
my $window = MainWindow->new();
$window->title("OSCAR Installation Wizard");

# Define the main buttons

#
# The title Group
#
my $image = "$ENV{OSCAR_HOME}/images/oscar.gif";

my $GIF_t=$window->Label(-image=> $window->Photo(-file=>$image),
                         -background=>"white");
my $GIF_t2=$window->Label(-image=> $window->Photo(-file=>$image),
                          -background=>"white");
my $Title_l=$window->Label(-text=>"Welcome to the OSCAR wizard!",-background=>"white");
$GIF_t->grid($Title_l,"-",-sticky=>"nsew");

# Step 1, Define OSCAR Server
oscar_button($window, "Step 1:", "Prepare OSCAR Server For Install", [\&frontpanel_window, $window, {interface => $interface} ], 'prep_server');

# Step 2, Build OSCAR Client Image
oscar_button($window, "Step 2:", "Build OSCAR Client Image", [\&build_oscar_image, $window], 'build_image');

# Step 3, Add Clients to OSCAR Image
oscar_button($window, "Step 3:", "Define OSCAR Clients", [\&build_oscar_clients, $window, $interface], 'addclients');

# Step 4, Setup Network Booting
oscar_button($window, "Step 4:", "Setup Networking", [\&mac_window, $window, {interface => $interface}], 'netboot');

my $boot=$window->Label (-text=>"Before continuing, network boot all of your nodes. 
Once they have completed installation, reboot them from 
the hard drive. Once all the machines and their ethernet
adaptors are up, move on to the next step.",-relief=>"groove");
$boot->grid("-","-",-sticky=>"nsew");

# Step 5, the Oscar post install script
oscar_button($window, "Step 5:", "Complete Cluster Setup", [\&run_post_install, $window], 'post_install');
oscar_button($window, "Step 6:", "Test Cluster Setup", [\&run_tests, $window], 'test_install');

#
# The buttons for node def maintenance
#
my $maint=$window->Label (-text=>"The following buttons are for managing 
your node definitions after the initial install.",-relief=>"groove");
$maint->grid("-","-",-sticky=>"nsew");
oscar_button($window, "", "Add OSCAR Clients", [\&addnode_window, $window, $interface], 'add_nodes');
oscar_button($window, "", "Delete OSCAR Clients", [\&delnode_window, $window], 'delete_nodes');


#
# The close button
#
my $cl_b=$window->Button(-text=>"Quit",
	-borderwidth=>"6", -relief=>"groove",
	-command=> sub {$window->destroy},-pady=>"8");
$window->bind("<Escape>",sub {$cl_b->invoke()});
$cl_b->grid("-","-",-sticky=>"nsew",-ipady=>"4");

MainLoop;

sub oscar_button {
    my ($window, $labeltxt, $buttontext, $buttoncmd, $helptext) = @_;
    my $label = $window->Label(-text => $labeltxt);
    my $button = $window->Button(-text => $buttontext, 
                                 -command => $buttoncmd, 
                                 -pady => 8);
    my $help = $window->Button(-text=>"Help",
                               -command=> [\&open_help, $window, $helptext], 
                               -pady => 8);
    $label->grid($button, $help, -sticky => "nsew");
}

sub build_oscar_clients {
    my ($window, $interface) = @_;
    my ($ip, $broadcast, $netmask) = interface2ip($interface);
    my ($a, $b, $c, $d) = split(/\./,$ip);
    $d++;
    my $startip = "$a.$b.$c.$d";

    my $hostname = (uname)[1];
    my ($shorthostname,$domainname)  = split(/\./,$hostname,2);

    my %vars = (
                imgname => "oscarimage",
                basename => "oscarnode",
                domainname => $domainname,
                numhosts => "0",
                startinghostnum => "1",
                netmask => $netmask,
                gateway => $ip,
                startip => $startip,
                postinstall => \&postaddclients,
                noshow => {
                           endip => 1,
                           endinghostnum => 1,
                          },
               );
    addclients_window($window, %vars);
}

sub build_oscar_image {
    my ($window) = @_;

    my @df_lines = `df /`;
    my $disk_type = "ide";
#   $disk_type = "ide" if ( grep ( /\/dev\/hd/, ( @df_lines ) ) );
    $disk_type = "scsi" if ( grep ( /\/dev\/sd/, ( @df_lines ) ) );

    

    my $arch = (uname)[4];
    $arch =~ s/i.86/i386/;
    my ($distroname, $distroversion) = which_distro('/tftpboot/rpm');
    my $rpmlist = "$ENV{OSCAR_HOME}/oscarsamples/$distroname-$distroversion-$arch.rpmlist";
    
    # now we get the list of the client rpms that we want to install
    my @clientfiles = glob("$ENV{OSCAR_HOME}/packages/*/client.rpmlist");

    my @fullfiles = map {" --filename=$_ "} @clientfiles;
    my $extraflags = join('',@fullfiles);

    my $diskfile = "sample.disk.$disk_type" . (($arch eq "i386") ? "" : ".$arch");

    my %vars = (
                imgname => "oscarimage",
                noshow => {
                           arch => 1,
                           imgpath => 1,
                          },
                pkgfile => "$rpmlist",
                pkgpath => "/tftpboot/rpm",
                diskfile => "$ENV{OSCAR_HOME}/oscarsamples/$diskfile",
                ipmeth => "static",
                piaction => "beep",
                extraflags => $extraflags,
                postinstall => \&postimagebuild,
               );

    createimage_window($window, %vars);
}

sub run_tests {
    my ($window) = @_;
    $window->Busy(-recurse => 1);
    print "Running tests...\n";
    !system("cd ../testing && xterm -sl 500 -e ./test_cluster_as_root --wait &") or (carp($!), $window->Unbusy(), return undef);
    $window->Unbusy();
    return 1;
}

sub run_post_install {
    my ($window) = @_;
    $window->Busy(-recurse => 1);
    print "Finalizing cluster setup...\n";
    my $rc = system("./post_install");
    if($rc) {
        $window->Unbusy();
        error_window($window, "There was an error running the post install scripts, please check your logs.");
    } else {
        $window->Unbusy();
        done_window($window, "Cluster Setup Complete");
    }
    return 1;
}

sub postaddclients {
    my ($vars) = @_;
    print "Executing post_clients phase\n";
    !system("./post_clients") or (carp($!), return undef);
    return 1;
}

sub postimagebuild {
    my ($vars) = @_;
    print "Executing post_rpm_install phase";
    !system("./post_rpm_install $$vars{imgname} $interface") or (carp($!), return undef);
    return 1;
}
