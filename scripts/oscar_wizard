#!/usr/bin/perl -w
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
# Copyright (c) 2003, The Board of Trustees of the University of Illinois.
#                     All rights reserved.
#
# Copyright (c) 2002 The Trustees of Indiana University.  
#                    All rights reserved.
# 
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# $Id: oscar_wizard,v 1.49 2003/06/27 14:49:38 brechin Exp $
#

use strict;
use Tk;
use Tk::ROText;
use lib "$ENV{OSCAR_HOME}/lib","/usr/lib/systemconfig","/usr/lib/systeminstaller","/usr/lib/systemimager/perl";
use POSIX;
use OSCAR::Help;
use OSCAR::Network;
use OSCAR::MAC;
use OSCAR::Distro;
use OSCAR::DelNode;
use OSCAR::AddNode;
use OSCAR::Logger;
use OSCAR::Selector;
use OSCAR::Configurator;
use OSCAR::Package;
use OSCAR::Database;
use SystemInstaller::Tk::Image;
use SystemInstaller::Tk::AddClients;
use SystemInstaller::Env;
use SystemInstaller::Tk::Common;
use POSIX;
use Carp;
use vars qw($config);

# First of all, enforce that the user running this script is 'root'
croak "You must be 'root' to run this script.  Aborting" if ($< != 0);

if( $#ARGV != 0 ) {
    croak "usage: $0 <cluster interface>\n";
}

if(!$ENV{OSCAR_HOME}) {
    croak "The environmental variable OSCAR_HOME is not set.  Please set it to the directory that OSCAR is untarred in, or run install_cluster again.";
}

# Some globals

my $save_text;
my $interface = $ARGV[0];

# Set some things in the environment

$ENV{OSCAR_HEAD_INTERNAL_INTERFACE}=$interface;
$ENV{PATH}= $config->binpath .":" . $ENV{PATH};

# Create the main window...
my $window = MainWindow->new();
$window->title("OSCAR Installation Wizard");

# Define the main buttons

#
# The title Group
#
my $image = "$ENV{OSCAR_HOME}/images/oscar.gif";

my $GIF_t=$window->Label(-image=> $window->Photo(-file=>$image),
                         -background=>"white");
my $GIF_t2=$window->Label(-image=> $window->Photo(-file=>$image),
                          -background=>"white");
my $Title_l=$window->Label(-text=>"Welcome to the OSCAR wizard!",
			   -background=>"white");
$GIF_t->grid($Title_l,"-",-sticky=>"nsew");

# Select packages for installation
my $step_number = 1;
oscar_button($window, "Step $step_number:", 
	     "Select OSCAR Packages To Install...", 
	     [\&displayPackageSelector, $window, $step_number], 
	     'select_packages');

# Configure selected packages
$step_number++;
oscar_button($window, "Step $step_number:", 
	     "Configure Selected OSCAR Packages...", 
	     [\&displayPackageConfigurator, $window, $step_number],
	     'configure_packages');

# Install OSCAR server packages
$step_number++;
oscar_button($window, "Step $step_number:", "Install OSCAR Server Packages",
	     [\&run_server_install, $window, $step_number,
	      {interface => $interface} ], 'install_server');

# Build OSCAR Client Image
$step_number++;
oscar_button($window, "Step $step_number:", "Build OSCAR Client Image...", 
	     [\&build_oscar_image, $window, $step_number], 'build_image');

# Add Clients to OSCAR Image
$step_number++;
oscar_button($window, "Step $step_number:", "Define OSCAR Clients...", 
	     [\&build_oscar_clients, $window, $step_number, $interface], 
	     'addclients');

# Setup Network Booting
$step_number++;
oscar_button($window, "Step $step_number:", "Setup Networking...", 
	     [\&mac_window, $window, $step_number,
	      {interface => $interface}], 'netboot');

my $boot=$window->Label (-text => 
			 "Before continuing, network boot all of your nodes. 
Once they have completed installation, reboot them from 
the hard drive. Once all the machines and their ethernet
adaptors are up, move on to the next step.",-relief=>"groove");
$boot->grid("-","-",-sticky=>"nsew");

# OSCAR post install script
$step_number++;
oscar_button($window, "Step $step_number:", "Complete Cluster Setup", 
	     [\&run_post_install, $window, $step_number], 'post_install');

# Test script
$step_number++;
oscar_button($window, "Step $step_number:", "Test Cluster Setup", 
	     [\&run_tests, $window, $step_number], 'test_install');

#
# The buttons for node def maintenance
#
my $maint=$window->Label (-text=>"The following buttons are for managing 
your node definitions after the initial install.",-relief=>"groove");
$maint->grid("-","-",-sticky=>"nsew");
oscar_button($window, "", "Add OSCAR Clients...", 
	     [\&addnode_window, $window, $interface], 'add_nodes');
oscar_button($window, "", "Delete OSCAR Clients...", 
	     [\&delnode_window, $window], 'delete_nodes');

#
# The close button
#
my $cl_b=$window->Button(-text=>"Quit",
       -borderwidth=>"6", -relief=>"groove",
       -command=> sub {$window->destroy},-pady=>"2");
$window->bind("<Escape>",sub {$cl_b->invoke()});
$cl_b->grid("-","-",-sticky=>"nsew",-ipady=>"4");

#
# Execution goes into an infinite Tcl/Tk loop here
#

MainLoop;

###########################################################################

sub oscar_button {
    my ($window, $labeltxt, $buttontext, $buttoncmd, $helptext) = @_;
    my $label = $window->Label(-text => $labeltxt);
    my $button = $window->Button(-text => $buttontext, 
                                 -command => $buttoncmd, 
                                 -pady => 2);
    my $help = $window->Button(-text=>"Help...",
                               -command=> [\&open_help, $window, $helptext], 
                               -pady => 2);
    $label->grid($button, $help, -sticky => "nsew");
}

###########################################################################

sub run_command {
    my ($parent_window, $step_number, $vars) = @_;
    my $result;
    my $window_func;

    oscar_log_subsection("Step $step_number: Running: $$vars{cmd}");

    if (system($$vars{cmd})) {
	$result = $$vars{failure};
	$window_func = \&error_window;
    } else {
	$result = $$vars{success};
	$window_func = \&done_window;
    }

    oscar_log_subsection("Step $step_number: " . $result->{message});
    if ($result->{unbusy}) {
	&$window_func($parent_window, $result->{message},
		     sub { $parent_window->Unbusy(); });
    } else {
	&$window_func($parent_window, $result->{message});
    }
    $parent_window->Unbusy();
    $result->{return_status};
}

###########################################################################

sub run_server_install {
    my ($window, $step_number, $vars) = @_;

    # Make the top-level OSCAR wizard window busy so that the user
    # can't click in another step while this one is running.

    $window->Busy(-recurse => 1);

    oscar_log_section("Running step $step_number of the OSCAR wizard: Install OSCAR server packages");

    my $cmd_vars = { 
	cmd => "./install_server $$vars{interface}",
	success => {
	    message => "Successfully installed OSCAR server",
	    unbusy => 1,
	    return_status => 0,
	},
	failure => {
	    message => "Failed to properly install OSCAR server; please check the logs",
	    unbusy => 1,
	    return_status => 1,
	},
    };
    run_command($window, $step_number, $cmd_vars);
}

###########################################################################

sub build_oscar_image {
    my ($window, $step_number) = @_;
    my @df_lines = `df /`;
    my $disk_type = "ide";
    $disk_type = "scsi" if ( grep ( /\/dev\/sd/, ( @df_lines ) ) );

    oscar_log_section("Running step $step_number of the OSCAR wizard: Build OSCAR client image");

    # Get the distro list

    my $arch = (uname)[4];
    $arch =~ s/i.86/i386/;
    my ($distroname, $distroversion) = which_distro('/tftpboot/rpm');
    oscar_log_subsection("Step $step_number: Identified distro of clients: $distroname $distroversion");
    my $rpmlist = "$ENV{OSCAR_HOME}/oscarsamples/$distroname-$distroversion-$arch.rpmlist";
    oscar_log_subsection("Step $step_number: Using RPM list: $rpmlist");
    
    # Get a list of the client RPMs that we want to install.  Make a
    # new file containing the names of all the RPMs to install.

    my @pkgs = list_selected_packages("all");
    my $outfile = "/tmp/oscar-install-rpmlist.$$";
    $save_text = $outfile;
    open(OUTFILE, ">$outfile") or croak("Could not open $outfile");
    foreach my $pkg (@pkgs) {
#	my @rpms = rpmlist($pkg, "client");
	my @rpms = database_rpmlist_for_package_and_group($pkg,
							  "oscar_clients");
	foreach my $rpm (@rpms) {
	    print OUTFILE "$rpm\n";
	}
    }
    close(OUTFILE);
    my $extraflags = " --filename=$outfile";

    my $diskfile = "sample.disk.$disk_type" . 
	(($arch eq "i386") ? "" : ".$arch");

    my %vars = (
                imgname => "oscarimage",
                noshow => {
                           arch => 1,
                           imgpath => 1,
                           password => 1,
                          },
                pkgfile => "$rpmlist",
                pkgpath => "/tftpboot/rpm",
                diskfile => "$ENV{OSCAR_HOME}/oscarsamples/$diskfile",
                ipmeth => "static",
                piaction => "beep",
                extraflags => $extraflags,
                postinstall => \&postimagebuild,
		step_number => $step_number,
               );

    createimage_window($window, %vars);
}

sub postimagebuild {
    my ($vars) = @_;
    my $step_number = $$vars{step_number};

    my $cmd = "./post_rpm_install $$vars{imgname} $interface";
    oscar_log_subsection("Step $step_number: Running: $cmd");
    !system($cmd) or (carp($!), return undef);
    oscar_log_subsection("Step $step_number: Successfully ran: $cmd");

    # All done -- remove the temp file that held all the RPM filenames
    
    unlink($save_text);

    oscar_log_subsection("Step $step_number: Completed successfully");

    1;
}

###########################################################################

sub build_oscar_clients {
    my ($window, $step_number, $interface) = @_;
    my ($ip, $broadcast, $netmask) = interface2ip($interface);
    my ($a, $b, $c, $d) = split(/\./,$ip);
    if ($d == 1) {
      $d++;
    } else {
      $d = 1;
    }
    my $startip = "$a.$b.$c.$d";

    my $hostname = (uname)[1];
    my ($shorthostname,$domainname)  = split(/\./,$hostname,2);

    oscar_log_section("Running step $step_number of the OSCAR wizard: Define OSCAR clients");

    # If the domainname is blank, stick in a default value

    if (!$domainname) {
	$domainname = "oscardomain";
    }

    my %vars = (
                imgname => "oscarimage",
                basename => "oscarnode",
                domainname => $domainname,
                numhosts => "0",
                startinghostnum => "1",
                netmask => $netmask,
                gateway => $ip,
                startip => $startip,
                postinstall => \&postaddclients,
                noshow => {
                           endip => 1,
                           endinghostnum => 1,
                          },
		step_number => $step_number
               );
    addclients_window($window, %vars);
}

sub postaddclients {
    my ($vars) = @_;
    my $step_number = $$vars{step_number};

    my $cmd = "./post_clients";
    oscar_log_subsection("Step $step_number: Running: $cmd");
    !system($cmd) or (carp($!), return undef);
    oscar_log_subsection("Step $step_number: Successfully ran: $cmd");
    oscar_log_subsection("Step $step_number: Completed successfully");
    return 1;
}

###########################################################################

sub run_post_install {
    my ($window, $step_number) = @_;
    $window->Busy(-recurse => 1);

    oscar_log_section("Running step $step_number of the OSCAR wizard: Complete cluster setup");

    my $cmd_vars = { 
	cmd => "./post_install",
	success => {
	    message => "Successfully completed the cluster install",
	    unbusy => 1,
	    return_status => 1,
	},
	failure => {
	    message => "Failed to properly complete the cluster install; please check the logs",
	    unbusy => 1,
	    return_status => 0,
	},
    };
    run_command($window, $step_number, $cmd_vars);
}

###########################################################################

sub run_tests {
    my ($window, $step_number) = @_;
    $window->Busy(-recurse => 1);

    oscar_log_section("Running step $step_number of the OSCAR wizard: Test cluster setup");

    my $cmd = "cd $ENV{OSCAR_HOME}/testing && xterm -sl 500 -e ./test_cluster --wait";
    oscar_log_subsection("Step $step_number: Running tests: $cmd");
    !system("$cmd &") or (carp($!), $window->Unbusy(), return undef);
    oscar_log_subsection("Step $step_number: Not waiting for completion");
    $window->Unbusy();
    return 1;
}
