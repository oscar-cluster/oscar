#!/usr/bin/perl -w

use strict;
use Tk;
use Tk::ROText;
use lib "$ENV{OSCAR_HOME}/lib","/usr/lib/systemconfig","/usr/lib/systeminstaller","/usr/lib/systemimager/perl";
use POSIX;
use OSCAR::Help;
use OSCAR::Network;
use OSCAR::MAC;
use OSCAR::FrontPanel;
use OSCAR::Distro;
use OSCAR::DelNode;
use OSCAR::AddNode;
use OSCAR::Logger;
use SystemInstaller::Tk::Image;
use SystemInstaller::Tk::AddClients;
use SystemInstaller::Env;
use SystemInstaller::Tk::Common;
use POSIX;
use Carp;
use vars qw($config);

if( $#ARGV != 0 ) {
    croak "usage: $0 <cluster interface>\n";
}

if(!$ENV{OSCAR_HOME}) {
    croak "The environmental variable OSCAR_HOME is not set.  Please set it to the directory that OSCAR is untarred in, or run install_cluster again.";
}

my $interface = $ARGV[0];

$ENV{OSCAR_HEAD_INTERNAL_INTERFACE}=$interface;

$ENV{PATH}= $config->binpath .":" . $ENV{PATH};

# Create the main window...
my $window = MainWindow->new();
$window->title("OSCAR Installation Wizard");

# Define the main buttons

#
# The title Group
#
my $image = "$ENV{OSCAR_HOME}/images/oscar.gif";

my $GIF_t=$window->Label(-image=> $window->Photo(-file=>$image),
                         -background=>"white");
my $GIF_t2=$window->Label(-image=> $window->Photo(-file=>$image),
                          -background=>"white");
my $Title_l=$window->Label(-text=>"Welcome to the OSCAR wizard!",-background=>"white");
$GIF_t->grid($Title_l,"-",-sticky=>"nsew");

# Step 1, Define OSCAR Server
oscar_button($window, "Step 1:", "Prepare OSCAR Server For Install", [\&frontpanel_window, $window, {interface => $interface} ], 'prep_server');

# Step 2, Build OSCAR Client Image
oscar_button($window, "Step 2:", "Build OSCAR Client Image", [\&build_oscar_image, $window], 'build_image');

# Step 3, Add Clients to OSCAR Image
oscar_button($window, "Step 3:", "Define OSCAR Clients", [\&build_oscar_clients, $window, $interface], 'addclients');

# Step 4, Setup Network Booting
oscar_button($window, "Step 4:", "Setup Networking", [\&mac_window, $window, {interface => $interface}], 'netboot');

my $boot=$window->Label (-text=>"Before continuing, network boot all of your nodes. 
Once they have completed installation, reboot them from 
the hard drive. Once all the machines and their ethernet
adaptors are up, move on to the next step.",-relief=>"groove");
$boot->grid("-","-",-sticky=>"nsew");

# Step 5, the Oscar post install script
oscar_button($window, "Step 5:", "Complete Cluster Setup", [\&run_post_install, $window], 'post_install');
oscar_button($window, "Step 6:", "Test Cluster Setup", [\&run_tests, $window], 'test_install');

#
# The buttons for node def maintenance
#
my $maint=$window->Label (-text=>"The following buttons are for managing 
your node definitions after the initial install.",-relief=>"groove");
$maint->grid("-","-",-sticky=>"nsew");
oscar_button($window, "", "Add OSCAR Clients", [\&addnode_window, $window, $interface], 'add_nodes');
oscar_button($window, "", "Delete OSCAR Clients", [\&delnode_window, $window], 'delete_nodes');


#
# The close button
#
my $cl_b=$window->Button(-text=>"Quit",
	-borderwidth=>"6", -relief=>"groove",
	-command=> sub {$window->destroy},-pady=>"8");
$window->bind("<Escape>",sub {$cl_b->invoke()});
$cl_b->grid("-","-",-sticky=>"nsew",-ipady=>"4");

MainLoop;

sub oscar_button {
    my ($window, $labeltxt, $buttontext, $buttoncmd, $helptext) = @_;
    my $label = $window->Label(-text => $labeltxt);
    my $button = $window->Button(-text => $buttontext, 
                                 -command => $buttoncmd, 
                                 -pady => 8);
    my $help = $window->Button(-text=>"Help",
                               -command=> [\&open_help, $window, $helptext], 
                               -pady => 8);
    $label->grid($button, $help, -sticky => "nsew");
}

sub build_oscar_clients {
    my ($window, $interface) = @_;
    my ($ip, $broadcast, $netmask) = interface2ip($interface);
    my ($a, $b, $c, $d) = split(/\./,$ip);
    $d++;
    my $startip = "$a.$b.$c.$d";

    my $hostname = (uname)[1];
    my ($shorthostname,$domainname)  = split(/\./,$hostname,2);

    oscar_log_section("Running step 3 of the OSCAR wizard");

    # If the domainname is blank, stick in a default value

    if (!$domainname) {
	$domainname = "oscardomain";
    }

    my %vars = (
                imgname => "oscarimage",
                basename => "oscarnode",
                domainname => $domainname,
                numhosts => "0",
                startinghostnum => "1",
                netmask => $netmask,
                gateway => $ip,
                startip => $startip,
                postinstall => \&postaddclients,
                noshow => {
                           endip => 1,
                           endinghostnum => 1,
                          },
               );
    addclients_window($window, %vars);
}

sub build_oscar_image {
    my ($window) = @_;

    my @df_lines = `df /`;
    my $disk_type = "ide";
#   $disk_type = "ide" if ( grep ( /\/dev\/hd/, ( @df_lines ) ) );
    $disk_type = "scsi" if ( grep ( /\/dev\/sd/, ( @df_lines ) ) );

    oscar_log_section("Running step 2 of the OSCAR wizard");

    my $arch = (uname)[4];
    $arch =~ s/i.86/i386/;
    my ($distroname, $distroversion) = which_distro('/tftpboot/rpm');
    oscar_log_subsection("Step 2: Identified distro of clients: $distroname $distroversion");
    my $rpmlist = "$ENV{OSCAR_HOME}/oscarsamples/$distroname-$distroversion-$arch.rpmlist";
    oscar_log_subsection("Step 2: Using RPM list: $rpmlist");
    
    # now we get the list of the client rpms that we want to install
    my @clientfiles = glob("$ENV{OSCAR_HOME}/packages/*/client.rpmlist");

    my @fullfiles = map {" --filename=$_ "} @clientfiles;
    my $extraflags = join('',@fullfiles);

    my $diskfile = "sample.disk.$disk_type" . (($arch eq "i386") ? "" : ".$arch");

    my %vars = (
                imgname => "oscarimage",
                noshow => {
                           arch => 1,
                           imgpath => 1,
                           password => 1,
                          },
                pkgfile => "$rpmlist",
                pkgpath => "/tftpboot/rpm",
                diskfile => "$ENV{OSCAR_HOME}/oscarsamples/$diskfile",
                ipmeth => "static",
                piaction => "beep",
                extraflags => $extraflags,
                postinstall => \&postimagebuild,
               );

    createimage_window($window, %vars);
}

sub run_tests {
    my ($window) = @_;
    $window->Busy(-recurse => 1);

    oscar_log_section("Running step 6 of the OSCAR wizard");

    my $cmd = "cd ../testing && xterm -sl 500 -e ./test_cluster_as_root --wait";
    oscar_log_subsection("Step 6: Running tests: $cmd");
    !system("$cmd &") or (carp($!), $window->Unbusy(), return undef);
    oscar_log_subsection("Step 6: Not waiting for completion");
    $window->Unbusy();
    return 1;
}

sub run_post_install {
    my ($window) = @_;
    $window->Busy(-recurse => 1);

    oscar_log_section("Running step 5 of the OSCAR wizard");

    my $cmd = "./post_install";
    oscar_log_subsection("Step 5: Running post_install: $cmd");
    my $rc = system($cmd);
    if($rc) {
        $window->Unbusy();
        error_window($window, "There was an error running the post install scripts, please check your logs.");
    } else {
	oscar_log_subsection("Step 5: Successfully ran post_install");
        $window->Unbusy();
        done_window($window, "Cluster Setup Complete");
    }
    oscar_log_subsection("Step 5: Completed successfully");
    return 1;
}

sub postaddclients {
    my ($vars) = @_;

    my $cmd = "./post_clients";
    oscar_log_subsection("Step 3: Running: $cmd");
    !system($cmd) or (carp($!), return undef);
    oscar_log_subsection("Step 3: Successfully ran: $cmd");
    oscar_log_subsection("Step 3: Completed successfully");
    return 1;
}

sub postimagebuild {
    my ($vars) = @_;

    my $cmd = "./post_rpm_install $$vars{imgname} $interface";
    oscar_log_subsection("Step 2: Running: $cmd");
    !system($cmd) or (carp($!), return undef);
    oscar_log_subsection("Step 2: Successfully ran: $cmd");
    oscar_log_subsection("Step 2: Completed successfully");
    return 1;
}
