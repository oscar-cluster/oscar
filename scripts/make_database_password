#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# Copyright 2002 NCSA
#                Neil Gorsuch <ngorsuch@ncsa.uiuc.edu>
# $Id$

use Tk;
use Tk::Entry;
use Tk::DialogBox;
use lib $ENV{'OSCAR_HOME'} . "/lib";
use OSCAR::Tk;

my($root);

my $pwfile = "/etc/odapw";

sub okpushed {
  my $ret = $entry->get();
  my $ret2= $entry2->get();
  if ( ( ! $ret ) || ( ! $ret2 ) ) { 
  # Check to see if the user entered anything at all
    our $errorstring = "The entry cannot be empty.";
  } else { 
    if ( "x$ret2" ne "x$ret" ) {
      our $errorstring = "Passwords do not match!";
    } else {
      $password = $ret;
      our $root->destroy();
    }
    
  }
}
#########################################################################
#  Subroutine: textEntryDialog                                          #
#  Parameters: 1. The title for the DialogBox                           #
#              2. The text for the prompt label                         #
#              3. (Opt.) If you want the text to be displayed as a      #
#                 bunch of asterisks (*) instead of the text typed by   #
#                 the user (eg. for passwords), pass "1" as the third   #
#                 argument.                                             #
#  Returns   : The text entered by the user if Ok was pressed, or       #
#              "" (empty string) if Random was pressed.                 #
#########################################################################
sub textEntryDialog
{
  my ($title,$label,$pw) = @_; # 1. $title = The title for the box 
                               # 2. $label = The label for the prompt
                               # 3. $pw = 1 if you want "*" output

  my $db;                      # The DialogBox widget
  our $errorstring = "";       # The string to output if there was an error

  our $root = MainWindow->new;
  $root->withdraw();
  $root->title($title);
      # Add a label for the error (if there was an error)
      $root->Label(
              -textvariable => \$errorstring,
              -foreground => '#aa0000',
             )->pack;
      # Add a label for what the prompt
      $root->Label( 
               -text => $label,
             )->pack;
      # Add a (labeled) text entry box for the user to type in
      our $entry = $root->Entry( 
               -width => 30,
               -show => ($pw ? '*' : undef),
             );
      $entry->pack;
      $root->Label(
		-text=> "Enter password again",
	     )->pack;
      our $entry2 = $root->Entry(
		-width => 30,
		-show => ($pw ? '*' : undef),
		);
      $entry2->pack;
      $root->Button(
		-text=>'Ok',
                -command=>\&okpushed,
	     )->pack(-side=>'left');
      $root->Button(
		-text=>'Generate Random Password',
 		-command=>sub{
			      $root->destroy();
			      $entry->delete(0, 'end');
                             },
	     )->pack(-side=>'right');
      $root->bind('<Escape>' => sub{ $root->destroy();
	  		             $entry->delete(0, 'end');
			           } 
                 );
      center_window( $root );

MainLoop;

}

# make sure we're effectively root

if ( $> ) {
  print "You need to be root to make a database password.\n";
  exit 1;
}

# see if the password is already in the password file

our $password = "";
print "Checking for ODA database password file ... ";
if ( ! -f $pwfile ) { 
  print "not found.\n";
} else {
  print "found.\n";
  print "Checking for proper ownership and permissions ... ";
  my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
      $atime,$mtime,$ctime,$blksize,$blocks) = stat(_);
  if ( $uid != 0 ) {
    print "improper file owner ", $uid, ".\n";
  } 
  else {
    if ( ( $mode & 07777 ) != 0600 ) {
      printf "Changing mode of /etc/odapw to 0600";
      system("chmod 0600 /etc/odapw");
    } 
    print "correct.\n";
    print "Reading password from file $pwfile ... ";
    if ( ! open(PWFILE, $pwfile) ) {
	print "cannot open file.\n";
    } else {
      my @lines = <PWFILE>;
      close PWFILE;
      chomp @lines;
      if ( scalar @lines != 1 ) {
	print "improper file format.\n";
      } else {
	my @fields = split( /\s+/, $lines[0] );
	if ( scalar @fields != 1 ) {
	  print "password needs one word only.\n";
        } else {
          print "done.\n";
          $password = $lines[0];
        }
      }
    }
  }
}

if ( $password eq "" ) {
  unlink $pwfile;
#  exit 0;
  #dnl print "Reading new password from installer ... ";
#  $root = MainWindow->new();
#  $root->title("The OSCAR database uses a password to protect the database.");
  #dnl my $passwordget = textEntryDialog("OSCAR Database Setup","Enter a password",1);

#  print "result = <$password>\n";
  if ( $password eq "" ) {
  #dnl   print "NO PASSWORD ENTERED.\n";
    print "Generating a random password for the OSCAR database.\n";
    $password = "oscar." .
	int(rand(10)) . int(rand(10)) . int(rand(10)) . "." .
	int(rand(10)) . int(rand(10)) . int(rand(10)) . "." .
	int(rand(10)) . int(rand(10)) . int(rand(10)) . "." .
	int(rand(10)) . int(rand(10)) . int(rand(10)) ;
  }
  #dnl print "password accepted.\nSaving password ... ";
  if ( ! open(PWFILE, '>', $pwfile ) ) {
    print "CANNOT OPEN FILE $pwfile FOR WRITING.\n";
    exit 1;
  }
  print PWFILE "$password\n";
  close PWFILE;
  print "saved.\n";
}
my $count = chmod 0600, $pwfile;
if ( $count != 1 ) {
  print "CANNOT chmod FILE $pwfile.\n";
  unlink $pwfile;
  exit 1;
}
$count = chown 0, 0, $pwfile;
if ( $count != 1 ) {
  print "CANNOT chown FILE $pwfile.\n";
  unlink $pwfile;
  exit 1;
}

exit 0;

__END__

=head1 NAME

create_database_password, a script that creates a Tk dialog for the creation 
of a database password for the OSCAR database.

=head1 SYNOPSIS

create_database_password

=head1 DESCRIPTION

create_database_password is a script that creates a Tk dialog for the creation 
of a database password for the OSCAR database.

=head1 OPTIONS

None.

=head1 AUTHOR

Neil Gorsuch, NCSA <ngorsuch@ncsa.uiuc.edu>

=head1 SEE ALSO

perl(1)

=cut
