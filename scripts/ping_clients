#!/usr/bin/perl

eval 'exec /usr/bin/perl  -S $0 ${1+"$@"}'
    if 0; # not running under some shell

#   $Header: /home/user5/oscar-cvsroot/oscar/scripts/ping_clients,v 1.3 2003/03/19 20:12:07 mchasal Exp $

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use lib "/usr/lib/systeminstaller";
use SIS::Image;
use SIS::Client;
use SIS::DB;
 
# Use Schwartzian transform to sort clients by node names alphabetically and numerically.
# Names w/o numeric suffix precede those with numeric suffix.
sub sortclients(@) {
	return map { $_->[0] }
	       sort { $a->[1] cmp $b->[1] || ($a->[2]||-1) <=> ($b->[2]||-1) }
	       map { [$_, $_->name =~ /^([\D]+)([\d]*)$/] }
	       @_;
}

my @machines = sortclients list_client();
my $mach;
my $failcount=0;
print "Pinging all clients, this may take minute...\n\n";
foreach $mach (@machines) {
	print "Pinging ".$mach->hostname."...";
	my $cmd="ping -c3 ".$mach->hostname." >/dev/null 2>&1";
	if (system($cmd)) {
		print "Failed!!\n";
		$failcount++;
	} else {
		print "Ok!!\n";
	}
}
if ($failcount) {
	print "\n$failcount client(s) failed to respond!!\n";
} else {
	print "\nAll clients responded!!\n";
}
