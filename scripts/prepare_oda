#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# Copyright ï¿½ 2003, The Board of Trustees of the University of Illinois. All rights reserved.
# Copyright 2003 NCSA
#                Neil Gorsuch <ngorsuch@ncsa.uiuc.edu>
# Copyright 2004 Revolution Linux
#           Benoit des Ligneris <bdesligneris@revolutionlinux.com>
# Copyright (c) 2005-2007 The Trustees of Indiana University.  
#                    All rights reserved.
# Copyright (c) 2005 Bernard Li <bli@bcgsc.ca>.
#                    All rights reserved.
# Copyright (c) 2006 Erich Focht <efocht@hpce.nec.com>
#                    All rights reserved.
# Copyright (c) 2007 Oak Ridge National Laboratory
#                    Geoffroy Vallee <valleegr@ornl.gov>
#                    All rights reserved.
#       
# $Id$

# This program creates the OSCAR database and then generates all the
# OSCAR database tables.  The tables are created using the sql
# statements which are already defined for "InnoDB" type at
# $ENV{OSCAR_HOME}/share/prereqs/oda/oscar_table.sql.  Creation of the
# tables only happens at the first time instllation and once all the
# tables are created, the data in the config.xml of all the OSCAR
# packages are stored to the database by parsing them to the sql
# strings.  Meanwhile, Population of packages data to the database is
# implemented everytime this script runs.

# This program requires to create/populate the tables in a specific order 
# because of the property of InnoDB table type.
# In sum,
# At the first time installation
# 1. Create a database (naming it "oscar") 
# 2. Create tables according to share/prereqs/oda/oscar_table.sql
# 3. Populate the OSCAR global data to the following tables:
#    - Clusters, Groups, Nodes, and Status
# 
# At the next implementation plus the first time installation
# 4. Populate the Packages table
# 5. Populate the Packages related tables:
#    - Packages
#    - Packages_rpmlists, Packages_servicelists, Packages_switcher
#    - Packages_requires, Packages_provides, Packages_conflicts
# The Packages and its related tables are updated from the second 
# installation.
#

use strict;
use Getopt::Long;
use lib "$ENV{OSCAR_HOME}/lib", "$ENV{OSCAR_HOME}/lib/OSCAR",
    "../../../lib", "../../../lib/OSCAR";
use OSCAR::PackagePath;
use OSCAR::Network;
use OSCAR::Database;
use OSCAR::Database_generic;
use OSCAR::oda;
use Data::Dumper;
use Carp;

my @error_strings = ();
my %options = (  'debug'        => 0 );

if ( (exists $ENV{OSCAR_VERBOSE} && $ENV{OSCAR_VERBOSE} == 10) 
    || $ENV{OSCAR_DB_VERBOSE} ){
    $options{debug} = 1;
}

if ($ENV{OSCAR_DB_DEBUG}) {
    $options{debug} = 1;
}

# configure command line options parsing
Getopt::Long::Configure("ignore_case"); # ignore case
Getopt::Long::Configure("bundling");    # allow -a -b or -ab
Getopt::Long::Configure("auto_abbrev"); # allow abbreviated input

# parse command line options
GetOptions( \%options,
            'debug!',
            'help', )
    || usage(1);


my $DEFAULT = "Default";
# find the base directory of the oscar distribution,
my $oscar_home;

# We get the configuration from the OSCAR configuration file.
my $oscar_configurator = OSCAR::ConfigManager->new();
if ( ! defined ($oscar_configurator) ) {
    die "ERROR: Impossible to get the OSCAR configuration\n";
}
my $oscar_cfg = $oscar_configurator->get_config();
my $db_type = $oscar_cfg->{'db_type'};


# first try the environmental variable
if ( exists $ENV{OSCAR_HOME} ) {
    $oscar_home = $ENV{OSCAR_HOME};
    die "DB_DEBUG>$0:\n====> bad OSCAR_HOME environmental variable value <$oscar_home>"
	if ( ! -d "$oscar_home");
}

print "DB_DEBUG>$0:\n====> oscar_home=<$oscar_home>\n" 
    if (defined ($ENV{OSCAR_HOME}) && $options{debug});

print "DB_DEBUG>$0:\n====> ARGV=<@ARGV>\n" if $options{debug};


# --help flag just prints out usage information and exits
if ( exists $options{help} ) {
    usage( 0 );
}

my $directory_argument;
my $package_directory;
my $package_name;
my $package_version = "";

if ($db_type eq "db") {
    OSCAR::Database::start_database_service ();

    # create the database if not already there and leave us connected to it
    OSCAR::Database::create_database(\%options, \@error_strings);

    if ( ! oda::oda_connect( \%options, \@error_strings ) ) {
        warn shift @error_strings while @error_strings;
        die "DB_DEBUG>$0:\n====> cannot connect to the OSCAR database";
    }

    my $msg = "";

    my $os = &distro_detect_or_die();

    my $distro_string = $os->{compat_distro} . "-" . $os->{compat_distrover} .
        "-" . $os->{arch};

    OSCAR::Database::create_database_tables (\%options, \@error_strings);


    # The env variable $ENV{OSCAR_HEAD_INTERNAL_INTERFACE} should be defined
    # at wizard_prep. If not, we setup by default (to be eth0).
    # This is necessary for the embeded script "set_global_oscar_values"
    $ENV{OSCAR_HEAD_INTERNAL_INTERFACE} = "eth0"
        if ! exists $ENV{OSCAR_HEAD_INTERNAL_INTERFACE};

    # The "set_global_oscar_values" scripts populates the following
    # tables: Clusters, Groups, and Status
    my $exit_status =
        system("$ENV{OSCAR_HOME}/scripts/set_global_oscar_values ".
               "--interface $ENV{OSCAR_HEAD_INTERNAL_INTERFACE}".
               ($options{debug}?" --debug":"") )/256;
    croak("Couldn't initialize the global database values table")
        if $exit_status;

    print "\nDB_DEBUG>$0:\n===========================((( ".
          "All the OSCAR global values are set )))===========================\n"
          if $options{debug};

    # "create_and_populate_basic_node_info" is another embeded script
    # to populate the "Nodes" table.
    my $exit_status =
        system("$ENV{OSCAR_HOME}/scripts/create_and_populate_basic_node_info".
               ($options{debug}?" --debug":"") )/256;
    croak("Couldn't set up a default package set") if $exit_status;

    print "\nDB_DEBUG>$0:\n===========================((( ".
          "All the basic node infos are set  )))===========================\n"
          if $options{debug};

    # The above two embeded scripts need to run before all the 
    # data for Packages and Packages related table are populated
    # because the above tables contain the primary keys which
    # will be used at the Packages and its related tables.
    # (i.e., The Packages table and Packages related tables are
    # dependent on the above tables(Clusters, Groups, Status, and
    # Nodes) and they can not really insert any data before the 
    # above tables populate data and generate the primary key
    # used by the Packages and its sub-tables.


    #
    # Now populate the Packages table with the info from the reachable
    # repositories.
    #
    my $exit_status =
        system("$ENV{OSCAR_HOME}/scripts/populate_oda_packages_table".
                ($options{debug}?" --debug":"") )/256;
    croak("Couldn't populate packages table") if $exit_status;


    oda::oda_disconnect( \%options , undef );
} elsif ($db_type eq "file") {
    print "File based ODA, nothing to do\n";
} else {
    die "ERROR: Unknow ODA type ($db_type)\n";
}
exit 0;

########################################################################

sub usage {
    my ( $exit_status, @error_strings ) = @_;
    my $progname = $0;
    print <<USAGE;

This program mainly does three things without argument:
1) Create all the OSCAR tables from the SQL which is already
   defined (ODA tables are created with InnoDB type)
2) Inserts the package records from the OSCAR repositories for
   the distro/arch of the current node into the following tables:
- Packages
(- Packages_servicelists)
(- Packages_switcher)
3) Call set_global_oscar_values to set the global oscar values
   to the following tables
- Clusters   
- Groups
- Status

Options:
  --[no]debug       turns on[off] debug output, default is off
  --help            prints out usage information then exits

Usage:
    $progname [options]

USAGE
    if ( @error_strings ) {
	print "\n";
	warn shift @error_strings while @error_strings;
    }
    exit $exit_status;
}

