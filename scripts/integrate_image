#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#
# Integrate an image into the HPCL/OSCAR/SIS database
#
# (c) Erich Focht, NEC HPCE, Stuttgart, 21.01.2004


use lib "/usr/lib/systeminstaller", "/usr/lib/systemimager/perl";
use SIS::DB;
use SIS::Image;
use SIS::Client;
use SystemImager::Server;
use SystemImager::Common;
use SystemImager::Config;
use SystemImager::Options;
use SystemInstaller::Log qw(start_verbose verbose logger_file); 
use vars qw($config $VERSION);
use AppConfig qw(:argcount);
use File::Basename;
use Getopt::Long;
use Carp;
use strict;

my $autoinstall_script_dir = $config->autoinstall_script_dir();
my $rsync_stub_dir = $config->rsync_stub_dir();
my $rsyncd_conf = $config->rsyncd_conf();
my $default_image_dir = $config->default_image_dir();
my $config_dir = "/etc/systemimager";
my $post_install;

# be sure program is run by root
SystemImager::Common->check_if_root();

my ($image, $imagedir, $arch, $disktab, $nokeys, $verb);
GetOptions(
	   "help"          => sub { &usage(0); },
	   "name=s"        => \$image,
	   "path=s"        => \$imagedir,
	   "arch=s"        => \$arch,
	   "disktab=s"     => \$disktab,
	   "nokeys"        => \$nokeys,
	   "postinstall=s" => \$post_install,
	   "verbose"       => \$verb,
	   ) || &usage(1);

# error checking
if (!$image && !$imagedir) {
    &usage;
    croak("\nERROR: You must supply an image name or path!\n");
}

if ($image && $imagedir) {
    &usage;
    croak("\nERROR: You must supply only one of image name or path!\n");
}

if (!$imagedir) {
    # image name must exist here!
    $imagedir = "$default_image_dir/$image";
}

if (-d $imagedir) {
    $imagedir =~ s/\/$//g;
    $image = basename($imagedir);
} else {
    croak("ERROR: Image path $imagedir is not a directory!");
}

# be sure $image doesn't start with a hyphen
if($image){
    if ($image =~ /^-/) {
	&usage;
	die "\nERROR: Image name can't start with a hyphen.\n\n";
    }
}

if ($disktab) {
    if (! -e $disktab) {
	croak("ERROR: Disktable file $disktab does not exist!\n");
    }
}

if (!$arch) {
    chomp($arch = `uname -m`);
}

################## real work starts here #######################

&start_verbose() if ($verb);

&verbose("\nImage name: $image\nImage path: $imagedir\nArch: $arch\nDisktab: $disktab\n");

my $script_name=$image;

# Add image entry to flamethrower.conf file

print ":> Adding image entry to flamethrower config file\n";

my $flamethrower_conf = "/etc/systemimager/flamethrower.conf";
my $entry_name = $image;
my $new_entry_data = "[$image]\nDIR = $imagedir\n";
SystemImager::Common->add_or_delete_conf_file_entry($flamethrower_conf, $entry_name, $new_entry_data) or
    die "ERROR: Cannot add entry to $flamethrower_conf";

# Add override entry to flamethrower.conf file
$entry_name = "override_" . $image;
$new_entry_data = "[override_$image]\nDIR = /var/lib/systemimager/overrides/$image\n";
SystemImager::Common->add_or_delete_conf_file_entry($flamethrower_conf, $entry_name, $new_entry_data) or
    die "ERROR: Cannot add entry to $flamethrower_conf";


# integrate into database
print ":> Integrating image into SIS database.\n";
my $nimage = new SIS::Image($image);
$nimage->location($imagedir);
$nimage->arch($arch) if ($arch);
set_image($nimage);


# add autoinstallscript.conf to image if disktable was passed
# this step also generates the systemconfig.conf file
if ($disktab) {
    print ":> Adding disk table $disktab to image $image.\n";
    if (! -d "$imagedir/etc/systemconfig") {
	mkdir("$imagedir/etc/systemconfig");
    }
    if(system("mksidisk --Add --name $image --file $disktab")) {
        print "WARNING: Disktable insertion has failed.\n";
    }
}

# If --nokeys is specified, do not copy SSH keys to image
if (!($nokeys)) {
    # copy master ssh keys to image
    print ":> Copying local node's ssh keys to image.\n";
    if (! -d "$imagedir/etc/ssh") {
        mkdir("$imagedir/etc/ssh");
    }
    if (system("cp -pf /etc/ssh/*key* $imagedir/etc/ssh")) {
        print "WARNING: Copying ssh keys to image failed.\n";
    }

    # copy root ssh keys from master to image
    print ":> Copying local node's root ssh keys to image.\n";
    if (! -d "$imagedir/root/.ssh") {
        mkdir("$imagedir/root/.ssh");
    }
    if (system("cp -pf /root/.ssh/* $imagedir/root/.ssh/")) {
        print "WARNING: Copying root ssh keys to image failed.\n";
    }
}

# copy /etc/hosts file from master to image
print ":> Copying local node's /etc/hosts file to image.\n";
if (system("cp -pf /etc/hosts $imagedir/etc/hosts")) {
    print "WARNING: Copying /etc/hosts to image failed.\n";
}

#
print "!!!!!!\n";
print "Remember to copy and/or adapt /etc/{passwd,group,shadow} from the\n";
print "master node to the image! If the distributions are different, you\n";
print "might need to edit the files manually, because the system accounts\n";
print "could have different user IDs!\n";
print "!!!!!!\n";


# create autoinstallscript
print ":> Creating autoinstall script for image.\n";
my $auto_install_script_conf = "${imagedir}/etc/systemimager/autoinstallscript.conf";

SystemImager::Server->validate_auto_install_script_conf( $auto_install_script_conf );

my $ip_assignment_method = "static";
$post_install = "reboot" if !($post_install);
my $no_listing = 0;
my $autodetect_disks = 1;
my $overrides = "$image,";
SystemImager::Server->create_autoinstall_script(
        $script_name,
        $autoinstall_script_dir,
        $config_dir,
        $image,
        $overrides,
        $imagedir,
        $ip_assignment_method,
        $post_install,
        $no_listing,
	$auto_install_script_conf,
	$autodetect_disks
);

print ":> Setting postinstall action to: $post_install\n";

# Add entry to image server's rsyncd.conf if necessary
print ":> Adding rsync_stub and generating rsyncd.conf for image.\n";
SystemImager::Server->create_image_stub($rsync_stub_dir, $image, $imagedir) or
    die "ERROR: Cannot create rsync stub entry in $rsync_stub_dir";

SystemImager::Server->gen_rsyncd_conf($rsync_stub_dir, $rsyncd_conf) or
    die "ERROR:  Cannot generate $rsyncd_conf";

print "========== integration of image finished! =============\n";

exit 0;

sub usage {
    my $ret = shift;
    print "Usage:\n";
    print "\t".basename($0)." --name image_name | --path image_path \\\n";
    print "\t\t[--disktab disktab_file] [--arch ARCH] [--nokeys] [--postinstall ACTION]\n\n";
    print "The image should preferably be located inside\n";
    print "/var/lib/systemimager/images.\n";
    print "The default architecture attributed to the image is that of the master node.\n";
    print "A disktable file should be inserted into the image by using the --disktab\n";
    print "command line option. This generates the /etc/systemimager/autoinstall.conf file\n";
    print "inside the image. It also triggers the generation of the file\n";
    print "/etc/systemconfig/systemconfig.conf\n";
    print "If you do not want to copy SSH keys from the server to the image, specify --nokeys\n";
    print "Specify the postinstall action with --postinstall (one of beep, reboot, shutdown)\n";
    print "\n";
    exit $ret if ($ret);
}
