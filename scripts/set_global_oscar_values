#! /usr/bin/perl

# Copyright 2003 NCSA
#           Neil Gorsuch <ngorsuch@ncsa.uiuc.edu>
# Copyright 2004 Revolution Linux
#           Benoit des Ligneris <bdesligneris@revolutionlinux.com>
# Copyright (C) 2005, 2006 Bernard Li <bli@bcgsc.ca>. All Rights Reserved. 
# Copyright (c) 2005-2007 The Trustees of Indiana University.  
#                    All rights reserved.
# Copyright (c) 2006 Erich Focht <efocht@hpce.nec.com>
#                    All rights reserved
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This script initializes or re-initializes the values in the database
#   table "oscar" which is for global values.

# $Id$

# This program is implemented in the "package_config_xmls_to_database"
# script to populate the global informaton of the OSCAR database
# More specifically, this populates the following tables:
# - Clusters
# - Groups
# - Status

use Getopt::Long;
use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::Database;
use OSCAR::Database_generic;
use OSCAR::Package;
use OSCAR::PackagePath;
use OSCAR::ConfigManager;
use POSIX;
use OSCAR::oda;
use Carp;

my %cmd_options = ();

# set default option values
%cmd_options = ( 'debug'       => 0,
                 'verbose'     => 0 );

$cmd_options{debug} = 1 if $ENV{OSCAR_DB_DEBUG};
$cmd_options{verbose} = 1 if $ENV{OSCAR_DB_VERBOSE};

sub usage {

    my ( $exit_status, @error_strings ) = @_;
    my $progname = $0;
    print <<USAGE;

$progname

$progname sets global OSCAR values and populate the OSCAR database.
You must specify the headnode interface as an argument.

Options:
  --[no]debug       [do not] turn on debug output (default: no)
  --help            print out usage information then exits
  --interface       specifies the headnode interface to use (eg. eth1)
  --[no]verbose     [do not] turn on verbose output (default: no)

Usage:
$progname [options]

USAGE
    if ( @error_strings ) {
        print "\n";
        warn shift @error_strings while @error_strings;
    }
    exit $exit_status;
}

my %field_value_hash = ();
# parse command line options
GetOptions( \%cmd_options,
            'debug!',
            'database|d=s',
            'help',
            'host|h=s',
            'interface|i=s',  
            'password=s',
            'port|p=i',
            'type|t=s',
            'user|u=s',
            'verbose!',
            'version' )
    || usage(1);
usage(0) if ! ( exists($cmd_options{interface}) );
usage(0) if exists $cmd_options{help};

print "DB_DEBUG>$0:\n====> after GetOptions ARGV=<@ARGV>\n" if $cmd_options{debug};
oda::print_hash( "", "DB_DEBUG>$0:\n====> options after GetOptions", \%cmd_options) if $cmd_options{debug};

`/sbin/ifconfig $cmd_options{interface} > /dev/null 2>&1`;

if ("$?") {
    print "Interface specified does not exist.\n";
    exit(1);
}

my $master_os = distro_detect_or_die("/");
my $oscar_server_architecture         = $master_os->{arch};
my $oscar_server_distribution         = $master_os->{compat_distro};
my $oscar_server_distribution_version = $master_os->{compat_distrover};

# dikim commented out the LOCKING codes here because he believes
# that InnoDB type can handle the all the crossing locking issues.
# He does not want to remove these codes because he easily forgets
# what files have locking codes and where they are and he may need
# them in case innodb works as we expected.

# open the database
#database_connect() ||
#die "DB_DEBUG>$0:\n====> cannot connect to oda database";
# START LOCKING FOR NEST && open the database
my @tables = ("Clusters", "Groups", "Status");
my %options = ();
my @errors = ();
#if(! locking("write", \%options, \@tables, \@errors)){
#    die "DB_DEBUG>$0:\n====> cannot connect to oda database";
#}


# write out one global oscar record, or modify an existing one
my @assigns = ();

my $oscar_configurator = OSCAR::ConfigManager->new(
        config_file => "/etc/oscar/oscar.conf");
if (!defined ($oscar_configurator)) {
    die "ERROR: Impossible to load the OSCAR configuration";
}
my $config = $oscar_configurator->get_config();
if (!defined ($config)) {
    die "ERROR: Impossible to load the OSCAR configuration after parsing\n";
}

# Get OSCAR's version

my $oscar_version;
my $oscar_version_script;
my $oscar_version_file;
if (defined $ENV{OSCAR_HOME}) {
    $oscar_version_script = "$ENV{OSCAR_HOME}/scripts";
    $oscar_version_file = $ENV{OSCAR_HOME};
} else {
    $oscar_version_script = $config->{'binaries_path'};
    $oscar_version_file = "/etc/oscar";
}
$oscar_version_script = "$oscar_version_script/get-oscar-version.sh";
$oscar_version_file = $oscar_version_file . "/" . "VERSION";

# Use the scripty-foo to get oscar version information.

if ( -e "$oscar_version_file" ) {
    my $cmd = "$oscar_version_script $oscar_version_file --full";

    open(CMD, "$cmd|") or die "ERROR: failed to get oscar version '$cmd' - $!";
    $oscar_version = <CMD>;
    chomp($oscar_version);

    close(CMD);
}
else {
    die("ERROR: OSCAR VERSION file missing '$oscar_version_file' - aborting!");
}

my $global_values_table = "Clusters";

my @error_strings = ();

# Populate "Clusters" table.
# If the table is empty, insert data into the Cluster table.
# Otherwise, update data of the table.
# Updating will not happen at the normal OSCAR installation
# unless a user manually runs this script.
my $query_results = get_cluster_info_with_name("",\%options,\@error_strings);
my $ret;
if ( !$query_results ){
    %field_value_hash = ( "name" => "oscar",
                            "oscar_version" => $oscar_version,
                            "server_distribution" => $oscar_server_distribution,
                            "server_distribution_version" => $oscar_server_distribution_version,
                            "server_architecture" => $oscar_server_architecture,
                            "headnode_interface" => "$cmd_options{interface}",
                            "installation_date" => "NOW()" );
    $ret = insert_into_table (\%options,
                              "Clusters",
                              \%field_value_hash,
                              \@error_strings);
    if ($ret == 0) {
        die "ERROR: Insertion into the table impossible ($ret, "
             . join(".", @error_strings).").";
    }
} else {
	print "DB_DEBUG>$0:\n====> very strange, there are more than 1 records table <$global_values_table>\n"
	    if (ref($query_results) ne "HASH") && (scalar @$query_results > 1) ;
	print "Modifying the global oscar information record\n";
    %field_value_hash = ("oscar_version" => $oscar_version,
                            "server_distribution" => $oscar_server_distribution,
                            "server_distribution_version" => $oscar_server_distribution_version,
                            "server_architecture" => $oscar_server_architecture,
                            "headnode_interface" => "$cmd_options{interface}",
                            "installation_date" => "NOW()" );
    $ret = update_table(\%options,
                        "Clusters",
                        \%field_value_hash,
                        undef,
                        \@error_strings);
    if ($ret == 0) {
        die "ERROR: Impossible to update the Clusters table ($ret, "
            . join(".", @error_strings).").";
    }
}

# Set up "Group" table with the global values.
# The current group values are..
#my @groups = ("oscar_server", "oscar_clients", "Default", "image", "core", "included");
my %groups = ("oscar_server" => "node",
              "oscar_clients"=> "node",
              "Default" => "package",
              "image" => "image", 
              "core" => "package",
              "included" => "package");
$ret = set_all_groups(\%groups,\%options,@error_strings);
if ($ret == 0) {
    die "ERROR: Impossible to set all group ($ret, "
        . join(".", @error_strings).").";
}

# Set up "Status" table with the global values.
# The current status values are..
# ("installable", "installed", "install_allowed","should_be_installed",
#  "should_be_uninstalled", "uninstalled, "finished")
$ret = set_status(\%options,\@error_strings);
if ($ret == 0) {
    die "ERROR: Impossible to set all group ($ret, "
        . join(".", @error_strings).").";
}

# UNLOCKING FOR NEST
#unlock(\%options, \@errors);

exit 0;
