#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This script is designed to be run after the image is built.
#   It will do all the fixups required.

use strict;
use Carp;
use File::Copy;
use File::Path;
use File::Basename;
use AppConfig;

my $imagename = shift or croak("No image name specified!"); 
my $serverint = shift or croak("No server interface name specified!"); 

my $config = init_si_config();

my $targetdir = $config->default_imagedir . "/$imagename";

if(!-d $targetdir) {croak("The directory $targetdir doesn't exist");}

sync_user_files($targetdir) or croak("Couldn't sync user files");

setup_nfs_homes($targetdir) or croak("Couldn't setup nfs mounted /home");

!system("./ssh_install $targetdir") or croak("Couldn't generate ssh keys");

run_postinstalls("..",$imagename) or croak("Couldn't run post installs");

sub run_postinstalls {
    my ($topdir, $image) = @_;
    my $imagedir = $config->default_imagedir . "/$image";
    foreach my $dir (files_in_dir("$topdir/packages")) {
        my $postimagescript = "$dir/scripts/post_buildimage";
        if(-x $postimagescript) {
            print "About to run $postimagescript...\n";
            !system("$postimagescript $image $imagedir") or croak("$!");
        }
    }
    return 1;
}

sub sync_user_files {
    my ($imagedir) = @_;
    copy("/etc/resolv.conf","$imagedir/etc/resolv.conf") or (carp "Couldn't populate /etc/resolv.conf to $imagedir",
                                                   return undef);
    copy("/etc/shadow","$imagedir/etc/shadow") or (carp "Couldn't populate /etc/shadow to $imagedir",
                                                   return undef);
    copy("/etc/passwd","$imagedir/etc/passwd") or (carp "Couldn't populate /etc/passwd to $imagedir",
                                                   return undef);
    copy("/etc/group","$imagedir/etc/group") or (carp "Couldn't populate /etc/group to $imagedir",
                                                   return undef);
    return 1;
}

sub files_in_dir {
    my $dir = shift;
    opendir(IN,$dir);
    my @temp = readdir(IN);
    closedir(IN);
    my @files = ();
    foreach my $file (@temp) {
       if($file !~ /^\./) {
           push @files, $file;
       }
    } 
    return map {"$dir/$_"} @files;
}

sub init_si_config {
    my $config = new AppConfig(
                               DEFAULT_IMAGEDIR => { ARGCOUNT => 1},
                               AUTOINSTALL_SCRIPT_DIR => { ARGCOUNT => 1},
                               AUTOINSTALL_BOOT_DIR => { ARGCOUNT => 1},
                               RSYNCD_CONF => { ARGCOUNT => 1},
                               CONFIG_DIR => { ARGCOUNT => 1}
                              );
    $config->file("/etc/systemimager/systemimager.conf");
    return $config;
}

sub setup_nfs_homes {
    	my ($imagedir) = @_;
	open(FSTAB,"<$imagedir/etc/fstab") or (carp("Can't open image's fstab file!"),
						return undef);
	open(TMP,">/tmp/fstab.$$") or (carp("Can't open fstab file!"),
						return undef);
	my $serverip=&find_internal_ip($serverint);
	while (<FSTAB>){
		unless (/:\/home/) {
			print TMP $_;
		}
	}
	print TMP "$serverip:/home /home nfs rw 0 2\n";
	close(FSTAB);
	close(TMP);
	move("/tmp/fstab.$$","$imagedir/etc/fstab") or (carp("Unable to replace fstab file!"),
						return undef);
	return 1;
}
sub find_internal_ip {
    my $interface = shift;
    # normally I hate sub processes, but for this I make an exception
    my $string = qx/ifconfig $interface | grep inet/;

    if($string =~ /addr:([\d\.]+)/) {
        return $1;
    }
    return undef;
}
