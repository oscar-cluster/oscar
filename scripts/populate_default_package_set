#! /usr/bin/perl

# Copyright 2003 NCSA
#           Neil Gorsuch <ngorsuch@ncsa.uiuc.edu>
# Copyright 2005
#           Bernard Li <bli@bcgsc.ca>
# Copyright (c) 2005-2006 The Trustees of Indiana University.  
#                    All rights reserved.
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# $Id$

#
# This script forces the "Default" package set to include
# the installable package names, and only the installable
# package names.
# This program updates the "Groups" table and populates the
# "Group_Packages" and "Node_Package_Status" tables
#

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::Database;
use OSCAR::Package;
use OSCAR::oda;
use OSCAR::OCA::OS_Detect;

my %options = ();
my @errors = ();

my @nics_results = ();
my $OSCAR_SERVER_NODE = "oscar_server";

# Determine if it is the first time installation or not.
# If nics table is already filled in, this is not first time installation.
# and skip the whole process of this script (populate_default_package_set).
get_nics_info_with_node($OSCAR_SERVER_NODE,\@nics_results,\%options,\@errors);
exit 0 if(@nics_results);


# name of default packages set
my $DEFAULT = "Default";

# packages to be excluded from the default packages set
my @exclude_packages_by_default = qw(networking pfilter sge sc3);

# we also load excluded packages for the distribution if we find
# a file associated to the current distro within share/package_set
# We first identify the current OS in order to be able to find the
# list of packages that have to be excluded. Remember, files in
# share/package_set follow the following pattern distro-version-archi
my $os = OSCAR::OCA::OS_Detect::open();
exit -1 if(!$os);
my $filename = $ENV{OSCAR_HOME} . "/share/package_set/";
$filename .= $os->{distro} . "-" . $os->{distro_version} . "-" . $os->{arch} . ".txt";
print "We check if file " . $filename . " exists\n";
my @exclude_packages = qw();
if ( -f $filename ) {
    print "File exists, excluding packages...\n";
    open (FILE, $filename);
    my $package;
    while ($package = <FILE>) {
        chomp ($package);
        if ($package ne "") {
            push(@exclude_packages, $package);
        }
    }
    close (FILE);
}
# We merge now excluded packages for the distro and those excluded 
# by default. The list should not have a package twice.
for (@exclude_packages_by_default) {
    my $pkg1 = $_;
    my $pkg_found = 0;
    for (@exclude_packages) {
        my $pkg2 = $_;
        if ($pkg1 eq $pkg2) {
            $pkg_found = 1;
        }
    }
    if ($pkg_found eq 0) {
        push(@exclude_packages, $pkg1);
    }
}
print "Packages excluded: @exclude_packages.\n";

my %is_excluded = ();
for (@exclude_packages) { $is_excluded{$_} = 1 };


# dikim commented out the LOCKING codes here because he believes
# that InnoDB type can handle the all the crossing locking issues.
# He does not want to remove these codes because he easily forgets
# what files have locking codes and where they are and he may need
# them in case innodb works as we expected.

# START LOCKING FOR NEST && open the database

my @tables =("Cluster","Nodes", "Packages", "Node_Package_Status", "Group_Packages", "Groups");

#if(! locking("write", \%options, \@tables, \@errors)){
#    die "DB_DEBUG>$0:\n====> cannot connect to oda database";
#}

# Make a 'Default' group selected
set_groups_selected($DEFAULT,\%options,\@errors);

# get a list of all installable packages
my @installable_packages = ();
get_selected_group_packages(\@installable_packages,\%options,\@errors);


# get the list of package_sets
print "Checking for existence of package set <$DEFAULT>\n";
my @package_set_names = ();
@errors = ("cannot read the list of package_sets from the oda database");
get_group_packages_with_groupname($DEFAULT,\@package_set_names,\%options,\@errors);

# if we already have a package set named "Default", ...
my $success = 1;

if ( @package_set_names )  {
    # If the default package set is already setup, do nothing.
} else {
    # create an empty default package set
    print "Creating new empty package set <$DEFAULT>\n";
    @errors = ("error creating package set <$DEFAULT>");
    set_groups($DEFAULT,\%options,\@errors);
    set_groups_selected($DEFAULT,\%options,\@errors);

    # populate the default package set with all installable packages
    foreach my $package_ref ( @installable_packages ) {
        my $package_id = $$package_ref{id};
        my $package_name = $$package_ref{package};

	unless ($is_excluded{$package_name} ) {
          print "Adding package <$package_name> to package set <$DEFAULT>\n";
          my %field_value_hash = ("package_id" => $package_id,
                                  "group_name" => $DEFAULT);
          my $error_msg="error adding package <$package_name> to package set <$DEFAULT>";
          @errors = ($error_msg);
          if ( ! insert_into_table(\%options, "Group_Packages", \%field_value_hash,\@errors) ){
              $success = 0;
              warn "DB_DEBUG>$0:\n====> $error_msg";
          }
	}
    }
}

# Insert into "Node_Package_Status" table
# If the data is already there, just update its status.
foreach my $package_ref (@installable_packages){
    my $package_id = $$package_ref{id};
    my $package_name = $$package_ref{package};
                    
    # installable tag is kept on config.xml and this is an easier way
    # to avoid tracing not-installable packages (e.g., networking).
    my $requested = 2;
    if ( !($is_excluded{$package_name}) ) {
        $success = update_node_package_status(
                    \%options,
                    $OSCAR_SERVER_NODE,
                    $package_name,
                    $requested,
                    \@errors);
                    
    } else {
        $success = delete_group_packages(
                "Default","$package_name",\%options,\@errors);
    }
}

# UNLOCKING FOR NEST
#unlock(\%options, \@errors);

if ( $success ) {
    exit 0;
} else {
    die "DB_DEBUG>$0:\n====> error setting up default values for package set <$DEFAULT>";
}
