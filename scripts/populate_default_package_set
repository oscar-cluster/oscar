#! /usr/bin/perl

# Copyright 2003 NCSA
#           Neil Gorsuch <ngorsuch@ncsa.uiuc.edu>
# Copyright 2005
#           Bernard Li <bli@bcgsc.ca>
# Copyright (c) 2005 The Trustees of Indiana University.  
#                    All rights reserved.
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This script forces the "Default" package set to include
#   the installable package names, and only the installable
#   package names.

# $Id$

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::Database;
use OSCAR::Package;
use oda;

my %options = ();
my @errors = ();

my @nics_results = ();
my $server_node = "oscar_server";

# Determine if it is the first time installation or not.
# If nics table is already filled in, this is not first time installation.
# and skip the whole process of this script (populate_default_package_set).
get_nics_info_with_node($server_node,\@nics_results,\%options,\@errors);
exit 0 if(@nics_results);


# name of default packages set
my $DEFAULT = "Default";

# packages to be excluded from the default packages set
my @exclude_packages = qw(networking sge);
my %is_excluded = ();
for (@exclude_packages) { $is_excluded{$_} = 1 };

sub do_it_or_die {
    my ( $command, $results_ref,$options_ref,$errors_ref ) = @_;
    return if do_select( $command, $results_ref, $options_ref, $errors_ref );
    database_disconnect();
    die "$0: $errors_ref";
}

# START LOCKING FOR NEST && open the database

my @tables =("Cluster","Nodes", "Packages", "Node_Package_Status", "Node_Packages", "Group_Packages", "Groups");

if(! locking("write", \%options, \@tables, \@errors)){
    die "$0: cannot connect to oda database";
}
# Make a 'Default' group selected
set_groups_selected($DEFAULT,\%options,\@errors);

# get a list of all installable packages
my @installable_packages = ();
get_selected_group_packages(\@installable_packages,\%options,\@errors);


# get the list of package_sets
print "Checking for existence of package set <$DEFAULT>\n";
my @package_set_names = ();
@errors = ("cannot read the list of package_sets from the oda database");
get_group_packages_with_groupname($DEFAULT,\@package_set_names,\%options,\@errors);

# if we already have a package set named "Default", ...
my $success = 1;

if ( @package_set_names )  {
    # If the default package set is already setup, do nothing.
} else {
    # create an empty default package set
    print "Creating new empty package set <$DEFAULT>\n";
    @errors = ("error creating package set <$DEFAULT>");
    set_groups($DEFAULT,\%options,\@errors);
    set_groups_selected($DEFAULT,\%options,\@errors);

    # populate the default package set with all installable packages
    foreach my $package_ref ( @installable_packages ) {
        my $package_id = $$package_ref{id};
        my $package_name = $$package_ref{package};

	unless ($is_excluded{$package_name} ) {
          print "Adding package <$package_name> to package set <$DEFAULT>\n";
          my %field_value_hash = ("package_id" => $package_id,
                                  "group_name" => $DEFAULT);
          my $error_msg="error adding package <$package_name> to package set <$DEFAULT>";
          @errors = ($error_msg);
          if ( ! insert_into_table(\%options, "Group_Packages", \%field_value_hash,\@errors) ){
              $success = 0;
              warn "$0: $error_msg";
          }
	}
    }
}

# Insert into "Node_Package_Status" table
# If the data is already there, just update its status.
foreach my $package_ref (@installable_packages){
    my $package_id = $$package_ref{id};
    my $package_name = $$package_ref{package};
    my $node_ref = 
        get_node_info_with_name("oscar_server",\%options,\@errors);
    my $node_id = $$node_ref{id};
    my %field_value_hash = ( "node_id"=>$node_id,
                              "package_id"=>$package_id,
                              "requested"=>1 );
    my $table = "Node_Package_Status";
    my @fields = ("*");
    my $where = "WHERE package_id=$package_id AND node_id=$node_id";
    # installable tag is kept on config.xml and this is an easier way
    # to avoid tracing not-installable packages (e.g., networking).
    my @results = ();
    select_table(\%options,$table,\@fields,$where,\@results,\@errors);
    if(! @results ){
        if ( !($is_excluded{$package_name}) ) {
            insert_into_table (\%options,$table,\%field_value_hash,\@errors);
        } else {
            set_group_packages(
                "Default","$package_name",0,\%options,\@errors);
        }
    }
}

# UNLOCKING FOR NEST
unlock(\%options, \@errors);

if ( $success ) {
    exit 0;
} else {
    die "$0: error setting up default values for package set <$DEFAULT>";
}
