#!/usr/bin/perl

# Copyright 2001-2002 International Business Machines
#                     Sean Dague <japh@us.ibm.com>
# Copyright (c) 2002-2006 The Trustees of Indiana University.  
#                    All rights reserved.
# $Id$
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This is a script which does everything that needs to be done for
#   the server to work for oscar.  It is long, but hopefully well structured.

# $Id$

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use POSIX; # gives us uname function
use File::Path;
use File::Copy;
use File::Basename;
use OSCAR::Network;
use OSCAR::Logger;
use OSCAR::Database;
use OSCAR::Package;
use OSCAR::PackMan;
use OSCAR::PackageSmart;
use Carp;
use Data::Dumper;
use OSCAR::OCA::OS_Detect;

my $OSCAR_SERVER_NODE = "oscar_server";
my $OSCAR_SERVER_GROUP = "oscar_server";

my $INTERFACE = shift or croak("No interface specified");

my $verbose = $ENV{OSCAR_VERBOSE};
if ($verbose && !$ENV{YUME_VERBOSE}) {
    $ENV{YUME_VERBOSE} = $verbose;
}

my $oscar_pkg_pool = &OSCAR::PackagePath::oscar_repo_url();
my $distro_pkg_pool = &OSCAR::PackagePath::distro_repo_url();

# List of root's .rc files (MDK PATH fixup)
my @rcfiles = qw(/root/.bashrc /root/.tcshrc /root/.cshrc);

my $nfs = "nfs";

# Under SUSE Linux, the init script for NFS Server is "nfsserver"
$nfs = "nfsserver" if -x "/etc/init.d/nfsserver";

# Under Debian, the init script for NFS Server is "nfs-kernel-server"
# Actually the server may also be nfs-user-server but we currently assume that
# OSCAR is using the kernel levevl server
$nfs = "nfs-kernel-server" if -x "/etc/init.d/nfs-kernel-server";

my $sshd = "sshd";

# Under Debian, the init script for ssh is "ssh"
$sshd = "ssh" if -x "/etc/init.d/ssh";

# Sanity checking for /etc/hosts
oscar_log_subsection("Getting internal IP address");
my ($ip,$bcast,$netmask) = interface2ip($INTERFACE) 
    or croak("Couldn't determine internal ip address");
oscar_log_subsection("Got: [IP $ip]");
oscar_log_subsection("Got: [broadcast $bcast]");
oscar_log_subsection("Got: [netmask $netmask]");

oscar_log_subsection("Adding hosts to /etc/hosts");
update_hosts($ip) or croak("Couldn't add required host entries to /etc/hosts");


# Get a list of all non-core packages
# and list of RPMs from the non-core packages
my $sel_group = get_selected_group;
my @opkgs = list_selected_packages("noncore",$sel_group);
my @opkgs_list;
my @pkgs;
my @qerrors;
foreach my $pkg_ref ( @opkgs ) {
    my $opkg = $$pkg_ref{package};
    my $ver = $$pkg_ref{version};
    push @opkgs_list, $opkg;
    push @pkgs, pkgs_of_opkg($opkg, $ver, \@qerrors,
			     group => $OSCAR_SERVER_GROUP,
			     chroot => "/" );
}
oscar_log_subsection("Identified non-core packages: " . join(' ', @opkgs_list));


# Now install the pkgs that we found

oscar_log_subsection("Installing server non-core packages " .
		     "(core packages already installed)");

my $pm = &OSCAR::PackageSmart::prepare_pools($verbose,$oscar_pkg_pool,$distro_pkg_pool);
if (!$pm) {
    croak "\nERROR: Could not create PackMan instance!\n";
}
oscar_log_subsection("Smart_install: ".join(",",@pkgs));
my ($ret, @out) = $pm->smart_install(@pkgs);
if (!$ret) {
    print "Error occured during server pkgs install:\n".join("\n",@out)."\n";
    croak("Couldn't install the required packages needed for OSCAR");
}
oscar_log_subsection("Successfully installed server non-core RPMs");

#
# NEST
# 
# Update the status of the non-core packages from installable to installed.
# Unless node_config_revs already has the record of node_id and configurations_id,
# do the following step. Otherwise, skip it.
# 1. Insert core packages into config_opkgs table for oscar_server.
#    add_config_opkgs is a shortcut to insert a record of configurations_id and package_id
#    e.g) add_config_opkgs [$configurations_id] [$package_id]
#

# 
# dikim commented out the LOCKING codes here because he believes
# that InnoDB type can handle the all the crossing locking issues.
# He does not want to remove these codes because he easily forgets
# what files have locking codes and where they are and he may need
# them in case innodb works as we expected.
# START LOCKING FOR NEST
my @tables = ("Node_Package_Status", "Nodes", "Packages");
my %options = ();
my @errors = ();
#locking("write", \%options, \@tables, \@errors);

# Have installed Server RPMs & did not croak, so mark packages.<pkg>installed 
# true. If clients (image) fail they will set it to false. (best effort for now)

oscar_log_subsection("Marking installed bit in ODA for server non-core RPMS");

my $requested = 8; # "Installed" flag for the Node_Package_Status"
die "$0:Failed to update the table Node_Package_Status"
    if(!update_node_package_status(\%options,$OSCAR_SERVER_NODE,\@opkgs,$requested,\@errors));


# UNLOCKING FOR NEST
#unlock(\%options, \@errors);

oscar_log_subsection("Done marking installed bits in ODA");


# And do the post install script

oscar_log_subsection("Running post_server_install scripts " .
		     "for server non-core packages");
foreach my $opkg (@opkgs_list) {
    # if($opkg ne "networking"){   # EF: why was this here?
                                   # if it doesn't work, fix it!  
    run_pkg_script($opkg,"post_server_install") 
        or croak("Failed running post_server_install for $opkg");
}
oscar_log_subsection("Successfully ran server non-core package ".
		     "post_server_install scripts");

# Additional housekeeping

#oscar_log_subsection("Updating /etc/profile");
#update_profile() or croak("Couldn't add path entries to /etc/profile");

oscar_log_subsection("Updating /etc/exports");
update_exports($ip,$netmask) 
    or croak("Couldn't add filesystem entries to /etc/exports");

oscar_log_subsection("Updating rsyncd.conf");
update_rsyncd_conf($ip,$netmask) or croak("Couldn't update rsyncd.conf file");

oscar_log_subsection("Refreshing services");
# Note: it is better to try to restart the service, "start" generates an error
# if the service is already running
!system("/etc/init.d/$nfs restart") or croak("Couldn't restart $nfs");
!system("exportfs -a") or croak("Couldn't refresh nfs exports");
!system("/etc/init.d/$sshd restart") or croak("Couldn't start $sshd");
my $os = OSCAR::OCA::OS_Detect::open();
my $binary_format = $os->{'pkg'};

# chkconfig is a RPM specific command, so we do not use it on Debian-like
# systems. Moreover, services are automatically added into rc2.d on Debian
if ($binary_format ne "deb") {
    !system("chkconfig sshd on") or croak("Failed to enable sshd");
    !system("chkconfig dhcpd on") or croak("Failed to enable dhcpd");
    !system("chkconfig portmap on") or croak("Failed to enable portmap");
    !system("chkconfig $nfs on") or croak("Failed to enable $nfs");
}

# Mandrake fixup: comment out hard-coded PATH line

oscar_log_subsection('Fixing root "dot" files');
foreach my $f (@rcfiles) {
    unmunge_pathenv($f);
}

# All done

oscar_log_subsection("Finished server_prep script");


sub verbose {
    print join " ", @_;
    print "\n";
}

sub update_hosts {
    my $ip = shift;
    if( ! $ip ) {   # mjc - 12/13/01
      croak( "Cannot update hosts without a valid ip.\n" );
    }
    verbose("Backing up /etc/hosts");
    copy("/etc/hosts","/etc/hosts.bak") or return undef;
    my $short;
    my $hostname = qx/hostname/;
    chomp($hostname);
    if($hostname =~ /\./) {
        $short = $hostname;
        $short =~ s/\..*//;
        if($short eq $hostname) {
            $short=undef;
        }
    }
    my @aliases=qw(oscar_server nfs_oscar pbs_oscar);
    open(IN,"</etc/hosts.bak") or return undef;
    open(OUT,">/etc/hosts") or return undef;
    verbose("Adding required entries to /etc/hosts");

    # mjc - 11/12/01 - start
    # - If the ip is in there, add the oscar aliases if they
    #   aren't on the list.
    # - If the ip is not in there, add the line.
    # - If you stumble across another line in the file with a different ip
    #   but the same hostname, pull it out of the file and add it back in
    #   only after we have added the line for this specified ip
    my @hostlines = ();
    my $line;
    my $found=0;

    while ($line=<IN>) {
      chomp $line; # mjc - 12/13/01
      if( $line =~ /^$ip\s+/ ) {
        $line =~ /^([^#]+)(#.*)?$/;
        my $body = $1;
        my $comment = $2||"";
        # Same ip, grab all the items on the line and add the oscar 
        # aliases if they aren't already there.
        $found = 1;
        my @items = split( /\s+/, $body );
        foreach my $alias (@aliases) {
                push @items, $alias unless grep {$alias eq $_} @items;
        }
        # print the modified line.
        print OUT join( " ", @items ), " $comment\n";
      } elsif( $line =~ /$hostname/ ) {  # mjc - 12/13/01
        # Not the same ip, but same hostname, save this line for now
        $hostlines[$#hostlines + 1] = $line;
      } else {
        # Not a line we're interested in changing
        print OUT $line."\n"; # mjc - 12/13/01
      }
    }
    # If there wasn't a line there, add it now.
    if(!$found) {
      print OUT "$ip $hostname $short ". join( " ", @aliases )."\n";
    }
    # Add back in any lines found with the same hostname but different ip
    foreach $line ( @hostlines ) {
      print OUT $line."\n"; # mjc - 12/13/01
    }
    # mjc - 11/12/01 - end

    close(OUT);
    close(IN);
}

#
# EF: it is a bad idea to add /usr/local/bin to root's path
#     Why is this needed?
#
#sub update_profile {
#    verbose("Backing up /etc/profile");
#    copy("/etc/profile","/etc/profile.bak") or return undef;
#    open(IN,"</etc/profile.bak") or return undef;
#    open(OUT,">/etc/profile") or return undef;
#    verbose("Adding path entries to /etc/profile");
#    while(<IN>) {
#        if(/^PATH=/) {
#            if(!m{\b/usr/local/bin\b}) {
#                $_ =~ s{(=\".*)\"}{$1:/usr/local/bin\"};
#            }
#            if(!m{\b/usr/local/sbin\b}) {
#                $_ =~ s{(=\".*)\"}{$1:/usr/local/sbin\"};
#            }
#        }
#        print OUT $_;
#    }
#    close(OUT);
#    close(IN);
#}

sub update_exports {
    my $ip = shift;
    my $netmask = shift;
    my $done=0;
    verbose("Backing up /etc/exports");
    copy("/etc/exports","/etc/exports.bak") or return undef;
    open(IN,"</etc/exports.bak") or return undef;
    open(OUT,">/etc/exports") or return undef;
    verbose("Checking for /home export");
    while (<IN>) {
	if (/^\/home/) {
		verbose("Found /home entry");
		$done=1;
		if (/$ip\/$netmask\(async,rw,no_root_squash\)/) {
			verbose("Existing /home entry ok, preserved");
			print OUT $_;
		} else {
			verbose("Existing /home modified");
			chomp;
			print OUT $_." $ip/$netmask(async,rw,no_root_squash)\n";
		}
	} else {
		print OUT $_;
	}
    }
    unless ($done) {
    	verbose("Adding /home export");
	print OUT "/home $ip/$netmask(async,rw,no_root_squash)\n";
    }
    close(OUT);
    close(IN);
}

sub update_rsyncd_conf {
    my ($ip, $netmask) = @_;
    my $done = 0;

    verbose("Backing up rsyncd header stub");
    my $basefile = "/etc/systemimager/rsync_stubs/10header";
    my $backup = $basefile . '~';
    copy($basefile,$backup) or return undef;

    open(IN,"<$backup") or return undef;
    open(OUT,">$basefile") or return undef;
    while(<IN>) {
	if (/hosts allow/) {
	    verbose("Found hosts allow stanza");
	    if(/hosts allow = $ip\/$netmask/) {
		$done = 1;
		verbose("Looks like we already have it!");
	    }
	}
	if(/\[scripts\]/ and !$done) {
	    verbose("Adding hosts allow to file");
	    print OUT "hosts allow = $ip/$netmask\n\n";
	}
	print OUT $_;
    }

    close(IN);
    close(OUT);
    unlink($backup);

    my $MKRSYNCD="/usr/sbin/si_mkrsyncd_conf";
    #EF# for compatibility with SystemImager 3.3 and below
    if (! -x $MKRSYNCD) {
	if (-x "/usr/sbin/mkrsyncd_conf") {
	    $MKRSYNCD="/usr/sbin/mkrsyncd_conf";
	} else {
	    verbose("Could not find [si_]mkrsyncd_conf script!");
	    return undef;
	}
    }
    !system($MKRSYNCD) or return undef;
    verbose("Updated rsyncd.conf file");

    return 1;
}

# tjn: 9/12/02, updated 7/31/03
# Used to fix MDK brain-dead defaults for root's .rc files.
# Input: filename (e.g., '/root/.bashrc').
sub unmunge_pathenv
{
    my $file = pop @_;

    print "Making any necessary PATH fixes to ($file)\n";
    copy($file, "$file.bak") or return;

    if (!open(IN, "<$file.bak")) {
        unlink("$file.bak");
        return;
    }
    if (!open(OUT,">$file")) {
        close(IN);
        unlink("$file.bak");
        return;
    }

    while (<IN>) {
        if (! /^\s*#/ ) {	#ignore comments

            # Bashrc fixups
            # RegEx: if processing bashrc file, check for line containing 
            #  PATH and not containing $PATH, remember value found ($1)
            if ($file =~ /bashrc/ && /(.*PATH=.*)/ &&  ! /\$PATH/) {
                $_ = "#OSCAR: Modified following line to contain all PATH\n";
                $_ .= "$1:" . '$PATH' . "\n";	
            }
            # Cshrc fixups
            # RegEx: if processing cshrc files, check for set|setenv line
            #  containing PATH and not containing ${PATH}, remember value
            #  found ($2) and stuff in front of it ($1)
            elsif ($file =~ /cshrc/ && 
                   /((set|setenv){0,1}\s+PATH\s*[=]{0,1}\s*)"(.*)"/ && 
                   ! /\$\{PATH\}/i) 
            {
                $_ = "#OSCAR: Modified following line to contain all PATH\n";
                $_ .= "$1\"$3:" . '${PATH}' . "\" \n";
            }
        }
        print OUT $_;
    }

    close(OUT);
    close(IN);
}

0;
