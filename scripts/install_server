#!/usr/bin/perl

# Copyright 2001-2002 International Business Machines
#                     Sean Dague <japh@us.ibm.com>
# Copyright (c) 2002-2006 The Trustees of Indiana University.  
#                    All rights reserved.
# Copyright (c) 2007 Oak Ridge National Laboratory.
#                    Geoffroy R. Vallee <valleegr@ornl.gov>
#                    All rights reserved.
# Copyright (c) 2008 Paul Greidanus <paul@majestik.org>
#                    All rights reserved
# $Id$
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This is a script which does everything that needs to be done for
#   the server to work for oscar.  It is long, but hopefully well structured.

# $Id$

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use POSIX; # gives us uname function
use File::Path;
use File::Copy;
use File::Basename;
use OSCAR::Network;
use OSCAR::Logger;
use OSCAR::Database;
use OSCAR::Package;
use OSCAR::PackMan;
use OSCAR::PackageSmart;
use OSCAR::SystemServices;
use Carp;
use Data::Dumper;
use OSCAR::OCA::OS_Detect;
use OSCAR::OCA::OS_Settings;
use OSCAR::Opkg;

## Begin distribution specific stuff ##

# Defaults
my $nfs = OSCAR::OCA::OS_Settings::getitem("nfs_package");
my $sshd = OSCAR::OCA::OS_Settings::getitem("ssh_daemon");
my $portmap = OSCAR::OCA::OS_Settings::getitem("portmap_package");

if (!defined $nfs || !defined $sshd || !defined $portmap) {
    die "ERROR: Impossible to get the basic system info ($nfs, $sshd, $portmap)";
}

my $OSCAR_SERVER_NODE = "oscar_server";
my $OSCAR_SERVER_GROUP = "oscar_server";

my $INTERFACE = shift or croak("No interface specified");

my $verbose = $ENV{OSCAR_VERBOSE};
if ($verbose && !$ENV{YUME_VERBOSE}) {
    $ENV{YUME_VERBOSE} = $verbose;
}

# my $oscar_pkg_pool = &OSCAR::PackagePath::oscar_repo_url();
# my $distro_pkg_pool = &OSCAR::PackagePath::distro_repo_url();

# List of root's .rc files (MDK PATH fixup)
my @rcfiles = qw(/root/.bashrc /root/.tcshrc /root/.cshrc);

# Sanity checking for /etc/hosts
oscar_log_subsection("Getting internal IP address");
my ($ip,$bcast,$netmask) = OSCAR::Network::interface2ip($INTERFACE) 
    or croak("Couldn't determine internal ip address");
oscar_log_subsection("Got: [Interface: $INTERFACE]");
oscar_log_subsection("Got: [IP: $ip]");
oscar_log_subsection("Got: [Broadcast: $bcast]");
oscar_log_subsection("Got: [Netmask: $netmask]");

oscar_log_subsection("Adding hosts to /etc/hosts");
if (OSCAR::Network::update_hosts($ip)) {
    die("ERROR: Couldn't add required host entries to /etc/hosts");
}


# Get a list of all non-core OSCAR packages
my $sel_group = OSCAR::Database::get_selected_group(undef, undef);
my @selected_opkgs = list_selected_packages();
my @core_opkgs = OSCAR::Opkg::get_list_core_opkgs();
my @opkgs;
foreach my $opkg (@selected_opkgs) {
    if (!OSCAR::Utils::is_element_in_array ($opkg, @core_opkgs)) {
        push (@opkgs, $opkg);
    }
}
oscar_log_subsection("Identified non-core packages: " . join(' ', @opkgs));


# Now install the pkgs that we found
# Note that we install only the server side, the API side is necessary for
# configuration of the OPKGs and therefore is installed at the beginning of
# the configuration phase.
oscar_log_subsection("Installing server non-core packages " .
                     "(core packages already installed)");
if (scalar (@opkgs) == 0) {
    warn "INFO: no OPKG(s) to install";
} else {
    if (OSCAR::Opkg::opkgs_install("server", @opkgs)) {
        die ("ERROR: Impossible to install " . join (", ", @opkgs));
    }
}
oscar_log_subsection("Successfully installed server non-core binary packages");

#
# NEST
# 
# Update the status of the non-core packages from installable to installed.
# Unless node_config_revs already has the record of node_id and configurations_id,
# do the following step. Otherwise, skip it.
# 1. Insert core packages into config_opkgs table for oscar_server.
#    add_config_opkgs is a shortcut to insert a record of configurations_id and package_id
#    e.g) add_config_opkgs [$configurations_id] [$package_id]
#

# 
# dikim commented out the LOCKING codes here because he believes
# that InnoDB type can handle the all the crossing locking issues.
# He does not want to remove these codes because he easily forgets
# what files have locking codes and where they are and he may need
# them in case innodb works as we expected.
# START LOCKING FOR NEST
my @tables = ("Node_Package_Status", "Nodes", "Packages");
my %options = ();
my @errors = ();
#locking("write", \%options, \@tables, \@errors);

# Have installed Server RPMs & did not croak, so mark packages.<pkg>installed 
# true. If clients (image) fail they will set it to false. (best effort for now)

oscar_log_subsection("Marking installed bit in ODA for server non-core ".
                     "packages");

my $requested = 8; # "Installed" flag for the Node_Package_Status"
die "$0:Failed to update the table Node_Package_Status"
    if(!OSCAR::Database::update_node_package_status(\%options,
                                   $OSCAR_SERVER_NODE,
                                   \@opkgs,
                                   $requested,
                                   \@errors,
                                   undef));


# UNLOCKING FOR NEST
#unlock(\%options, \@errors);

oscar_log_subsection("Done marking installed bits in ODA");


# And do the post install script

oscar_log_subsection("Running post_server_install scripts " .
		     "for server non-core packages");
foreach my $opkg (@opkgs) {
    OSCAR::Package::run_pkg_script($opkg, "post_server_install", 0, undef) 
        or die("ERROR: Failed running post_server_install for $opkg");
}
oscar_log_subsection("Successfully ran server non-core package ".
                     "post_server_install scripts");

# Additional housekeeping

#oscar_log_subsection("Updating /etc/profile");
#update_profile() or croak("Couldn't add path entries to /etc/profile");

oscar_log_subsection("Updating /etc/exports");
if (update_exports($ip,$netmask)) {
    die ("Couldn't add filesystem entries to /etc/exports");
}

oscar_log_subsection("Updating rsyncd.conf");
if (update_rsyncd_conf($ip,$netmask)) {
    croak("Couldn't update rsyncd.conf file ($!)");
}

oscar_log_subsection("Refreshing services");
# Note: it is better to try to restart the service, "start" generates an error
# if the service is already running
chomp(my $nfs_export = `which exportfs`);
!system("/etc/init.d/$nfs restart") or croak("ERROR: Couldn't restart $nfs");
if ($nfs_export) {
    !system("exportfs -a") or croak("Couldn't refresh nfs exports");
}
!system("$sshd restart") or croak("ERROR: Couldn't start .$sshd. ($?)");


my @services = ("$sshd", "dhcpd", "$portmap", "$nfs");
if (OSCAR::SystemServices::enable_system_services (@services)) {
    die "ERROR: Impossible to enable some system services";
}

# Mandrake fixup: comment out hard-coded PATH line

oscar_log_subsection('Fixing root "dot" files');
foreach my $f (@rcfiles) {
    unmunge_pathenv($f);
}

# All done

oscar_log_subsection("Finished server_prep script");


#
# EF: it is a bad idea to add /usr/local/bin to root's path
#     Why is this needed?
#
#sub update_profile {
#    verbose("Backing up /etc/profile");
#    copy("/etc/profile","/etc/profile.bak") or return undef;
#    open(IN,"</etc/profile.bak") or return undef;
#    open(OUT,">/etc/profile") or return undef;
#    verbose("Adding path entries to /etc/profile");
#    while(<IN>) {
#        if(/^PATH=/) {
#            if(!m{\b/usr/local/bin\b}) {
#                $_ =~ s{(=\".*)\"}{$1:/usr/local/bin\"};
#            }
#            if(!m{\b/usr/local/sbin\b}) {
#                $_ =~ s{(=\".*)\"}{$1:/usr/local/sbin\"};
#            }
#        }
#        print OUT $_;
#    }
#    close(OUT);
#    close(IN);
#}

# Return: -1 if error, 0 else.
sub update_exports ($$) {
    my $ip = shift;
    my $netmask = shift;

    if (!defined $ip || !defined $netmask) {
        carp "ERROR: Invalid parameters";
        return -1;
    }

    my $done=0;
    verbose("Backing up /etc/exports");
    copy("/etc/exports","/etc/exports.bak") or return -1;
    open(IN,"</etc/exports.bak") or return -1;
    open(OUT,">/etc/exports") or return -1;
    verbose("Checking for /home export");
    while (<IN>) {
	    if (/^\/home/) {
		    verbose("Found /home entry");
		    $done=1;
		    if (/$ip\/$netmask\(async,rw,no_root_squash\)/) {
			    verbose("Existing /home entry ok, preserved");
			    print OUT $_;
		    } else {
			    verbose("Existing /home modified");
			    chomp;
			    print OUT $_." $ip/$netmask(async,rw,no_root_squash)\n";
		    }
	    } else {
		    print OUT $_;
	    }
    }
    unless ($done) {
    	verbose("Adding /home export");
	    print OUT "/home $ip/$netmask(async,rw,no_root_squash)\n";
    }
    close(OUT);
    close(IN);

    return 0;
}

# return: -1 is error, 0 else.
sub update_rsyncd_conf ($$) {
    my ($ip, $netmask) = @_;
    my $done = 0;

    verbose("Backing up rsyncd header stub");
    my $basefile = "/etc/systemimager/rsync_stubs/10header";
    my $backup = $basefile . '~';
    copy($basefile,$backup) or return -1;

    open(IN,"<$backup") or return -1;
    open(OUT,">$basefile") or return -1;
    while(<IN>) {
	if (/hosts allow/) {
	    verbose("Found hosts allow stanza");
	    if(/hosts allow = $ip\/$netmask/) {
		$done = 1;
		verbose("Looks like we already have it!");
	    }
	}
	if(/\[scripts\]/ and !$done) {
	    verbose("Adding hosts allow to file");
	    print OUT "hosts allow = $ip/$netmask\n\n";
	}
	print OUT $_;
    }

    close(IN);
    close(OUT);
    unlink($backup);

    my $MKRSYNCD="/usr/sbin/si_mkrsyncd_conf";
    #EF# for compatibility with SystemImager 3.3 and below
    if (! -x $MKRSYNCD) {
	if (-x "/usr/sbin/mkrsyncd_conf") {
	    $MKRSYNCD="/usr/sbin/mkrsyncd_conf";
	} else {
	    verbose("Could not find [si_]mkrsyncd_conf script!");
	    return -1;
	}
    }
    !system($MKRSYNCD) or return -1;
    verbose("Updated rsyncd.conf file");

    return 0;
}

# tjn: 9/12/02, updated 7/31/03
# Used to fix MDK brain-dead defaults for root's .rc files.
# Input: filename (e.g., '/root/.bashrc').
sub unmunge_pathenv ($) {
    my $file = pop @_;

    print "Making any necessary PATH fixes to ($file)\n";
    copy($file, "$file.bak") or return;

    if (!open(IN, "<$file.bak")) {
        unlink("$file.bak");
        return;
    }
    if (!open(OUT,">$file")) {
        close(IN);
        unlink("$file.bak");
        return;
    }

    while (<IN>) {
        if (! /^\s*#/ ) {	#ignore comments

            # Bashrc fixups
            # RegEx: if processing bashrc file, check for line containing 
            #  PATH and not containing $PATH, remember value found ($1)
            if ($file =~ /bashrc/ && /(.*PATH=.*)/ &&  ! /\$PATH/) {
                $_ = "#OSCAR: Modified following line to contain all PATH\n";
                $_ .= "$1:" . '$PATH' . "\n";	
            }
            # Cshrc fixups
            # RegEx: if processing cshrc files, check for set|setenv line
            #  containing PATH and not containing ${PATH}, remember value
            #  found ($2) and stuff in front of it ($1)
            elsif ($file =~ /cshrc/ && 
                   /((set|setenv){0,1}\s+PATH\s*[=]{0,1}\s*)"(.*)"/ && 
                   ! /\$\{PATH\}/i) 
            {
                $_ = "#OSCAR: Modified following line to contain all PATH\n";
                $_ .= "$1\"$3:" . '${PATH}' . "\" \n";
            }
        }
        print OUT $_;
    }

    close(OUT);
    close(IN);
}

0;

__END__

=head1 NAME

install_server, a script which does everything that needs to be done for the
server to work for OSCAR.

=head1 SYNOPSIS

install_server

=head1 DESCRIPTION

install_server is a script which does everything that needs to be done for the
server to work for OSCAR.

=head1 OPTIONS

None.

=head1 AUTHOR

Sean Dague, International Business Machines <japh@us.ibm.com>
The Trustees of Indiana University

=head1 SEE ALSO

perl(1)

=cut
