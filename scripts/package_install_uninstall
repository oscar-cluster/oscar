#!/usr/bin/perl
# 
#  $Id$
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Copyright (c) 2003 Oak Ridge National Laboratory.
#                    All rights reserved.
# $Id$

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use Getopt::Long;
use OSCAR::Package;
use OSCAR::PackageInUn;
use OSCAR::Database;

Getopt::Long::Configure('no_ignore_case'); #case-sensitive

#cmdline processing stuff
my $client;
my $expert;
my $database;
my $help;
my $Image;
my $install;
my $list;
my $name;
my $range;
my $server;
my $testmode;
my $uninstall;
my $xml;

#others
my $type;
my $retval;

GetOptions('client' => \$client,
		'expert' => \$expert,
		'database' => \$database,
		'help' => \$help,
		'Image' => \$Image,
		'install=s' => \$install,
		'list=s' => \$list,
		'name=s' => \$name,
		'range=s' => \$range,
		'server' => \$server,
		'testmode' => \$testmode,
		'uninstall=s' => \$uninstall,
		'xml' => \$xml);


if ($help)
{
	help_message();
}
elsif ($list)
{
	if($server)
	{
		$type = "oscar_server";
	}
	else
	{
		$type = "oscar_clients";
	}
	list_rpms($list, $type);
}
elsif ($database)
{
	list_all_packages();
}
elsif ($xml)
{
	list_all_installable();
}
elsif ($uninstall)
{
	if($client)
	{
		if(!$range and !$name)
		{
			help_message();
			exit(0);
		}
		if(!$range or !$name)
		{
			help_message();
			exit(0);
		}
	}

	if($Image and !$name)
	{
		help_message();
		exit(0);
	}
		
	$retval = OSCAR::PackageInUn::package_uninstall($uninstall, $server, $client, $Image, $name, $range, $testmode);
	print "return code is $retval\n";

}
elsif ($install)
{
	if($client)
	{
		if(!$range and !$name)
		{
			help_message();
			exit(0);
		}
		if(!$range or !$name)
		{
			help_message();
			exit(0);
		}
	}

	if($Image and !$name)
	{
		help_message();
		exit(0);
	}
		
	$retval = OSCAR::PackageInUn::package_install($install, $server, $client, $Image, $name, $range, $testmode);
	print "return code is $retval\n";
}
else
{
	help_message();
}
 
sub help_message
{
	print "\nWARNING: you will shoot your foot off with this\ncommand if you do not understand what it does!\n\n";
	print "We strongly advise running the wizard!\n";
	print "\nUsage: package_install_uninstall CMD [ARGS] [TARGETS]\n\n";
	print "CMDS:\n";
	print " --install   -i  pkgname ARGS(S) TARGET(S) = installs an oscar\n"; 
	print "                                             package to the TARGET(S).\n";
	print " --uninstall -u  pkgname ARGS(S) TARGET(S) = uninstalls an oscar\n";
	print "                                             package to the TARGET(S).\n";
	print " --list      -l  pkgname TARGET            = lists rpms for a\n"; 
	print "                                             package, for a particular\n";
	print "                                             TARGET.\n";
	print " --database  -d                            = lists all packages\n";
	print "                                             (in database).\n";
	print " --xml       -x                            = lists all packages\n";
	print "                                             (on system, from xml).\n";
	print " --help      -h                            = this screen.\n";

	print "\n\n\nARGS:\n"; 
	print " --name      -n  imagename   = an imagename, not a fully qualified path.\n";
	print " --range     -r  range       = a range of nodes in valid C3 syntax.\n";
	print "                               note: this is not supported currently.\n";
	print " --testmode  -t              = puts the program into test mode\n";
	print "                               does not actually execute anything.\n";

	print "\n\nTARGETS:\n";

	print " --IMAGE     -I              = installs or uninstalls on image.\n";
	print "                               note: must provide an imagename.\n";
	print " --server    -s              = installs or uninstalls on the server(headnode).\n";
	print " --client    -c              = installs or uninstalls on compute nodes.\n";
	print "                               note: must provide an imagename and a range.\n";
	print "\n";
}

sub list_rpms()
{
	my ( $package_name,
	     $type ) = @_;

	my @rpm_list;
	my $rpm;

	@rpm_list = OSCAR::Database::database_rpmlist_for_package_and_group($package_name, $type);
	
	foreach $rpm (@rpm_list)
	{
		print $rpm, "\n";
	}
}

sub list_all_packages #from the database
{
	my $package;
	my @my_list;

	@my_list = OSCAR::Package::list_installable_packages("all");
	foreach $package (@my_list)
	{
		print $package, "\n";
	}
}

sub list_all_installable #from the xml
{
	my $package;
	my @my_list;

	@my_list = OSCAR::Package::list_installable_package_dirs("all");	
	foreach $package (@my_list)
	{
		print $package, "\n";
	}
}
