#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   Sean Dague <japh@us.ibm.com>

#   This is a script which does everything that needs to be done for
#   the server to work for oscar.  It is long, but hopefully well structured.

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use POSIX; # gives us uname function
use File::Path;
use File::Copy;
use File::Basename;
use OSCAR::Package;
use OSCAR::PackageBest;
use OSCAR::Network;
use Carp;
use Data::Dumper;

my $INTERFACE = shift or croak("No interface specified");

my $RPMPOOL = $OSCAR::Package::RPM_POOL;

# List of root's .rc files (MDK PATH fixup)
my @rcfiles = qw(/root/.bashrc /root/.tcshrc /root/.cshrc);

# Get a list of all non-core packages
my @packages = list_pkg("noncore");
my @rpms = ();
foreach my $package (@packages) {
    push @rpms, rpmlist($package,"server");
}


# Now install the rpms that we found
install_rpms(@rpms) or croak("Couldn't install the required packages needed for OSCAR");

# And do the post install script
foreach my $package (@packages) {
    run_pkg_script($package,"post_server_install") or croak("Failed running post_server_install for $package");
}

my ($ip,$bcast,$netmask) = interface2ip($INTERFACE) or croak("Couldn't determine internal ip address");
update_hosts($ip) or croak("Couldn't add required host entries to /etc/hosts");
update_profile() or croak("Couldn't add path entries to /etc/profile");
update_exports($ip,$netmask) or croak("Couldn't add filesystem entries to /etc/exports");
update_rsyncd_conf($ip,$netmask) or croak("Couldn't update rsyncd.conf file");

verbose("Refreshing services");
!system("service nfs start") or croak("Couldn't start nfs");
!system("exportfs -a") or croak("Couldn't refresh nfs exports");
!system("service sshd start") or croak("Couldn't start sshd");
!system("chkconfig --level 345 sshd on");
!system("chkconfig --level 345 dhcpd on");
!system("chkconfig --level 345 portmap on");
!system("chkconfig --level 345 nfs on");



# MDK fixup, comment out hard-coded PATH line
foreach my $f (@rcfiles) {
	unmunge_pathenv($f);
}


sub verbose {
    print join " ", @_;
    print "\n";
}

sub update_hosts {
    my $ip = shift;
    if( ! $ip ) {   # mjc - 12/13/01
      croak( "Cannot update hosts without a valid ip.\n" );
    }
    verbose("Backing up /etc/hosts");
    copy("/etc/hosts","/etc/hosts.bak") or return undef;
    my $short;
    my $hostname = qx/hostname/;
    chomp($hostname);
    if($hostname =~ /\./) {
        $short = $hostname;
        $short =~ s/\..*//;
        if($short eq $hostname) {
            $short=undef;
        }
    }
    my @aliases=qw(nfs_oscar pbs_oscar);
    open(IN,"</etc/hosts.bak") or return undef;
    open(OUT,">/etc/hosts") or return undef;
    verbose("Adding required entries to /etc/hosts");

    # mjc - 11/12/01 - start
    # - If the ip is in there, add the oscar aliases if they
    #   aren't on the list.
    # - If the ip is not in there, add the line.
    # - If you stumble across another line in the file with a different ip
    #   but the same hostname, pull it out of the file and add it back in
    #   only after we have added the line for this specified ip
    my @hostlines = ();
    my $line;
    my $found=0;

    while ($line=<IN>) {
      chomp $line; # mjc - 12/13/01
      if( $line =~ /^$ip/ ) { # mjc - 12/13/01
        # Same ip, grab all the items on the line and add the oscar 
        # aliases if they aren't already there.
        $found = 1;
        my @items = split( /\s+/, $line ); # mjc - 12/13/01
        foreach my $alias (@aliases) {
                unless (grep(/$alias/,@items)) {
                        push (@items,$alias);
                }
        }
        # print the modified line.
        print OUT join( " ", @items )."\n";
      } elsif( $line =~ /$hostname/ ) {  # mjc - 12/13/01
        # Not the same ip, but same hostname, save this line for now
        $hostlines[$#hostlines + 1] = $line;
      } else {
        # Not a line we're interested in changing
        print OUT $line."\n"; # mjc - 12/13/01
      }
    }
    # If there wasn't a line there, add it now.
    if(!$found) {
      print OUT "$ip $hostname $short ". join( " ", @aliases )."\n";
    }
    # Add back in any lines found with the same hostname but different ip
    foreach $line ( @hostlines ) {
      print OUT $line."\n"; # mjc - 12/13/01
    }
    # mjc - 11/12/01 - end

    close(OUT);
    close(IN);
}

sub update_profile {
    verbose("Backing up /etc/profile");
    copy("/etc/profile","/etc/profile.bak") or return undef;
    open(IN,"</etc/profile.bak") or return undef;
    open(OUT,">/etc/profile") or return undef;
    verbose("Adding path entries to /etc/profile");
    while(<IN>) {
        if(/^PATH=/) {
            if(!m{\b/usr/local/bin\b}) {
                $_ =~ s{(=\".*)\"}{$1:/usr/local/bin\"};
            }
            if(!m{\b/usr/local/sbin\b}) {
                $_ =~ s{(=\".*)\"}{$1:/usr/local/sbin\"};
            }
        }
        print OUT $_;
    }
    close(OUT);
    close(IN);
}

sub update_exports {
    my $ip = shift;
    my $netmask = shift;
    my $done=0;
    verbose("Backing up /etc/exports");
    copy("/etc/exports","/etc/exports.bak") or return undef;
    open(IN,"</etc/exports.bak") or return undef;
    open(OUT,">/etc/exports") or return undef;
    verbose("Checking for /home export");
    while (<IN>) {
	if (/^\/home/) {
		verbose("Found /home entry");
		$done=1;
		if (/$ip\/$netmask\(rw,no_root_squash\)/) {
			verbose("Existing /home entry ok, preserved");
			print OUT $_;
		} else {
			verbose("Existing /home modified");
			chomp;
			print OUT $_." $ip/$netmask(rw,no_root_squash)\n";
		}
	} else {
		print OUT $_;
	}
    }
    unless ($done) {
    	verbose("Adding /home export");
	print OUT "/home $ip/$netmask(rw,no_root_squash)\n";
    }
    close(OUT);
    close(IN);
}

sub update_rsyncd_conf {
    my ($ip, $netmask) = @_;
    my $done = 0;

    verbose("Backing up rsyncd header stub");
    my $basefile = "/etc/systemimager/rsync_stubs/10header";
    my $backup = $basefile . '~';
    copy($basefile,$backup) or return undef;

    open(IN,"<$backup") or return undef;
    open(OUT,">$basefile") or return undef;
    while(<IN>) {
	if (/hosts allow/) {
	    verbose("Found hosts allow stanza");
	    if(/hosts allow = $ip\/$netmask/) {
		$done = 1;
		verbose("Looks like we alread have it!");
	    }
	}
	if(/\[scripts\]/ and !$done) {
	    verbose("Adding hosts allow to file");
	    print OUT "hosts allow = $ip/$netmask\n\n";
	}
	print OUT $_;
    }

    close(IN);
    close(OUT);
    unlink($backup);

    !system("/usr/sbin/update_si_rsync") or return undef;
    verbose("Updated rsyncd.conf file");

    return 1;
}



# tjn: 9/12/02
# Used to fix MDK brain-dead defaults for root's .rc files.
# Input: filename (e.g.  '/root/.bashrc').
sub unmunge_pathenv
{
    my $file = pop @_;

    #verbose("Making any necessary fixes to ($file)");
    print "Making any necessary PATH fixes to ($file)\n";
    copy($file, "$file.bak") or return undef;

    open(IN, "<$file.bak") or return undef;
    open(OUT,">$file") or return undef;

    while(<IN>) {
        if(! /^\s*#/ ) {	#ignore comments

            # Bashrc fixups
            if( $file =~ /bashrc/ && /(.*PATH=.*)/ &&  ! /\$PATH/ ) {
                $_ = "#OSCAR: The following line commented out \n# $1\n";
            }
            # Cshrc fixups
            elsif( $file =~ /cshrc/ && 
                   /((set|setenv){0,1}\s+PATH.*)/i && !/\$\{PATH\}/i ) {
                $_ = "#OSCAR: The following line commented out \n# $1\n";
            }
        }
        print OUT $_;
    }

    close(OUT);
    close(IN);
}
