#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   Sean Dague <japh@us.ibm.com>

#   This is a script which does everything that needs to be done for
#   the server to work for oscar.  It is long, but hopefully well structured.

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use File::Path;
use File::Copy;
use File::Basename;
use OSCAR::Package;
use OSCAR::PackageBest;
use OSCAR::Network;
use Carp;
use Data::Dumper;

my $INTERFACE = shift or croak("No interface specified");

my $RPMPOOL = $OSCAR::Package::RPM_POOL;

# Get a list of all non-core packages
my @packages = list_pkg("noncore");
my @rpms = ();
foreach my $package (@packages) {
    push @rpms, rpmlist($package,"server");
}

# These extra packages we really need to get from 
# a distribution specific list somewhere

push @rpms, qw(
	nfs-utils
	openssh
	openssh-clients
	openssh-server
	xinetd
	tcpdump
	);

# Now install the rpms that we found
install_rpms(@rpms) or croak("Couldn't install the required packages needed for OSCAR");

# And do the post install script
foreach my $package (@packages) {
    run_pkg_script($package,"post_server_install") or croak("Failed running post_server_install for $package");
}

my ($ip,$bcast,$netmask) = interface2ip($INTERFACE) or croak("Couldn't determine internal ip address");
update_hosts($ip) or croak("Couldn't add required host entries to /etc/hosts");
update_profile() or croak("Couldn't add path entries to /etc/profile");
update_exports($ip,$netmask) or croak("Couldn't add filesystem entries to /etc/exports");

verbose("Refreshing services");
!system("service nfs start") or croak("Couldn't start nfs");
!system("exportfs -a") or croak("Couldn't refresh nfs exports");
!system("service sshd start") or croak("Couldn't start sshd");
!system("chkconfig --level 345 sshd on");
!system("chkconfig --level 345 dhcpd on");
!system("chkconfig --level 345 portmap on");
!system("chkconfig --level 345 nfs on");

sub verbose {
    print join " ", @_;
    print "\n";
}

sub update_hosts {
    my $ip = shift;
    if( ! $ip ) {   # mjc - 12/13/01
      croak( "Cannot update hosts without a valid ip.\n" );
    }
    verbose("Backing up /etc/hosts");
    copy("/etc/hosts","/etc/hosts.bak") or return undef;
    my $hostname = qx/hostname/;
    chomp($hostname);
    my @additional = ( $ip, $hostname );  # mjc - 11/12/01
    if($hostname =~ /\./) {
        my $short = $hostname;
        $short =~ s/\..*//;
        if($short ne $hostname) {
            $additional[$#additional + 1] = $short; # mjc - 11/12/01
        }
    }
    $additional[$#additional + 1] = "nfs_oscar"; # mjc - 11/12/01
    $additional[$#additional + 1] = "pbs_oscar"; # mjc - 11/12/01
    open(IN,"</etc/hosts.bak") or return undef;
    open(OUT,">/etc/hosts") or return undef;
    verbose("Adding required entries to /etc/hosts");

    # mjc - 11/12/01 - start
    # - If the ip is in there, snag all the items on the line and toss out
    #   any that we have already specified for the line.  Any which we
    #   didn't already have in the additional list, add to the list.  Then
    #   create a line to replace the one that was there.
    # - If the ip is not in there, add the line.
    # - If you stumble across another line in the file with a different ip
    #   but the same hostname, pull it out of the file and add it back in
    #   only after we have added the line for this specified ip
    my $found = 0;
    my @hostlines = ();
    my $line; # mjc - 12/13/01

    while(<IN>) {
      $line = $_; # mjc - 12/13/01
      chop $line; # mjc - 12/13/01
      if( $line =~ /^$ip/ ) { # mjc - 12/13/01
        # Same ip, grab all the items on the line and eliminate redundancies
        $found = 1;
        my @items = split( /\s+/, $line ); # mjc - 12/13/01
        my $item;
        foreach $item ( @items ) {
          if( ! &string_is_in( $item, \@additional ) ) {
            $additional[$#additional + 1] = $item;
          }
        }
        # Add all the items on this line to the file
        print OUT join( " ", @additional )."\n";
      } elsif( $line =~ /$hostname/ ) {  # mjc - 12/13/01
        # Not the same ip, but same hostname, save this line for now
        $hostlines[$#hostlines + 1] = $line;
      } else {
        # Not a line we're interested in changing
        print OUT $line."\n"; # mjc - 12/13/01
      }
    }
    if(!$found) {
      print OUT join( " ", @additional )."\n";
    }
    # Add back in any lines found with the same hostname but different ip
    foreach $line ( @hostlines ) {
      print OUT $line."\n"; # mjc - 12/13/01
    }
    # mjc - 11/12/01 - end

    close(OUT);
    close(IN);
}

# mjc - 11/12/01 - start
# Returns 1 if the specified string is equal to one of the strings in the
# array given by the reference, 0 otherwise.
sub string_is_in {
  my( $target, $itemList ) = @_;
  my( $item );
  foreach $item ( @{$itemList} ) {
    if( $target eq $item ) {
      return 1;
    }
  }
  return 0;
}
# mjc - 11/12/01 - end

sub update_profile {
    verbose("Backing up /etc/profile");
    copy("/etc/profile","/etc/profile.bak") or return undef;
    open(IN,"</etc/profile.bak") or return undef;
    open(OUT,">/etc/profile") or return undef;
    verbose("Adding path entries to /etc/profile");
    while(<IN>) {
        if(/^PATH=/) {
            if(!m{\b/usr/local/bin\b}) {
                $_ =~ s{(=\".*)\"}{$1:/usr/local/bin\"};
            }
            if(!m{\b/usr/local/sbin\b}) {
                $_ =~ s{(=\".*)\"}{$1:/usr/local/sbin\"};
            }
        }
        print OUT $_;
    }
    close(OUT);
    close(IN);
}

sub update_exports {
    my $ip = shift;
    my $netmask = shift;
    my $done=0;
    verbose("Backing up /etc/exports");
    copy("/etc/exports","/etc/exports.bak") or return undef;
    open(IN,"</etc/exports.bak") or return undef;
    open(OUT,">/etc/exports") or return undef;
    verbose("Checking for /home export");
    while (<IN>) {
	if (/^\/home/) {
		verbose("Found /home entry");
		$done=1;
		if (/$ip\/$netmask\(rw,no_root_squash\)/) {
			verbose("Existing /home entry ok, preserved");
			print OUT $_;
		} else {
			verbose("Existing /home modified");
			chomp;
			print OUT $_." $ip/$netmask(rw,no_root_squash)\n";
		}
	} else {
		print OUT $_;
	}
    }
    unless ($done) {
    	verbose("Adding /home export");
	print OUT "/home $ip/$netmask(rw,no_root_squash)\n";
    }
    close(OUT);
    close(IN);
}


