#!/usr/bin/perl

#   $Header: /home/user5/oscar-cvsroot/oscar/scripts/setup_pxe,v 1.11 2004/07/12 16:45:23 dnl Exp $

# Copyright (c) 2003, The Board of Trustees of the University of Illinois.
#                     All rights reserved.

#   Copyright (c) 2001 International Business Machines

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use vars qw($config);
use lib "/usr/lib/systeminstaller";
use lib "/usr/lib/systemconfig";
use SystemInstaller::Env;
use SystemInstaller::Log qw(start_verbose stop_verbose verbose);
use Carp;
use File::Copy;
use File::Path;
use AppConfig qw(:argcount);
use POSIX;

my $RPMPOOL = "/tftpboot/rpm";
my $ARCH=(uname)[4]; # Default architecture
$ARCH =~ s/i.86/i386/;

my $options=AppConfig->new(
		Help=>{ ARGCOUNT=> ARGCOUNT_NONE,
			ALIAS => "h"},
		arch=>{ ARGCOUNT=> ARGCOUNT_ONE,
                        ALIAS => "a"},
		verbose=> {ARGCOUNT=> ARGCOUNT_NONE,
			ALIAS => "v"},
		);

unless ($options->getopt()){
	&usage;
	exit 1;
}

unless (&check_args) {
	&usage;
	exit 1;
}

if ($options->Help){
	&usage;
	exit 0;
}

verbose("Restarting xinetd");
!system("/etc/init.d/xinetd restart") or croak("Couldn't restart xinetd");
verbose("Enabling tftp");
!system("chkconfig tftp on") or croak("Couldn't enable tftp");

verbose("Creating directories.");
mkpath("/tftpboot/pxelinux.cfg");
unless (-d "/tftpboot/pxelinux.cfg") {
	 croak("Unable to create /tftpboot directories.");
}

my $archdir = "$ARCH-boot";

if($ARCH eq "i386") {
    verbose("Getting pxelinux.0.");
    copy("/usr/lib/syslinux/pxelinux.0", "/tftpboot/pxelinux.0") or 
      croak("Unable to copy \"pxelinux.0\" file to /tftpboot.");
    
    verbose("Copying default pxelinux.cfg file");
    copy("/etc/systemimager/pxelinux.cfg/syslinux.cfg", "/tftpboot/pxelinux.cfg/default") or 
      croak("Unable to copy \"default\" file to /tftpboot/pxelinux.cfg.");

    verbose("Copying SystemImager kernel & ramdisk");
    copy("/etc/systemimager/pxelinux.cfg/message.txt", "/tftpboot/pxelinux.cfg/") or 
      croak("Unable to copy \"message.txt\" file to /tftpboot/pxelinux.cfg.");
} elsif ($ARCH eq "ia64") {
    verbose("Copying elilo.efi to /tftpboot");
    copy("/boot/efi/elilo.efi","/tftpboot") or
      copy("/boot/efi/EFI/redhat/elilo.efi","/tftpboot") or
      croak("Unable to copy \"elilo.efi\" to /tftpboot");

    verbose("Linking elilo.efi to pxelinux.0");
    symlink("elilo.efi","/tftpboot/pxelinux.0");

    verbose("Writing out \"elilo.conf\" file");
    open(OUT,">/tftpboot/elilo.conf") or croak("Couldn't open /tftpboot/elilo.conf for writing");
    print OUT <<'END';
prompt
timeout=50
default=sisboot

image=kernel
        label=sisboot
        initrd=initrd.img
        read-only
        root=/dev/ram

END
  
} else {
    croak("$ARCH is not a known architecture");
}

copy("/usr/share/systemimager/boot/$ARCH/standard/kernel", "/tftpboot/") or 
  croak("Unable to copy kernel file to /tftpboot.");
    
copy("/usr/share/systemimager/boot/$ARCH/standard/initrd.img", "/tftpboot/") or 
  croak("Unable to copy ramdisk file to /tftpboot.");

exit 0; 

sub check_args {

	# Get verbose option
	if ($options->verbose ||  $config->verbose){
		start_verbose;
	}
	verbose("Checking arguments.");
	if ($options->arch){
                $ARCH=$options->arch;
        }
        if (($ARCH ne "i386")&&($ARCH ne "ia64")) {
                carp("i386 and ia64 are the only valid architectures.");
                return 0;
        }
	return 1;

}# check_args

sub usage {
    my $progname = $0;
    if ($progname =~ m/(.+\/)(\w+)/) {
	$progname = $2;
    }
    print <<USAGE;
usage: $progname <options>

  options
    --arch <architecture>        the filename to write the output to
    -v, --verbose           massive verbose output


USAGE
} #usage

__END__

=head1 NAME

command shell to setup pxe network booting

=head1 SYNOPSIS

  setup_pxe --arch i386

=head1 DESCRIPTION

The setup_pxe command is used to configure a server
to respond properly to pxelinux boot requests.

=head2 Syntax

setup_pxe [options]

=head2 Options

Recognized options include:

=over 4

=item --arch <architecture>

The architecture to setup kernel. The default is the 
current machine's architecture.

=item -v, --verbose

Lots of trace and debug output.

=back

=head1 AUTHOR

Michael Chase-Salerno, mchasal@users.sf.net

=head1 SEE ALSO

perl(1)

=cut
