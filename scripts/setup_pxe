#!/usr/bin/perl

#   $Id$

# Copyright (c) 2005,2006 Bernard Li <bli@bcgsc.ca>

# Copyright (c) 2003, The Board of Trustees of the University of Illinois.
#                     All rights reserved.

#   Copyright (c) 2001 International Business Machines

# Copyright (c) 2007 The Trustees of Indiana University.  
#                    All rights reserved.

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use vars qw($config);
use lib "/usr/lib/systeminstaller";
use lib "/usr/lib/systemconfig";
use SystemInstaller::Env;
use SystemInstaller::Log qw(start_verbose stop_verbose verbose);
use Carp;
use File::Copy;
use File::Path;
use AppConfig qw(:argcount);
use POSIX;
use lib "$ENV{OSCAR_HOME}/lib";

use OSCAR::Database;
use OSCAR::OCA::OS_Detect;

my $RPMPOOL = "/tftpboot/rpm";
my $ARCH=(uname)[4]; # Default architecture
$ARCH =~ s/i.86/i386/;
my $install_mode = get_install_mode();
my $os = OSCAR::OCA::OS_Detect::open();
my $is_suse = 1 if ($os->{'distro'} eq "suse");

my $options=AppConfig->new(
		Help=>{ ARGCOUNT=> ARGCOUNT_NONE,
			ALIAS => "h"},
		arch=>{ ARGCOUNT=> ARGCOUNT_ONE,
                        ALIAS => "a"},
		uyok=>{ ARGCOUNT=> ARGCOUNT_NONE,
                        ALIAS => "u"},
		verbose=> {ARGCOUNT=> ARGCOUNT_NONE,
			ALIAS => "v"},
		);

unless ($options->getopt()){
	&usage;
	exit 1;
}

unless (&check_args) {
	&usage;
	exit 1;
}

if ($options->Help){
	&usage;
	exit 0;
}

# Mandrake's tftp-server expects the tftpboot directory to be under /var/lib/,
# but OSCAR's standard location is simply under /.
# Most code by TJN, with mods by BLI
if (-e "/etc/mandrake-release") {        
	my $root_tftp = "/tftpboot";
        my $var_tftp = "/var/lib/tftpboot";

        croak "Error: $! - $root_tftp\n" if( not -e $root_tftp );

        my $symlinks_exist = eval { symlink("", ""); 1 };

        if( $symlinks_exist && ! $@ ) {
		if( ( not -l $var_tftp ) && ( -d $var_tftp ) ) {
			# if $var_tftp is a directory and not a link, remove
			verbose("Removing directory $var_tftp.");
			rmdir($var_tftp);
		}
                if( not -e $var_tftp ) {
                        symlink($root_tftp, $var_tftp) or croak "Error: $!\n";
                        verbose("Created symlink: $var_tftp => $root_tftp\n") if($?
 == 0);
                }
        } else {
                  carp "Symlinks not supportted on this system! - $@\n";
        }

}

# SUSE's atftpd is not part of xinetd
if ($is_suse) {
    verbose("Restarting atftpd");
    !system("/etc/init.d/atftpd restart") or croak("Failed to restart atftpd");
    verbose("Enabling atftpd");
    !system("chkconfig atftpd on") or croak("Failed to enable atftpd");
} else {
    verbose("Restarting xinetd");
    !system("/etc/init.d/xinetd restart") or croak("Couldn't restart xinetd");
    verbose("Enabling tftp");
    if ($os->{pkg} ne "deb") {
        !system("chkconfig tftp on") or croak("Couldn't enable tftp");
    } else {
        # We use this specific command on Debian because it seems that the
        # default script for the creation of a daemon is not working. I did
        # not really investigate the problem
        # The command i initially wanted to use was: 
        #   !system("update-rc.d atftpd defaults") 
        !system("sudo /usr/sbin/atftpd --daemon /tftpboot/")
            or croak("Couldn't enable tftp");
    }
}

verbose("Creating directories.");
mkpath("/tftpboot/pxelinux.cfg");
unless (-d "/tftpboot/pxelinux.cfg") {
	 croak("Unable to create /tftpboot directories.");
}

my $archdir = "$ARCH-boot";

my $monitor_port = 8181;

# Need to get the IP address of headnode (oscar_server)
my @result = ();
my $node = "oscar_server";
my $iface = get_headnode_iface();
my %db_options = ();
my @db_errors = ();

get_nics_with_name_node($iface, $node, \@result, \%db_options, \@db_errors);

my $node_ref = pop @result;
my $ip = $$node_ref{ip};
my $pxelinux_dir = "/usr/lib/syslinux"; # default directory containing pxelinux.0

if(($ARCH eq "i386") || ($ARCH eq "x86_64")) {
# Mandriva is now shipping the equivalent of pxelinux.0 as linux.0, installed
# by the package pxelinux in a different path. We differenciate, here, the
# first steps of this section for Mandriva distros and the others.
    if (-e "/etc/mandriva-release") {
	verbose("Getting linux.0.");
	copy("/var/lib/tftpboot/X86PC/linux/linux.0", "/tftpboot/pxelinux.0") or
	croak("Unable to copy \"linux.0\" file to /tftpboot.");
    } else {
	$pxelinux_dir = "/usr/share/syslinux" if ($is_suse);
	verbose("Getting pxelinux.0.");
        copy("$pxelinux_dir/pxelinux.0", "/tftpboot/pxelinux.0") or 
        croak("Unable to copy \"pxelinux.0\" file to /tftpboot.");
    }
    
    verbose("Copying default pxelinux.cfg file");
    copy("/etc/systemimager/pxelinux.cfg/syslinux.cfg", "/tftpboot/pxelinux.cfg/default") or 
      croak("Unable to copy \"default\" file to /tftpboot/pxelinux.cfg.");

    # SystemImager supports putting local configuration in floppy disk, however, OSCAR does not
    # support this and when installing on systems without floppy disk drives, it would try forever to
    # probe for the drive.  The SKIP_LOCAL_CFG prevents this from happening.
    verbose("Updating /tftpboot/pxelinux.cfg/default file to skip local.cfg and support si_monitor.");
    if ( system("sed 's|root=/dev/ram|root=/dev/ram SKIP_LOCAL_CFG=y MONITOR_SERVER=$ip MONITOR_CONSOLE=yes|g' /tftpboot/pxelinux.cfg/default > /tftpboot/pxelinux.cfg/default.new && mv /tftpboot/pxelinux.cfg/default.new /tftpboot/pxelinux.cfg/default") ) {
      croak("Unable to update /tftpboot/pxelinux.cfg/default file to skip local.cfg and support si_monitor.");
    }

    if ($install_mode eq "systemimager-bt") {
      verbose("Updating /tftpboot/pxelinux.cfg/default to support $install_mode.");
      if ( system("sed 's|root=/dev/ram|root=/dev/ram BITTORRENT=y|g' /tftpboot/pxelinux.cfg/default > /tftpboot/pxelinux.cfg/default.new && mv /tftpboot/pxelinux.cfg/default.new /tftpboot/pxelinux.cfg/default") ) {
        croak("Unable to update /tftpboot/pxelinux.cfg/default to support $install_mode.");
      } 
    } else {
      if ( system("sed 's| BITTORRENT=y||g' /tftpboot/pxelinux.cfg/default > /tftpboot/pxelinux.cfg/default.new && mv /tftpboot/pxelinux.cfg/default.new /tftpboot/pxelinux.cfg/default") ) {
        croak("Unable to remove BITTORRENT kernel append from /tftpboot/pxelinux.cfg/default.");
      }
    }

    # on x86_64 disable non-executable mappings
    # (otherwise grubs older than FC4 will segfault)
    if ($ARCH eq "x86_64") {
	verbose("Disabling nonexec mappings on x86_64");
	if ( system("sed 's/ram\ MONITOR/ram noexec=off MONITOR/g' /tftpboot/pxelinux.cfg/default >/tftpboot/pxelinux.cfg/default.new && mv /tftpboot/pxelinux.cfg/default.new /tftpboot/pxelinux.cfg/default") ) {
	    croak("Unable to modify /tftpboot/pxelinux.cfg/default.");
	}
    }

    verbose("Copying SystemImager's message.txt to /tftpboot/pxelinux.cfg");
    copy("/etc/systemimager/pxelinux.cfg/message.txt", "/tftpboot/pxelinux.cfg/") or 
      croak("Unable to copy \"message.txt\" file to /tftpboot/pxelinux.cfg.");
} elsif ($ARCH eq "ia64") {
    verbose("Copying elilo.efi to /tftpboot");
    copy("/boot/efi/elilo.efi","/tftpboot") or
      copy("/boot/efi/EFI/redhat/elilo.efi","/tftpboot") or
      croak("Unable to copy \"elilo.efi\" to /tftpboot");

    verbose("Writing out \"elilo.conf\" file with si_monitor support");
    open(OUT,">/tftpboot/elilo.conf") or croak("Couldn't open /tftpboot/elilo.conf for writing");
    print OUT "prompt\n";
    print OUT "timeout=50\n";
    print OUT "default=sisboot\n";
    print OUT "\n";
    print OUT "image=kernel\n";
    print OUT "\tlabel=sisboot\n";
    print OUT "\tinitrd=initrd.img\n";
    print OUT "\tread-only\n";
    print OUT "\tappend=\"root=/dev/ram MONITOR_SERVER=$ip MONITOR_CONSOLE=yes\"\n";

    # TODO: systemimager-bt support for IA64
  
} else {
    croak("$ARCH is not a known architecture");
}

my $bootpackage = "standard";
my $kernel = "/usr/share/systemimager/boot/$ARCH/$bootpackage/kernel";
my $ramdisk = "/usr/share/systemimager/boot/$ARCH/$bootpackage/initrd.img";
my $tftp_kernel = "install-kernel-$ARCH";
my $tftp_ramdisk = "install-initrd-$ARCH.img";

if ($options->uyok) {
  $bootpackage ="UYOK";
  $kernel = "/etc/systemimager/boot/kernel";
  $ramdisk = "/etc/systemimager/boot/initrd.img";
  $tftp_kernel = "install-kernel-$os->{'compat_distro'}-$os->{'compat_distrover'}-$ARCH";
  $tftp_ramdisk = "install-initrd-$os->{'compat_distro'}-$os->{'compat_distrover'}-$ARCH.img";

  verbose("Updating /tftpboot/pxelinux.cfg/default file to support UYOK ramdisk size.");
  if ( system("sed 's|root=/dev/ram|root=/dev/ram ramdisk_size=80000|g' /tftpboot/pxelinux.cfg/default > /tftpboot/pxelinux.cfg/default.new && mv /tftpboot/pxelinux.cfg/default.new /tftpboot/pxelinux.cfg/default") ) {
    croak("Unable to update /tftpboot/pxelinux.cfg/default file to support UYOK ramdisk size.");
  }
}

verbose("Copying SystemImager $bootpackage boot kernel and initrd.img to /tftpboot");
unlink "/tftpboot/kernel", "/tftpboot/initrd.img";
copy("$kernel", "/tftpboot/$tftp_kernel") or 
  croak("Unable to copy $bootpackage boot kernel file to /tftpboot.");
copy("$ramdisk", "/tftpboot/$tftp_ramdisk") or
  croak("Unable to copy $bootpackage initrd.img file to /tftpboot.");

verbose("Symlinking SystemImager $bootpackage boot kernel and initrd.img to /tftpboot/kernel and /tftpboot/initrd.img respectively");
symlink("/tftpboot/$tftp_kernel", "/tftpboot/kernel") or
  croak("Unable to symlink $bootpackage boot kernel file to /tftpboot.");
symlink("/tftpboot/$tftp_ramdisk", "/tftpboot/initrd.img") or 
  croak("Unable to symlink $bootpackage initrd.img file to /tftpboot.");

exit 0; 

sub check_args {

	# Get verbose option
	if ($options->verbose ||  $config->verbose){
		start_verbose;
	}
	verbose("Checking arguments.");
	if ($options->arch){
                $ARCH=$options->arch;
        }
        if (($ARCH ne "i386")&&($ARCH ne "ia64")&&($ARCH ne "x86_64")&&($ARCH ne "ppc64")) {
                carp("i386, x86_64 and ia64 are the only valid architectures.");
                return 0;
        }
	return 1;

}# check_args

sub usage {
    my $progname = $0;
    if ($progname =~ m/(.+\/)(\w+)/) {
	$progname = $2;
    }
    print <<USAGE;
usage: $progname <options>

  options
    --arch <architecture>   the filename to write the output to
    -u, --uyok              use SystemImager's UYOK kernel/ramdisk instead
                            of the standard kernel/ramdisk
    -v, --verbose           massive verbose output


USAGE
} #usage

__END__

=head1 NAME

command shell to setup pxe network booting

=head1 SYNOPSIS

  setup_pxe --arch i386

=head1 DESCRIPTION

The setup_pxe command is used to configure a server
to respond properly to pxelinux boot requests.

=head2 Syntax

setup_pxe [options]

=head2 Options

Recognized options include:

=over 4

=item --arch <architecture>

The architecture to setup kernel. The default is the 
current machine's architecture.

=item --uyok

Since SystemImager 3.6.x, there is a new functionality called
UseYourOwnKernel (UYOK) which allows the usage of the running
OS' kernel and a ramdisk generated on the fly to boot client
nodes to be imaged using SystemImager.  With this option, a
UYOK kernel and ramdisk will be used to setup PXE boot on your
headnode.

=item -v, --verbose

Lots of trace and debug output.

=back

=head1 AUTHOR

Michael Chase-Salerno, mchasal@users.sf.net

=head1 SEE ALSO

perl(1)

=cut
