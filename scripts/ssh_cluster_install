#!/bin/sh
#
# ssh/sshd installation script for a linux cluster.
#
# Author: Neil Gorsuch ngorsuch@ncsa.uiuc.edu

# This script is meant to be run on a cluster server.  It installs
# openssh/sshd/scp on the server if required, and configures ssh/sshd on
# the server and it's clients so that any user (including root) can
# transparently ssh or scp from this host or any of the clients to this
# host or any of the clients. It can be run as often as needed, before
# or after adding or deleting clients.  All host keys among the clients
# are set the same as on this server.  All root user keys among the
# clients are set the same as on this server. It is assumed that the
# clients that have not been set up yet have a ~root/.rhosts file
# already set up to allow the server to execute commands as root using
# rsh. 

#--------------------- begin configuration section --------------------

# see if they specified a directory, if so, instead of looping through
# rcp copies into the client machines over the network, it will do a
# single copy into a client "image" tree.

BASES=""
if [ "`echo $* | wc -w`" -gt 0 ] ; then
    for base in $* ; do 
	if [ -z "$base" -o ! -d "$base" ] ; then
	    echo $0 parameter error - ignoring non-directory parameter $base
	else
	    BASES="$BASES $base"
	fi
    done
    if [ `echo $BASES | wc -w` -eq 0 ] ; then
	echo $0 exiting - directory parameters specified but none are directories
    fi
fi

# source directory for RPMs on the server
RPMSDIR=../oscarRPM

# beginning names of rpm package files to install
RPMLIST="openssl openssh openssh-clients openssh-server"

# the directory where ssh/sshd puts host configuration data
SSHCFGDIR=/etc/ssh

# temporary files prefix
TEMP="/tmp/`echo $0 | sed 's,^.*/,,g'`.$$."

# server name
SERVER=lui_oscar

# client names - changed by MJB on 12/19/2000
for file in `ls /tftpboot/lim/*.client`
do
  name=`cat $file | awk -F: '{print $7;}'`
  CLIENTS="$CLIENTS $name"
done
SERVER_AND_CLIENTS="$SERVER $CLIENTS"
echo server: $SERVER
echo client machines list: $CLIENTS
echo server and client machines list: $SERVER_AND_CLIENTS
if [ ! -z "$BASES" ] ; then
    echo client macnine image bases list: $BASES
fi

#------------------------ end configuration section --------------------

# make sure we get rid of temprary files if we are aborted
trap "echo rm -rf $TEMP\* ; rm -rf $TEMP* ; exit 1" 1 2 3 4 5 6 7 8 11 14 15

# install ssh/sshd/scp on the server if needed, we use --replacefiles 
# and --replacepkgs for now because of an incompatibility with the rpmlib
for rpm in $RPMLIST ; do 
    echo checking for installation of rpm $rpm ...
    if ! rpm -q $rpm >/dev/null 2>&1 ; then
        cd $RPMSDIR || (echo no rpm directory $RPMSDIR ; exit 1)
        num="`ls -1 | egrep ^$rpm\-\[0-9\] | wc -w`"
        if [ $num -lt 1 ] ; then
            echo cannot find rpm file $rpm\* ; exit 1
        elif [ $num -gt 1 ] ; then
            echo too many rpm files match $rpm\* ; exit 1
        fi
        echo rpm -i --replacefiles --replacepkgs --nodeps $rpm-[0-9]*
        if ! rpm -i --replacefiles --replacepkgs --nodeps $rpm-[0-9]* ; then
            echo rpm installation failed for rpm file $rpm*; exit 1
        fi
    fi
done

# make sure we have various programs
echo ; echo checking for needed programs ...
programs="which rpm expect rsh ssh"
for program in $programs ; do
    if ! which $program >/dev/null 2>&1 ; then
	echo missing program $program
	exit 1
    fi
done

# create the server ssh configuration directory if needed
dir=$SSHCFGDIR
if [ ! -d $dir ] ; then
    echo mkdir -p $dir
    mkdir -p $dir || exit 1
    echo 755 chmod $dir
    chmod 755 $dir
fi

# make the server host keys if required
file=$SSHCFGDIR/ssh_host_key
echo ; echo checking for host key file $file ...
if [ ! -r $file ] ; then
    echo making host key file $file ...
    echo ssh-keygen -b 1024 -f $file -N ""
    ssh-keygen -b 1024 -f $file -N "" || exit 1
fi
file=$SSHCFGDIR/ssh_host_dsa_key
echo checking for host key file $file ...
if [ ! -r $file ] ; then
    echo ssh-keygen -d -f $file -N ""
    ssh-keygen -d -f $file -N "" || exit 1
fi

# make sure that the server sshd configuration file has
# some important authentication methods turned on

cd $SSHCFGDIR || ( echo cannot cd to $SSHCFGDIR ; exit 1 )

file=ssh_config
echo ; echo checking configuration file $file ...

for wantedyes in ; do
    if [ yes`grep "^[[:space:]]*$wantedyes[[:space:]]" $file | awk '{print $2}' | tr A-Z a-z | tail -1` != "yesyes" ] ; then
	echo turning on $wantedyes parameter in configuration file $file ...
	if [ ! -r $file.pre_ssh_install ] ; then
	    if [ -r $file ] ; then
		echo cp -p $file $file.pre_ssh_install
		cp -p $file $file.pre_ssh_install || exit 1
	    fi
	fi
        if grep "^[[:space:]]*$wantedyes[[:space:]]" $file 2>/dev/null ; then
	    echo ... by modifying existing line\(s\)
	    sed "s,$wantedyes.*\$,$wantedyes yes,g" <$file >$file.tmp
	    mv $file.tmp $file || exit 1
	else
	    echo ... by adding a line
	    echo "$wantedyes yes" >> $file || exit 1
        fi
    fi
done
for wantedno in ForwardX11 StrictHostKeyChecking UsePrivilegedPort ; do
    if [ no`grep "^[[:space:]]*$wantedno[[:space:]]" $file | awk '{print $2}' | tr A-Z a-z | tail -1` != "nono" ] ; then
	echo turning off $wantedno parameter in configuration file $file ...
	if [ ! -r $file.pre_ssh_install ] ; then
	    if [ -r $file ] ; then
		echo cp -p $file $file.pre_ssh_install
		cp -p $file $file.pre_ssh_install || exit 1
	    fi
	fi
        if grep "^[[:space:]]*$wantedno[[:space:]]" $file 2>/dev/null ; then
	    echo ... by modifying existing line\(s\)
	    sed "s,$wantedno.*\$,$wantedno no,g" <$file >$file.tmp
	    mv $file.tmp $file || exit 1
	else
	    echo ... by adding a line
	    echo "$wantedno no" >> $file || exit 1
        fi
    fi
done

file=sshd_config
echo ; echo checking configuration file $file ...

for wantedyes in IgnoreRhosts X11Forwarding RhostsRSAAuthentication RSAAuthentication ; do
    if [ yes`grep "^[[:space:]]*$wantedyes[[:space:]]" $file | awk '{print $2}' | tr A-Z a-z | tail -1` != "yesyes" ] ; then
	echo turning on $wantedyes parameter in configuration file $file ...
	if [ ! -r $file.pre_ssh_install ] ; then
	    if [ -r $file ] ; then
		echo cp -p $file $file.pre_ssh_install
		cp -p $file $file.pre_ssh_install || exit 1
	    fi
	fi
        if grep "^[[:space:]]*$wantedyes[[:space:]]" $file 2>/dev/null ; then
	    echo ... by modifying existing line\(s\)
	    sed "s,$wantedyes.*\$,$wantedyes yes,g" <$file >$file.tmp
	    mv $file.tmp $file || exit 1
	else
	    echo ... by adding a line
	    echo "$wantedyes yes" >> $file || exit 1
        fi
    fi
done
for wantedno in RhostsAuthentication ; do
    if [ no`grep "^[[:space:]]*$wantedno[[:space:]]" $file | awk '{print $2}' | tr A-Z a-z | tail -1` != "nono" ] ; then
	echo turning off $wantedno parameter in configuration file $file ...
	if [ ! -r $file.pre_ssh_install ] ; then
	    if [ -r $file ] ; then
		echo cp -p $file $file.pre_ssh_install
		cp -p $file $file.pre_ssh_install || exit 1
	    fi
	fi
        if grep "^[[:space:]]*$wantedno[[:space:]]" $file 2>/dev/null ; then
	    echo ... by modifying existing line\(s\)
	    sed "s,$wantedno.*\$,$wantedno no,g" <$file >$file.tmp
	    mv $file.tmp $file || exit 1
	else
	    echo ... by adding a line
	    echo "$wantedno no" >> $file || exit 1
        fi
    fi
done

# make sure that ssh/sshd starts at the correct run levels on the server
echo ; echo setting ssh/sshd run levels ...
echo /sbin/chkconfig --add sshd
/sbin/chkconfig --add sshd
echo /sbin/chkconfig sshd on
/sbin/chkconfig sshd on

# set up each user including root so that they can log into the
# entire cluster from anywhere in the cluster

echo finding users ...
users=""
for user in `awk -F: '{print $1}' /etc/passwd` ; do
    userhome=`egrep "^$user\:" /etc/passwd | awk -F: '{print $6}' | tail -1`
    usershell=`egrep "^$user\:" /etc/passwd | awk -F: '{print $7}' | tail -1`
    # echo checking user $user with home directory $userhome and shell $usershell
    if [ "$user" != "" \
	-a "$userhome" != "" \
	-a -d "$userhome" \
	-a "$usershell" != "" \
	-a -x "$usershell" \
	-a "$usershell" != "/bin/false" \
	-a "$user" != "halt" \
	-a "$user" != "sync" \
	-a "$user" != "shutdown" \
	-a "$user" != "mailnull" ] ; then
	echo ... found user $user
	users="$users $user"
    fi
done
for user in $users ; do
    echo ; echo setting up user $user on this machine
    home=`egrep "^$user\:" /etc/passwd | awk -F: '{print $6}' | tail -1`
    if [ `echo $home | wc -w` -ne 1 ] ; then
	echo cannot determine home directory of user $user
    else
	echo the home directory for user $user is $home
	echo cd $home
	if ! cd $home ; then
	    echo cannot cd to home directory $home
	else

	    file=$home/.ssh/id_dsa
	    type=dsa
	    if [ ! -e $file ] ; then
		echo su - $user --command=\"ssh-keygen -t $type -N \'\' -f $file\"
		su - $user --command="ssh-keygen -t $type -N '' -f $file"
	    fi

	    file=$home/.ssh/identity
	    type=rsa1
	    if [ ! -e $file ] ; then
		echo su - $user --command=\"ssh-keygen -t $type -N \'\' -f $file\"
		su - $user --command="ssh-keygen -t $type -N '' -f $file"
	    fi

	    file=$home/.ssh/id_rsa
	    type=rsa
	    if [ ! -e $file ] ; then
		echo su - $user --command=\"ssh-keygen -t $type -N \'\' -f $file\"
		su - $user --command="ssh-keygen -t $type -N '' -f $file"
	    fi

	    id="`cat $home/.ssh/id_dsa.pub`"
	    file=$home/.ssh/authorized_keys2
	    if ! grep "^$id\$" $file >/dev/null 2>&1 ; then
		echo su - $user --command=\"echo $id \>\> $file\"
		su - $user --command="echo $id >> $file"
	    fi

	    id="`cat $home/.ssh/identity.pub`"
	    file=$home/.ssh/authorized_keys
	    if ! grep "^$id\$" $file >/dev/null 2>&1 ; then
		echo su - $user --command=\"echo $id \>\> $file\"
		su - $user --command="echo $id >> $file"
	    fi

	    id="`cat $home/.ssh/id_rsa.pub`"
	    file=$home/.ssh/authorized_keys2
	    if ! grep "^$id\$" $file >/dev/null 2>&1 ; then
		echo su - $user --command=\"echo $id \>\> $file\"
		su - $user --command="echo $id >> $file"
	    fi

	    echo chmod 600 $home/.ssh/authorized_keys*
	    chmod 600 $home/.ssh/authorized_keys*

	fi
    fi
done

# set up the server ssh_known_hosts file.  later we will copy this
# file to the clients.  we have to make sure to save any other
# host entries that were already in the file for systems that are 
# not part of the cluster.

echo ; echo updating non-root ssh permissions on $SERVER ...
cd $SSHCFGDIR || ( echo cannot cd to $SSHCFGDIR ; exit 1 )
file=ssh_known_hosts
rm -f $TEMP$file.temporary
cp $file $TEMP$file.temporary 2>/dev/null || touch $TEMP$file.temporary
for machine in $SERVER_AND_CLIENTS ; do
    egrep -v "^$machine[\,\ ]" $TEMP$file.temporary >$TEMP$file.temporary2
    mv $TEMP$file.temporary2 $TEMP$file.temporary
done
for machine in $SERVER_AND_CLIENTS ; do
    ipstring=",`awk </etc/hosts \"{f=0;for (i=1;i<=NF;i++) if (\\\$i==\\\"$machine\\\")print \\\$1}\"`"
    ipstring="`echo $ipstring | sed 's.^,$..g'`" # in case no ipstring found
    sed <ssh_host_key.pub 's,\ [^\ ]*$,,g' | sed "s/^/$machine$ipstring /g" >>$TEMP$file.temporary
done
if ! cmp -s $file $TEMP$file.temporary 2>/dev/null ; then
    ssh_known_hosts_changed=1
    if [ ! -r $file.pre_ssh_install ] ; then
	if [ -r $file ] ; then
	    echo cp -p $file $file.pre_ssh_install
	    cp -p $file $file.pre_ssh_install || exit 1
	fi
    fi
    if [ -r $file ] ; then
        echo $file changed from `wc -l <$file` entries to `wc -l <$TEMP$file.temporary` entries
    else
        echo new $file has `wc -l <$TEMP$file.temporary` entries
    fi
    mv $TEMP$file.temporary $file
else
    ssh_known_hosts_changed=0
    echo unchanged $file has `wc -l <$file` entries
fi
rm -f $TEMP$file.temporary

# now we take care of updating each client, or a list of specified images
if [ ! -z "$BASES" ] ; then
    list="$BASES"
else
    list="$CLIENTS"
fi
for client in $list ; do
    if [ -z "$base" -a "`rsh $client echo IT WORKS 2>/dev/null`" != "IT WORKS" ]  ; then
	echo ; echo '**********' $client is not accessible from root by rsh '*********'
    else
	echo ; echo checking/updating client $client ...
	if [ -z "$BASES" ] ; then
	    echo rcp -pr $SSHCFGDIR $client:`dirname $SSHCFGDIR`
	    rcp -pr $SSHCFGDIR $client:`dirname $SSHCFGDIR`
	else
	    echo cp -pr $SSHCFGDIR $client`dirname $SSHCFGDIR`
	    rcp -pr $SSHCFGDIR $client`dirname $SSHCFGDIR`
	fi

	# every user except root ends up being taken care of by /home cross-mount
	for user in $users ; do
	    home=`egrep "^$user\:" /etc/passwd | awk -F: '{print $6}' | tail -1`
	    if [ `echo $home | wc -w` -ne 1 ] ; then
		echo cannot determine home directory of user $user
	    else
	        if ! echo $home | egrep '^/home/' >/dev/null ; then
		    echo ; echo copying ssh files for $user to $client
		    if [ -z "$BASES" ] ; then
			echo rcp -pr $home/.ssh $client:$home
			rcp -pr $home/.ssh $client:$home
		    else
			echo cp -pr $home/.ssh $client$home
			cp -pr $home/.ssh $client$home
		    fi
		fi
	    fi
	done

	if [ -z "$BASES" ] ; then
	    echo rsh $client /etc/rc.d/init.d/sshd restart
	    rsh $client /etc/rc.d/init.d/sshd restart
	fi
    fi
done

echo
rm -rf $TEMP* 2>/dev/null
exit 0
