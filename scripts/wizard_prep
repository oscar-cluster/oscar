#!/usr/bin/perl

# Copyright (c) 2003, The Board of Trustees of the University of Illinois.
#                     All rights reserved.
# Copyright 2002 International Business Machines
#                Sean Dague <japh@us.ibm.com>
# Copyright (c) 2002-2003 The Trustees of Indiana University.  
#                         All rights reserved.
#
# $Id: wizard_prep,v 1.35 2004/04/21 13:20:32 ngorsuch Exp $
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This is a script which does everything that needs to be done for
#   the server to work for oscar.  It is long, but hopefully well structured.

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::Logger;
use OSCAR::Database;
use POSIX; # gives us uname function
use File::Path;
use File::Copy;
use File::Basename;
use Data::Dumper;
use vars qw($RPMTABLE);
use Carp;

oscar_log_section("Running OSCAR wizard_prep script");

# Run the prerequisites

# TEMPORARY FIX: XML-Simple needs XML-Parser.  Need some kind of
# "requires" functionality in the prerequisites, but for the moment,
# I'm just going to sort the result of readdir(), which will put them
# in the correct order.  This is not a good/permanent solution, but
# it's good enough for the moment.

oscar_log_subsection("Running OSCAR wizard prerequisites");
my $prefix = "$ENV{OSCAR_HOME}/share/prereqs";
opendir(PREREQDIR, $prefix) or 
  croak("Couldn't open $prefix for reading");
my @prereqs = sort(readdir(PREREQDIR));
closedir PREREQDIR;
foreach my $prereq (@prereqs) 
  {
    my $abs = "$prefix/$prereq";
    if (-d "$abs/scripts" && -f "$abs/scripts/setup") 
      {
        if (system("$abs/scripts/setup") != 0) 
          {
            croak("ERROR: Prerequisite failure!");
          }
      }
  }

# This must be done after the prerequisites, because the prerequisites
# may have installed some Perl modules that OSCAR requires.

eval("require OSCAR::Package");
eval("require OSCAR::Distro");
eval("require OSCAR::PackageBest");

my $topdir;
chomp($topdir = `pwd`);

# Make a list of all available packages.  Do not use 
# list_installable_package_dirs() here, because that will read 
# in all the per-package config.xml files. This is in preparation 
# of running all the package setup scripts, and the setup scripts 
# must be run *before* reading the XML files in.

my @PKG_SOURCE_LOCATIONS = @OSCAR::Package::PKG_SOURCE_LOCATIONS;
oscar_log_subsection("Finding available packages");
my @packages = ();
my @temp_array = ();
foreach my $d (@PKG_SOURCE_LOCATIONS) 
  {
    if (-d $d) 
      {
        opendir(PACKAGE_DIR, $d);
        foreach my $pkg_name (readdir(PACKAGE_DIR)) 
          {
            next if ($pkg_name eq "." || $pkg_name eq ".." ||
                     $pkg_name eq "CVS" || ! -d "$d/$pkg_name" ||
                     -e "$d/$pkg_name/.oscar_ignore");
            push @temp_array, $pkg_name;
          }
        closedir PACKAGE_DIR;
      }
  }
@packages = sort(@temp_array);
oscar_log_subsection("Found packages: " . join(", ", @packages));

# Now that we have a good list of packages, run all the setup scripts.

oscar_log_subsection("Running package setup scripts");
foreach my $pkg (@packages) 
  {
    my $dir = undef;
    foreach my $d (@PKG_SOURCE_LOCATIONS) 
      {
        # NOTE: There is a possible problem here.  In the case of there
        # being a package named "foo" (for example) in both the OSCAR
        # packages tree AND the OPD packages tree (/var/lib/oscar/packages),
        # the setup script for ONLY the OSCAR package gets run.  Not really
        # sure how to fix this since it doesn't make sense to run both, and
        # the config.xmls haven't been read into oda at this point, so we
        # can't use the "directory" field to get the 'correct' location of a
        # package.
        if (-d "$d/$pkg") 
          {
            $dir = "$d/$pkg";
            last;
          }
      }
    croak("Unexpectedly can't find a package: $pkg") if (!defined($dir));

    # If it's a good package, run its setup script (if it has one) in
    # the scripts directory.

    chdir("$dir/scripts");
    OSCAR::Package::run_pkg_script($pkg, "setup", 1) 
    or croak("Failed running setup script for $pkg");
    chdir($topdir);
  }
oscar_log_subsection("Successfully ran package setup scripts");

# Make sure /tftpboot/rpm exists, if not create it.  Then copy all the
# rpms that we ship that need to be in the client into that directory

my $RPMPOOL = $OSCAR::Package::RPM_POOL;
my $ARCH = (uname)[4];
$ARCH =~ s/i.86/i386/;

prep_rpmpool($RPMPOOL) or croak("Couldn't prepare tftpboot directory");

oscar_log_subsection("Copying RPMs to $RPMPOOL");
foreach my $d (@PKG_SOURCE_LOCATIONS) 
  {
    if (-d $d) 
      {
        oscar_log_subsection("Copying RPMs from $d to $RPMPOOL");
        OSCAR::Package::copy_pkgs($d) or 
          croak("Couldn't copy rpms to $RPMPOOL");
        oscar_log_subsection("Successfully copied RPMs from $d to $RPMPOOL");
      }
  }

# Make sure there is a database password

oscar_log_subsection("Making sure there is an ODA database password");
system( "$ENV{OSCAR_HOME}/scripts/make_database_password" );

# Start the database and copy the package xml files into the database

oscar_log_subsection("Initializing ODA database from package config.xml files");
my $exit_status =
  system( "$ENV{OSCAR_HOME}/scripts/package_config_xmls_to_database" ) / 256;
croak("Couldn't set up oda database") if $exit_status;

# More ODA setup

my $exit_status =
  system( "$ENV{OSCAR_HOME}/scripts/set_global_oscar_values" ) / 256;
croak("Couldn't initialize the global database values table") if $exit_status;

my $exit_status =
  system( "$ENV{OSCAR_HOME}/scripts/populate_default_package_set" ) / 256;
croak("Couldn't set up a default package set") if $exit_status;

my $exit_status =
  system("$ENV{OSCAR_HOME}/scripts/create_and_populate_basic_node_info") / 256;
croak("Couldn't set up basic node information") if $exit_status;

my $exit_status =
  system( "$ENV{OSCAR_HOME}/scripts/set_node_nics" ) / 256;
croak("Couldn't initialize the nics and networks for the oscar server") if $exit_status;

# Get the list of just core packages

@packages = OSCAR::Package::list_installable_package_dirs("core");
oscar_log_subsection("Identified core packages: " . join(' ', @packages));

# Get list of RPMs from the core packages

my @rpms = ();
foreach my $package (@packages) 
  {
    push @rpms, OSCAR::Package::rpmlist($package,"oscar_server");
  }

# And now we add the extra rpms that are needed if
# for each distribution

# Deprecated by use of base package
#my ($distname, $distver) = OSCAR::Distro::which_distro_server();
#push @rpms, OSCAR::Package::distro_rpmlist($distname,$distver,$ARCH);

# Now install them nicely (i.e. don't install packages that are already there)

oscar_log_subsection("Installing server core RPMs");
OSCAR::Package::install_packages(@rpms) or 
  croak("Couldn't install packages needed for OSCAR Wizard to run");
oscar_log_subsection("Successfully installed server core RPMs");


# Have installed Core Server Pkgs & did not croak, so mark 
# packages.<pkg>installed true.  (best effort for now)

oscar_log_subsection("Marking installed bit in ODA for server core Pkgs");

foreach my $pkg (@packages) {
        oscar_log_subsection("Set package: $pkg");
        my $ok_rslt = database_execute_command("package_mark_installed $pkg");
        croak "Unable to mark packages.$pkg.installed\n" if (!$ok_rslt);
}
oscar_log_subsection("Done marking installed bits in ODA");



# Run the post_server_rpm_install scripts

oscar_log_subsection("Running post_server_install scripts for " .
                     "server core packages");
foreach my $package (@packages) 
  {
    OSCAR::Package::run_pkg_script($package,"post_server_install") or 
      croak("Failed running post_server_install for $package");
  }
oscar_log_subsection("Successfully ran server core package " .
                     "post_server_install scripts");

oscar_log_subsection("Successfully ran OSCAR wizard_prep script");

sub prep_rpmpool 
{
  my $dir = shift;
  if(!-d $dir) 
    {
      print "No $dir directory found.  Creating it now...\n";
      mkpath($dir, 1, 0755) or return undef;
    }
  return 1;
}

