#!/usr/bin/perl

# Copyright 2002 International Business Machines
#                Sean Dague <japh@us.ibm.com>
# Copyright (c) 2002 The Trustees of Indiana University.  
#                    All rights reserved.
#
# $Id: wizard_prep,v 1.10 2002/10/25 12:49:50 jsquyres Exp $
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This is a script which does everything that needs to be done for
#   the server to work for oscar.  It is long, but hopefully well structured.

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::Logger;
use POSIX; # gives us uname function
use File::Path;
use File::Copy;
use File::Basename;
use Data::Dumper;
use vars qw($RPMTABLE);
use Carp;

oscar_log_section("Running OSCAR wizard_prep script");

my $INTERFACE = shift or croak("No interface specified");

# Run the prerequsites

oscar_log_subsection("Running OSCAR wizard prerequsites");
my $prefix = "$ENV{OSCAR_HOME}/share/prereqs";
opendir(PREREQDIR, $prefix) or 
    croak("Couldn't open $prefix for reading");
while(($_ = readdir(PREREQDIR))) {
    my $abs = "$prefix/$_";
    if (-d "$abs/scripts" && -f "$abs/scripts/install") {
	if (system("$abs/scripts/install") != 0) {
	    carp("WARNING: Prerequsite failure!");
	}
    }
}
closedir(PREREQDIR);

# This must be done after the prerequisites, because the prerequisites
# may have installed some Perl modules that OSCAR requires.

require OSCAR::Package;
require OSCAR::Distro;
require OSCAR::PackageBest;

# Make sure /tftpboot/rpm exists, if not create it.  Then copy all the
# rpms that we ship that need to be in the client into that directory

my $RPMPOOL = $OSCAR::Package::RPM_POOL;
my $ARCH = (uname)[4];
$ARCH =~ s/i.86/i386/;

prep_rpmpool($RPMPOOL) or croak("Couldn't prepare tftpboot directory");
oscar_log_subsection("Copying RPMs from " . $ENV{OSCAR_HOME} .
		     " to $RPMPOOL\n");
copy_rpms($ENV{OSCAR_HOME},$RPMPOOL) 
    or croak("Couldn't copy rpms to $RPMPOOL");
oscar_log_subsection("Successfully copied RPMs from " . $ENV{OSCAR_HOME} . 
		     " to $RPMPOOL\n");

# Get the list of core packages

my @packages = OSCAR::Package::list_pkg("core");
oscar_log_subsection("Identified core packages: " . join(' ', @packages));

# Run the setup scripts

oscar_log_subsection("Running setup scripts for core packages");
foreach my $package (@packages) {
    OSCAR::Package::run_pkg_script($package, "setup") 
	or croak("Failed running server for $package");
}
oscar_log_subsection("Successfully ran core package server scripts");

# Get list of RPMs from the core packages

my @rpms = ();
foreach my $package (@packages) {
    push @rpms, OSCAR::Package::rpmlist($package,"server");
}

# And now we add the extra rpms that are needed if
# for each distribution

my ($distname, $distver) = OSCAR::Distro::which_distro_server();
push @rpms, OSCAR::Package::distro_rpmlist($distname,$distver,$ARCH);

# Now install them nicely (i.e. don't install packages that are already there)

oscar_log_subsection("Installing core RPMs");
OSCAR::Package::install_rpms(@rpms) 
    or croak("Couldn't install the required packages needed for OSCAR Wizard to run");
oscar_log_subsection("Successfully installed core RPMs");

# Run the post_server_rpm_install scripts

oscar_log_subsection("Running post_server_install scripts for core packages");
foreach my $package (@packages) {
    OSCAR::Package::run_pkg_script($package,"post_server_install") 
	or croak("Failed running post_server_install for $package");
}
oscar_log_subsection("Successfully ran core package post_server_install scripts");

oscar_log_subsection("Successfully ran OSCAR wizard_prep script");

sub prep_rpmpool {
    my $dir = shift;
    if(!-d $dir) {
        print "No $dir directory found.  Creating it now...\n";
        mkpath($dir, 1, 0755) or return undef;
    }
    return 1;
}

sub copy_rpms {
    my ($topdir, $target) = @_;

    my @packagedirs = files_in_dir("$topdir/packages");

    foreach my $dir (@packagedirs) {
            my @files = files_in_dir("$dir/RPMS");
            foreach my $file (@files) {
                if($file =~ /\.rpm$/) {
                    my $filename = basename($file);
                    if (!-e "$RPMPOOL/$filename") {
                        print "Copying $file to $RPMPOOL\n";
                        copy("$file", "$RPMPOOL/$filename") or return undef;
                    }
                }
            }
    }
    return 1;
}

sub files_in_dir {
    my $dir = shift;
    opendir(IN,$dir);
    my @temp = readdir(IN);
    closedir(IN);
    my @files = ();
    foreach my $file (@temp) {
        if($file !~ /^\./) {
            push @files, $file;
        }
    }
    return map {"$dir/$_"} @files;
}

sub _is_installed {
    my $rpm = shift;
    if(system("rpm -q $rpm >/dev/null")) {
        print "$rpm not installed.  Marking for install...\n";
        return 0;
    }
    return 1;
}

