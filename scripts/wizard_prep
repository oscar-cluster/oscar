#!/usr/bin/perl

# Copyright (c) 2003, The Board of Trustees of the University of Illinois.
#                     All rights reserved.
# Copyright 2002 International Business Machines
#                Sean Dague <japh@us.ibm.com>
# Copyright (c) 2002-2007 The Trustees of Indiana University.  
#                         All rights reserved.
# Copyright (c) 2006 Erich Focht <efocht@hpce.nec.com>
#                    All rights reserved.
#
# $Id$
# 
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This is a script which does everything that needs to be done for
#   the server to work for oscar.  It is long, but hopefully well structured.

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::Logger;
use OSCAR::PackagePath;
use OSCAR::OpkgDB;
use POSIX; # gives us uname function
use File::Path;
use File::Copy;
use File::Basename;
use Data::Dumper;
use vars qw($RPMTABLE);
use Carp;

my $OSCAR_SERVER_NODE = "oscar_server";
my $OSCAR_SERVER_GROUP = "oscar_server";
my $ohome = $ENV{OSCAR_HOME};
my $prereqs_dir = "share/prereqs";
my $orderfile = "$ohome/share/prereqs/prereqs.order";

my $verbose;
if ($ENV{OSCAR_VERBOSE}) {
    $verbose="--verbose";
    if ($ENV{OSCAR_VERBOSE} =~ m/^(yY)/) {
	$ENV{OSCAR_VERBOSE} = 5;
    }
    if (!$ENV{YUME_VERBOSE}) {
	$ENV{YUME_VERBOSE} = $ENV{OSCAR_VERBOSE};
    }
}

my $md5;

#
# #####
#

oscar_log_section("Running OSCAR wizard_prep script");

#
# Detect OS of master node.
#
# Fails HERE if distro is not supported!
#
my $os = &OSCAR::PackagePath::distro_detect_or_die();

#
# Locate package pools and create the directories if they don't exist, yet.
#
my $distro_pkg_pool = &OSCAR::PackagePath::distro_repo_url(os=>$os);

my $ARCH = `./get_arch`;
chomp($ARCH);

# check if distro_pkg_pool contains packages or not
if ($distro_pkg_pool =~ /^\//) {   # is local path, no remote URL
    my @pkgs = glob("$distro_pkg_pool/bash* $distro_pkg_pool/gcc*");
    if (scalar(@pkgs) < 2) {
	print "ERROR: The distribution repository $distro_pkg_pool looks empty!\n";
	print "!!!! Copy all your distro package files (rpms) to it and retry.\n";
	exit 1;
    }
}

#
# locate _all_ available distro pools, prepare for heterogeneous setup
#
my %distro_pools = &OSCAR::PackagePath::list_distro_pools();
print "Available Distro Pools:\n".Dumper(%distro_pools) if ($verbose);

my $ipcmd = "$ohome/scripts/install_prereq $verbose";

# the md5dir directory will hold md5 checksum files
my $md5dir = $ENV{OSCAR_HOME}."/tmp";
if (! -d $md5dir) {
    mkdir $md5dir or croak "Could not make directory $md5dir: $!";
}

# remember all packages which were on the system before OSCAR installation
# (used by start_over to protect system files)
# (only code for rpms here right now)
if ($os->{pkg} eq "rpm") {
    my $preoscar = "$md5dir/pre-oscar.rpmlist";
    if (! -f $preoscar) {
	oscar_log_subsection("Writing pre-oscar rpmlist...");
	system("rpm -q --qf '%{NAME}\n' --all | sort | uniq > $preoscar");
    }
}


oscar_log_subsection("Bootstrapping OSCAR smart package manager");

# install_prereq is a very powerfull tool. It can install and remove
# packages based on a simple configuration file which distinguishes
# between distributions, thus making the addition of distributions
# a piece of cake.
#
# install_prereq --dumb uses only the basic package manager which is
# allways available on a system. The packages installed in this mode
# need to contain all dependencies in the configuration file, as the
# dumb package managers (rpm, dpkg) don't know how to resolve
# dependencies.
#
# install_prereq --smart uses a packman instance specific to the current
# distro and expects that to return "true" when the ->is_smart() method
# is invoked. It is able to resolve dependencies automatically from the
# repositories.

my $cmd;
# EF: need to take care of mixed installs (debian + rpm-based)!
#     those require installing both rapt and yume
if ($os->{pkg} eq "rpm") {
    # rpm based distros use yume
    $cmd = "$ipcmd --dumb packages/yume $prereqs_dir/packman";
} elsif($os->{pkg} eq "deb") {
    # debian based distros use rapt
    $cmd = "$ipcmd --dumb packages/rapt $prereqs_dir/packman";
} else {
    die "Unsupported package manager: ".$os->{pkg};
}
!system($cmd) or
    die "Could not bootstrap smart package manager!\n";

#
# this is needed for the checksum computations which shorten startup times
#
eval("require OSCAR::PackageSmart");
if ($!) {
    print "eval require PackageSmart returned $!\n";
}


#
# Get repositories up (if in developer mode. Otherwise just test if repos
# are already around.)
#
if (exists($ENV{OSCAR_DEVELOPER_MODE})) {
    oscar_log_subsection("Setting up OSCAR repositories.");
    $cmd = $ENV{OSCAR_HOME}."/scripts/prep_oscar_repos";
    !system($cmd) or
	die "Could not set up OSCAR repositories, command $cmd returned $? $!\n";
} else {
    # check if repos already around...
    oscar_log_subsection("Checking OSCAR repositories existence.");

    my %orepo_done;
    for my $dist (keys %distro_pools) {
	my %d = %{$distro_pools{$dist}};


	for my $distro_repo (split(",",$d{distro_repo})) {
	    next if ($distro_repo =~ /^(http|ftp|mirror):/);
	    (my $lrepo = $distro_repo) =~ s/^file://;

	    # repo checksum in tmp or in the repo?
	    # this is checked implicitely by prepare_pools
	    my $pm = OSCAR::PackageSmart::prepare_pools(($verbose?1:0),
							$lrepo);
	    if (!$pm) {
		croak "\nERROR: Could not prepare pool $lrepo!\n";
	    }
	    undef $pm;
	}

	for my $oscar_repo (split(",",$d{oscar_repo})) {
	    next if (exists $orepo_done{"$oscar_repo"});
	    next if ($oscar_repo =~ /^(http|ftp|mirror):/);
	    (my $lrepo = $oscar_repo) =~ s/^file://;

	    # repo checksum in tmp or in the repo?
	    # this is checked implicitely by prepare_pools
	    my $pm = OSCAR::PackageSmart::prepare_pools(($verbose?1:0),
							$lrepo);
	    if (!$pm) {
		croak "\nERROR: Could not prepare pool $lrepo!\n";
	    }
	    undef $pm;
	}
    }
}

#
# base prereqs install start before the others, they're done smartly
#
$cmd = "$ipcmd $prereqs_dir/base";
!system($cmd) or
    die "Could not install base prereqs!\n";



# hack...
# EF: will move to install_prereqs [shell]
if ($os->{pkg} eq "rpm") {
    system("yum clean all");
}

oscar_log_subsection("Installing OSCAR wizard prerequisites");

# Read in the share/prereqs/prereqs.order file
# It should contain prerequisite paths relative to $OSCAR_HOME, one per line.

my @ordered_prereqs;
if (-f "$orderfile") {
    local *ORDER;
    open ORDER, "$orderfile" or
        croak("Could't open $orderfile for reading");
    @ordered_prereqs = <ORDER>;
    chomp @ordered_prereqs;
    close(ORDER);
}

# Traverse the @ordered_prereqs list and install them
# This list must contain ALL prerequisites! This is little effort and
# avoids running twice through the prereqs.

# skip comments and empty lines
@ordered_prereqs = grep !/^\s*(\#.*|\s*)$/, @ordered_prereqs;


# compute checksums for each ordered prereq
my $indx=0;
my $do_prereqs=0;
for my $prereq (@ordered_prereqs) {
    my $cfile = "$md5dir/prereq_$indx.md5";
    $md5 = OSCAR::PackageSmart::checksum_needed("$ENV{OSCAR_HOME}/$prereq",
						"$cfile","*");
    $do_prereqs = 1 if ($md5);
    $indx++;
}
goto PREREQS_DONE if (!$do_prereqs);

$cmd = "$ipcmd --smart " . join(" ",@ordered_prereqs);
print "\texecuting: $cmd\n" if ($verbose);
!system($cmd) or die "ERROR: Prerequisites install failure!";

# Install the prerequisites and
# run setup for the prereqs which still need it
foreach my $prereq (@ordered_prereqs) {
    oscar_log_subsection("Installing wizard prereq $prereq");
    # there is no need for a prereq setup script any more,
    # this should really be an exception!
    # 
    # !! All setup scripts are run _before_ installation of prereqs !!
    if (-x "$ohome/$prereq/scripts/setup") {
	oscar_log_subsection("Running prereq setup script for $prereq");
	!system("$ohome/$prereq/scripts/setup")
	    or croak("ERROR: Prerequisite setup failure!");
    }
    oscar_log_subsection("Successfully installed prereq $prereq");
}
$indx=0;
for my $prereq (@ordered_prereqs) {
    my $cfile = "$md5dir/prereq_$indx.md5";
    $md5 = OSCAR::PackageSmart::checksum_needed("$ENV{OSCAR_HOME}/$prereq",
						"$cfile","*");
    OSCAR::PackageSmart::checksum_write($cfile,$md5);
    $indx++;
}
 PREREQS_DONE:

#deprecated# # This must be done after the prerequisites, because the prerequisites
#deprecated# # may have installed some Perl modules that OSCAR requires.
#deprecated# 
#deprecated# require OSCAR::Package;
#deprecated# 
#deprecated# my $topdir;
#deprecated# chomp($topdir = `pwd`);
#deprecated# 
#deprecated# # Make a list of all available packages.  Do not use 
#deprecated# # list_installable_package_dirs() here, because that will read 
#deprecated# # in all the per-package config.xml files. This is in preparation 
#deprecated# # of running all the package setup scripts, and the setup scripts 
#deprecated# # must be run *before* reading the XML files in.
#deprecated# 
#deprecated# my @PKG_SOURCE_LOCATIONS = @OSCAR::PackagePath::PKG_SOURCE_LOCATIONS;
#deprecated# 
#deprecated# 
#deprecated# # Now that we have a good list of packages, run all the setup scripts.
#deprecated# 
#deprecated# oscar_log_subsection("Locating _all_ OSCAR packages");
#deprecated# my %pkgdirs;
#deprecated# foreach my $d (@PKG_SOURCE_LOCATIONS) {
#deprecated#     # EF: a package is a package if it has a config.xml file
#deprecated#     for my $cfg (glob("$d/*/config.xml")) {
#deprecated# 	my $dir = dirname($cfg);
#deprecated# 	my $pkg = basename($dir);
#deprecated# 
#deprecated# 	# [EF] When package exists in multiple placese we use the last occurence
#deprecated# 	#      (usually /var/lib/oscar/packages).
#deprecated# 	#      This makes it easier to override OSCAR builtin packages with
#deprecated# 	#      downloaded ones.
#deprecated# 	if (exists($pkgdirs{$pkg})) {
#deprecated# 	    print "WARNING: Package $pkg found in multiple places. Using $dir!\n";
#deprecated# 	}
#deprecated# 	$pkgdirs{$pkg} = $dir;
#deprecated#     }
#deprecated# }
#deprecated# 
#deprecated# # checksum for package files
#deprecated# $md5 = OSCAR::PackageSmart::checksum_needed("$ENV{OSCAR_HOME}/packages",
#deprecated# 					    "$md5dir/packages.md5",
#deprecated# 					    "*");
#deprecated# goto PREP_DB if (!$md5);
#deprecated# 
#deprecated# oscar_log_subsection("Running package setup scripts for ALL packages");
#deprecated# for my $pkg (sort keys(%pkgdirs)) {
#deprecated#     next if $pkg eq "oda";
#deprecated#     my $dir = $pkgdirs{$pkg};
#deprecated#     next if (! -x "$dir/scripts/setup");
#deprecated# 
#deprecated#     # If it's a good package, run its setup script (if it has one) in
#deprecated#     # the scripts directory.
#deprecated#     chdir("$dir/scripts");
#deprecated#     #
#deprecated#     # EF: this needs to be eval'd because the OSCAR::Package namespace
#deprecated#     # does not exist at perl compile time.
#deprecated#     #
#deprecated#     eval("OSCAR::Package::run_pkg_script(\$pkg, \"setup\", 1)") 
#deprecated# 	or croak("Failed running setup script for $pkg");
#deprecated#     chdir($topdir);
#deprecated# }
#deprecated# oscar_log_subsection("Successfully ran package setup scripts");
#deprecated# 
#deprecated# 
#deprecated# 
#deprecated# 
#deprecated# # recalculate checksum because "setup" might have changed something
#deprecated# $md5 = OSCAR::PackageSmart::checksum_files("$ENV{OSCAR_HOME}/packages","*");
#deprecated# OSCAR::PackageSmart::checksum_write("$md5dir/packages.md5",$md5);
#deprecated# 
#deprecated# 

 PREP_DB:
# Make sure there is a database password

oscar_log_subsection("Making sure there is an ODA database password");
system( "$ENV{OSCAR_HOME}/scripts/make_database_password" );

# Now we're ready to use the database
eval "use OSCAR::Database";


#deprecated#  PREP_CONFIG_XML:
#deprecated# $md5 = OSCAR::PackageSmart::checksum_needed("$ENV{OSCAR_HOME}/packages",
#deprecated# 					    "$md5dir/config_xml.md5",
#deprecated# 					    "config.xml");
#deprecated# goto PREP_MORE_ODA if (!$md5) && (database_connect());
#deprecated# 
#deprecated# 
#deprecated# # Start the database and copy the package xml files into the database
#deprecated# oscar_log_subsection("Initializing ODA database from package config.xml files");
#deprecated# my $exit_status =
#deprecated#   system( "$ENV{OSCAR_HOME}/scripts/package_config_xmls_to_database" ) / 256;
#deprecated# croak("Couldn't set up oda database") if $exit_status;
#deprecated# 
#deprecated# OSCAR::PackageSmart::checksum_write("$md5dir/config_xml.md5",$md5);
#deprecated# 
#deprecated# 
#deprecated#  PREP_MORE_ODA:
#deprecated# # More ODA setup
#deprecated# my $exit_status =
#deprecated#   system("$ENV{OSCAR_HOME}/scripts/populate_default_package_set")/256;
#deprecated# croak("Couldn't set up a default package set") if $exit_status;


# add default configurator settings
eval ("require OSCAR::Configbox");
croak("Could not load OSCAR::Configbox") if ($@);
for my $pkg (sort keys(%pkgdirs)) {
    my $dir = $pkgdirs{$pkg};
    my $cfile = "$dir/configurator.html";
    next if (! -e $cfile);
    OSCAR::Configbox::readInConfigValues($cfile,$pkg,"");
}

my $exit_status =
    system("$ENV{OSCAR_HOME}/scripts/set_node_nics --network")/256;
croak("Couldn't initialize the nics and networks for the oscar server")
    if $exit_status;


 PREP_INSTALL_CORE:
$md5 = OSCAR::PackageSmart::checksum_needed("$ENV{OSCAR_HOME}/packages",
					    "$md5dir/packages_core.md5",
					    "*");
goto PREP_DONE if (!$md5);

# Get the list of just core packages

my (@results, %options, @errors);
my %results = &opkg_hash_available(class => "core");
my @packages = map { $_->{name} } @results;

oscar_log_subsection("Identified core packages: " . join(' ', @packages));

# OSCAR::Opkg requires XML::Simple which is not available initially but after
# prereq installation
require OSCAR::Opkg;

oscar_log_subsection("Installing server core packages");
OSCAR::Opkg::opkgs_install_server (@packages);
oscar_log_subsection("Successfully installed server core RPMs");

 PREP_CORE_NEST:
#
#
#
# 
# dikim commented out the LOCKING codes here because he believes
# that InnoDB type can handle the all the crossing locking issues.
# He does not want to remove these codes because he easily forgets
# what files have locking codes and where they are and he may need
# them in case innodb works as we expected.

# START LOCKING FOR NEST && open the database
my @tables = ("Nodes","Groups","Group_Nodes", "Packages", "Group_Packages", "Node_Package_Status");
my %options = ();
my @errors = ();
#locking("write", \%options, \@tables, \@errors);

# Update Group_Nodes table with oscar_server group.
my @nodes = ($OSCAR_SERVER_NODE);
set_group_nodes($OSCAR_SERVER_GROUP,\@nodes,\%options,\@errors);

# Have installed Core Server Pkgs & did not croak, so mark 
# packages.<pkg>installed true.  (best effort for now)

print "Updating the status of core packages from installable to installed\n";
my @package_results = ();
my $requested = 8;
my $group = "core";

my %results = opkg_hash_installed(class => "core");
my @installed_opkgs = map { $_->{name} } @installed_opkgs;

for my $opkg (@installed_opkgs) {
    #
    # add here code to mark packages as installed !!!
    #

# if ( get_packages_with_class($group,\@package_results,\%options,\@errors)){
#     die "$0:Failed to update the table Node_Package_Status"
#         if(!update_node_package_status(\%options,"oscar_server",\@package_results,$requested,\@errors));
# }
}

# UNLOCKING FOR NEST
#unlock(\%options, \@errors);

oscar_log_subsection("Done marking installed bits in ODA");


 PREP_POST_SERVER_CORE:
# Run the post_server_rpm_install scripts

oscar_log_subsection("Running post_server_install scripts for " .
                     "server core packages");
foreach my $package (@packages) 
  {
    OSCAR::Package::run_pkg_script($package,"post_server_install") or 
      croak("Failed running post_server_install for $package");
  }
oscar_log_subsection("Successfully ran server core package " .
                     "post_server_install scripts");
OSCAR::PackageSmart::checksum_write("$md5dir/packages_core.md5",$md5);

#
# Prepare and export all repositories
#
# !!EF!! not caring about remote repositories, yet
for my $dist (keys %distro_pools) {
    my %d = %{$distro_pools{$dist}};
    my $oscar_repo = $d{oscar_repo};
    my $distro_repo = $d{distro_repo};
    # 
    oscar_log_subsection("Preparing for httpd export: $distro_repo $oscar_repo");
    my $pm = &OSCAR::PackageSmart::prepare_pools($verbose,
						 $distro_repo,
						 $oscar_repo);
    if ($pm) {
	$pm->repo_export();
	undef $pm;
    }
}


 PREP_DONE:

oscar_log_subsection("Successfully ran OSCAR wizard_prep script");



sub print_output {
    my ($line) = @_;
    print "$line\n";
}
