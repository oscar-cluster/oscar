#!/bin/bash
#
# Script for building RPMs and SRPMS from a source tree directory and
# a spec file. The spec file must be named the same way as the source
# directory, with a .spec appended.
#
# Usage:
#
# mk_rpms --only-rpm srpm1 [srpms2 ...]
#
# mk_rpms dir
#
# mk_rpms spec_file
#
# mk_rpms --only-srpms dir|spec_file
#
#
# When running without PKG arguments the spec files in the current
# directory are searched.
#
# $Id$
# (C)opyright Erich Focht <efocht at hpce dot nec dot com>, 2004

export LC_ALL=C
RPMBLD=`rpm --eval '%{_topdir}'`

FILES_TO_RM=""

run_cmd () {
    if [ -n "$VERBOSE" ]; then
	echo ">> $1" 1>&2
    fi
    if [ -z "$TEST" ]; then
	eval $1
	return $?
    fi
}

build_srpm () {
   local SPECF=$1
   local SRPM
   if [ -n "$VERBOSE" ]; then
       echo ">> rpmbuild -bs $SPECF" 1>&2
   fi
   if [ -z "$TEST" ]; then  
       SRPM=`rpmbuild -bs $SPECF | grep ^Wrote: | awk '{print $2}'`
   fi
   if [ -f $SRPM ]; then
       run_cmd "mv $SRPM ."
       echo `basename $SRPM`
   fi
}

build_rpms () {
    local SRPM=$1
    local TMPO=/tmp/rpmbld_$$
    local TARGET
    if [ `uname -i` = "i386" ]; then
	TARGET="--target i686"
    fi
    case "$RPMBUILDOPTS" in
	*--target*)
	    TARGET=""
	    ;;
    esac
    run_cmd "rpmbuild --rebuild $SRPM $TARGET $RPMBUILDOPTS > $TMPO 2>&1"
    if [ $? -ne 0 ]; then
	echo "EEEE: Building RPMs from $SRPM failed."
	tail -10 $TMPO
	echo "== Full output of rpmbuild is in the corresponding .err file =="
	local CMD="mv $TMPO "`basename $SRPM .src.rpm`".err"
	run_cmd "$CMD"
	cleanup
	exit 1
    fi
    for f in `grep ^Wrote: $TMPO | awk '{print $2}'`; do
	run_cmd "mv $f ." || exit 2
    done
    run_cmd "rm -f $TMPO"
}

build_all () {
   local SPEC=$1
   local DIR=`dirname $SPEC`
   local SRPM
   local sfiles
   if [ -z "$DIR" ]; then
       DIR="."
   fi
   sfiles=`grep '^ *Source[0-9]*:' $SPEC | awk '{printf $NF" "}'`
   pfiles=`grep '^ *Patch[0-9]*:' $SPEC | awk '{printf $NF" "}'`
   set_spec_name_version $SPEC
   for source in $sfiles $pfiles ; do
       archive_type $source
       # replace %{name} and %{version} strings in file names
       file=`echo $ARCHIVE_NAME | \
             sed -e "s/%{name}/$SPEC_NAME/" -e "s/%{version}/$SPEC_VERSION/"`
       if [ "$DIR" != "." -a -n "$ARCHIVE_SUFFIX" ]; then
	   # we have a tarfile, this must be built from DIR
	   if [ "$DIR" != "$file" ]; then
	       if [ ! -e "$file" ]; then
		   run_cmd "cp -pr $DIR $file"
		   FILES_TO_RM="$FILES_TO_RM $file"
	       else
		   echo "File/directory $file already exists. Cannot continue."
		   return
	       fi
	   fi
       fi
       if [ -d $file ]; then
	   run_cmd "tar cv $ARCHIVE_OPT --exclude=.svn -f $file.$ARCHIVE_SUFFIX $file" || exit 2
	   run_cmd "mv $file.$ARCHIVE_SUFFIX $RPMBLD/SOURCES" || exit 2
       elif [ -f $file ]; then
	   # this is a plain file which needs to go with the SRPM
	   run_cmd "cp -p $file $RPMBLD/SOURCES"
       else
	   echo "Neither a directory nor a file $file exists."
	   echo "It is required (according to the spec file)!"
	   exit 2
       fi
   done
   SRPM=`build_srpm $SPEC`
   if [ -n "$SRPM" -a -z "$SRPMONLY" ]; then
       build_rpms $SRPM
   fi
}

#
#
set_spec_name_version () {
    local spec=$1
    SPEC_NAME=`grep ^Name: $spec | head -1 | awk '{printf $NF}'`
    SPEC_VERSION=`grep ^Version: $spec | head -1 | awk '{printf $NF}'`
}

# determine the archive type of a filename
# set ARCHIVE_SUFFIX and ARCHIVE_OPT
archive_type () {
    local name=$1
    local suf
    ARCHIVE_SUFFIX=""
    ARCHIVE_OPT=""
    case $name in
	*.tar.gz)
	    ARCHIVE_SUFFIX="tar.gz"
	    ARCHIVE_OPT="-z"
	    ;;
	*.tgz)
	    ARCHIVE_SUFFIX="tgz"
	    ARCHIVE_OPT="-z"
	    ;;
	*.tar.bz2)
	    ARCHIVE_SUFFIX="tar.bz2"
	    ARCHIVE_OPT="-j"
	    ;;
	*)
	    ;;
    esac
    ARCHIVE_NAME=`basename $name .$ARCHIVE_SUFFIX`
}

cleanup () {
    local f
    for f in $FILES_TO_RM; do
	rm -rf $f
    done
}

#
# MAIN code
#

if [ $# -gt 0 ]; then
    while [ -n "$1" ]; do
	case "$1" in
	    -t|--test)
		TEST=1
		VERBOSE=1
		shift
		;;
	    --only-srpm)
		SRPMONLY=1
		shift
		;;
	    --only-rpm)
		RPMONLY=1
		shift
		;;
	    -v|--verbose)
		VERBOSE=1
		shift
		;;
	    *)
		PKGS="$PKGS $1"
		shift
		;;
	esac
    done
fi
if [ -n "$RPMONLY" ]; then
    echo "Building only RPMs, passed arguments are interpreted as SRPMs"
    SRPMS=$PKGS
    PKGS=""
fi

for SRPM in $SRPMS; do
    if [ -f "$SRPM" ]; then
	build_rpms $SRPM
    fi
done

for PKG in $PKGS; do
   #
   if [ -e $PKG.spec ]; then
      build_all $PKG.spec
   else
       if [ -d "$PKG" ]; then
	   # find first spec file inside directory
	   SPECF=`ls -1 $PKG/*.spec | head -1`
	   if [ ! -z "$SPECF" -a -f "$SPECF" ]; then
	       build_all $SPECF
	   else

	       # now try to copy the directory to a temporary one
	       # and run autogen.sh
	       if [ -f $PKG/autogen.sh ]; then
		   TDIR=`mktemp -d $PKG.XXXXX`
		   FILES_TO_RM="$FILES_TO_RM $TDIR"
		   cp -pr $PKG/* $TDIR
		   cd $TDIR
		   ./autogen.sh
		   ./configure
		   cd ..
		   SPECF=`ls -1 $TDIR/*.spec | head -1`
		   if [ ! -z "$SPECF" -a -f "$SPECF" ]; then
		       build_all $SPECF
		   fi
	       elif [ -f $PKG/Makefile.PL ]; then
		   TDIR=`mktemp -d $PKG.XXXXX`
		   FILES_TO_RM="$FILES_TO_RM $TDIR"
		   cp -pr $PKG/* $TDIR
		   cd $TDIR
		   perl Makefile.PL
		   make manifest
		   SRPM=`make srpm | grep ^Wrote: | awk '{print $2}'`
		   cd ..
		   mv $SRPM .
		   SRPM=`basename $SRPM`
		   build_rpms $SRPM
	       else
		   echo "Could not find a spec file inside $PKG"
	       fi
	   fi
       else
	   echo "Unknown package $PKG !"
      fi
   fi
done

cleanup
exit

