#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This script is designed to be run after the image is built.
#   It will do all the fixups required.
#
#   Copyright (c) 2005 The Trustees of Indiana University.
#                      All rights reserved.
#   Copyright (c) 2008 Oak Ridge National Laboratory
#                      Geoffroy Vallee <valleegr@ornl.gov>
#                      All rights reserved.

# $Id$

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use SIS::Client;
use SIS::Image;
use SIS::NewDB;
use File::Copy;
use File::Path;
use File::Basename;
use OSCAR::Env;
use OSCAR::Database;
use OSCAR::Logger;
use OSCAR::LoggerDefs;
use OSCAR::Package;
use OSCAR::Utils;
use Getopt::Long;
use Carp;

my ($verbose,$debug,$quiet);
GetOptions(
            "verbose"   => \$verbose,
            "debug"     => \$debug,
            "quiet"     => \$quiet,
          );

my $initial_verbose_value = 0;
$initial_verbose_value = $ENV{OSCAR_VERBOSE} if (defined $ENV{OSCAR_VERBOSE});

if ($debug) {
    $ENV{OSCAR_VERBOSE} = 10;
    $OSCAR::Env::oscar_verbose=10;
} elsif ($verbose) {
    $ENV{OSCAR_VERBOSE} = 5;
    $OSCAR::Env::oscar_verbose=5;
} elsif ($quiet) {
    $ENV{OSCAR_VERBOSE} = 0;
    $OSCAR::Env::oscar_verbose=0;
} else {
    $ENV{OSCAR_VERBOSE} = 1;
    $OSCAR::Env::oscar_verbose=1;
}

my $errors = 0;
my @failed_opkgs;

# We currently do not assume that getting the number of procs is a fatal
# problem
if(update_node_ressource("cat /proc/cpuinfo",qr/^processor/,"CPU","cpu_num",1)) {
    oscar_log(5, WARNING, "Unable to get CPU count");
}
if(update_node_ressource("nvidia-smi -L",qr/^GPU/,"GPU","gpu_num",0)) {
    oscar_log(5, WARNING, "Unable to get GPU count");
}

# This makes sure existing nodes have the latest /etc/hosts. 
# The profile script is execd so we know the path (from opium's post_install)
my $cmd;
# my $os = OSCAR::OCA::OS_Detect::open();
# if (!defined $os) {
#     die "ERROR: Impossible to detect the local OS";
# }
# if ($os->{pkg} eq "rpm") {
#     $cmd = ". /etc/profile.d/c3.sh &&";
# }
# $cmd .= "cpush /etc/hosts";
# if (system("$cmd") != 0) {
#     carp("ERROR: Couldn't push /etc/hosts to all nodes");
#     $errors++;
# }

!oscar_system("/usr/bin/c3config update --cluster oscar_cluster --refreshstatuses --file /etc/c3.conf")
    or oscar_log(5, ERROR, "Couldn't refresh nodes statuses in /etc/c3.conf");

my @pkgs = list_selected_packages();
foreach my $pkg (@pkgs) {
    if(!OSCAR::Package::run_pkg_script($pkg, "post_install", 1, "")) {
        oscar_log(5, ERROR, "Couldn't run 'post_install' script for $pkg");
        push (@failed_opkgs, $pkg);
        $errors++;
    }
}

if($errors) {
    oscar_log(2, ERROR, "Some of the post install scripts failed, please check your ".
         "logs for more info (". join (", ", @failed_opkgs).")");
} else {
    oscar_log(2, SUBSECTION, "Cluster setup complete!");
}

$ENV{OSCAR_VERBOSE} = $initial_verbose_value;

exit($errors);

# Use Schwartzian transform to sort clients by node names alphabetically and
# numerically.
# Names w/o numeric suffix precede those with numeric suffix.
sub sortclients(@) {
	return map { $_->[0] }
	       sort { $a->[1] cmp $b->[1] || ($a->[2]||-1) <=> ($b->[2]||-1) }
	       map { [$_, $_->{name} =~ /^([\D]+)([\d]*)$/] }
	       @_;
}


# update_node_ressource: Scan nodes for cpu count and GPU count and update SIS base.
#     - $query_cmd: command to list ressources
#     - $query filter: regex that isolate ressource
#     - $ressource name: text to identify ressource (for messages and logs)
#     - $db_field: database field affected (cpu_num or gpu_num)
#     - $min_count: (can't have 0 cpu, but it's allowed to have 0 gpu).
# Return: 0 if success, -1 else.

sub update_node_ressource($$$$$) {
	my ($query_cmd, $query_filter, $ressource_name, $db_field, $min_count) = @_;
	my @machines= sortclients SIS::NewDB::list_client();
	foreach my $mach (@machines) {
		my $return_code=0;
		my $CMD="/usr/bin/ssh -n ".$mach->{name}." $query_cmd 2> /dev/null";
		oscar_log(5, INFO, "Gathering $ressource_name count from " . $mach->{name});
        oscar_log(7, ACTION, "About to run: $CMD");
		open (CPIPE,"$CMD |") or (oscar_log(5, ERROR, "Failed run $CMD"),next);
		my $count=0;
		while (<CPIPE>) {
			++$count if (/$query_filter/);
		}
		close(CPIPE) or $return_code=$?;
		if ($return_code == 32512) { # Command not found (e.g. no nvidia-smi)
			oscar_log(5, WARNING, "'$query_cmd' not found on Node ".$mach->{name}),next;
		} elsif ($return_code == 65280) { # Node not responding to ssh command
			oscar_log(5, ERROR, "Node ".$mach->{name}." DOWN! (not responding)"),next;
		} elsif ($return_code > 0) { # ????
			oscar_log(5, ERROR, "($return_code) while trying to run: $CMD"),next;
		}

		if (($count !~ /^[0-9]+$/) || ($count < $min_count)) {
			oscar_log(5, ERROR, "Improper count ($count) returned from machine " . $mach->{name});
			return -1;
		} else {
			oscar_log(5, SUBSECTION, "Updating database for machine " .
                                 $mach->{name} . " $db_field=$count.");
			my %data =  (
                		$db_field    => $count,
                	);
			if (OSCAR::Database::update_node (
			    $mach->{'name'},
			    \%data,
			    undef,
			    undef) != 1) {
				oscar_log(5, ERROR, "Failed to update node $ressource_name information");
				return -1;
    			}
		}
	}
    return 0;
}

__END__

=head1 NAME

post_install, a script that finalizes a OSCAR cluster configuration; after the
deployment of compute nodes.

=head1 SYNOPSIS

post_install [OPTIONS]

=head1 OPTIONS

Supported options are:

=over 8

=item --verbose

Display information during execution (set OSCAR_VERBOSE to 5).

=back

=cut

