#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   This script is designed to be run after the image is built.
#   It will do all the fixups required.

use strict;
use lib "$ENV{OSCAR_HOME}/lib","/usr/lib/systeminstaller";
use SIS::Client;
use Carp;
use File::Copy;
use File::Path;
use File::Basename;
use OSCAR::Package;
use AppConfig;


get_numproc();

# This makes sure existing nodes have the latest /etc/hosts. 
# The profile script is execd so we know the path (from opium's post_install)
system(". /etc/profile.d/c3.sh && cpush /etc/hosts") and carp("Couldn't push /etc/hosts to all nodes");

my $return = 0;
my @pkgs = list_install_pkg();
foreach my $pkg (@pkgs) {
    if(!run_pkg_script($pkg,"post_install",1)) {
        carp("Couldn't run 'post_install' script for $pkg");
        $return++;
    }
}

if($return) {
    carp("Some of the post install scripts failed, please check your logs for more info");
} else {
    print "Cluster setup complete!\n";
}

exit($return);


sub get_numproc {
	my @machines=&clientList;
	foreach my $mach (@machines) {
		my $CMD="/usr/bin/ssh -n ".$mach->{HOST}." /bin/grep ^processor /proc/cpuinfo";
		print "Gathering processor count from ".$mach->{NAME}.".\n";
		open (CPIPE,"$CMD |") or (carp("Unable to query machine ".$mach->{NAME}),next);
		my $count=0;
		while (<CPIPE>) {
			$count++;
		}
		close(CPIPE);
		if (($count !~ /^[0-9]+$/) || ($count == 0)) {
			carp("Improper count ($count) returned from machine ".$mach->{NAME});
		} else {
			print "Updating database for machine ".$mach->{NAME}.".\n";
			$mach->{NUM_PROCS}=$count;
			$mach->update;
		}
	}

}

