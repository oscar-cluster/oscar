#!/usr/bin/env perl 
#
# Copyright (c) 2007 Oak Ridge National Laboratory
#               Geoffroy Vallee <valleegr@ornl.gov>
#               All rights reserved
#
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# This script is a simple CLI for OSM.
#
# Input: XML file that describes the package set for the image creation.
# Return: 1 if success, 0 or die else.
#
# Based on the package set describes, this script creates a basic image and
# also populates the database in order to store all needed actions.
#
# $Id: osm_driver 5134 2006-07-12 05:51:29Z valleegr $
#

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::osm qw (
                    osm_array2hash
                    osm_update_oda
                  );
use Data::Dumper;
use OSCAR::Utils qw (print_array);
use OSCAR::ImageMgt qw (
                        delete_image
                        do_oda_post_install
                        do_post_binary_package_install
                        do_setimage
                        get_image_default_settings
                       );
use SystemInstaller::Tk::Common;
use Carp;

my $xml_file_path = shift;

my $verbose = $ENV{OSCAR_VERBOSE};
# We currently force the verbose mode
$verbose = 1;

# Need the output immediately
$| = 1;

# Step 1: We use OSM to parse the XML file and get a hash
print "Parsing the package set...\n" if $verbose;
my $res = OSCAR::psm::select_set ($xml_file_path);

my %config = OSCAR::psm::package_hash();
print Dumper %config;
my @opkgs_to_install = OSCAR::psm::show_list();
print "The package sets includes: ";
print_array (@opkgs_to_install);


# Step 2: We create a basic image.
# We currently use the script 'build_oscar_image_cli'. This is a limitation
# because it only creates an image based on the local Linux distribution.
print "Creating the basic golden image...\n" if $verbose;
# We get the default settings for images.
my %vars = get_image_default_settings ();
$vars{imgname} = "test_osm3";
if ( imageexists("/etc/systemimager/rsyncd.conf", $vars{imgname}) ) {
    print "\"$vars{imgname}\" exists. We delete the previous image\n";
    delete_image ($vars{imgname});
}

my $cmd = "mksiimage -A --name $vars{imgname} " .
        "--location $vars{pkgpath} " .
        "--filename $vars{pkgfile} " .
        "--arch $vars{arch} " .
        "--path $vars{imgpath}/$vars{imgname}" .
        " $vars{extraflags} --verbose";

print "Executing command: $cmd\n";
system ($cmd);

postimagebuild (\%vars);

# Maybe we have to update the file /etc/opm.conf for the image.

# Step 3: We use the hash from OSM to update the database.
print "Updating the database...\n" if $verbose;
my %oda_data = osm_array2hash ("INSTALL", @opkgs_to_install);
osm_update_oda ("Image_Package_Status", %oda_data);
die ("We stop here.");

# Step 4: We call opm to update the image.
print "Executing OPM...\n" if $verbose;
my $cmd = $ENV{OSCAR_HOME}."/src/opm/opm.pm";
die ("ERROR: Impossible to execute $cmd") if (!system ($cmd));

sub postimagebuild {
    my ($vars) = @_;
    my $img = $$vars{imgname};
    my $interface = "eth0";
    my %options;

    print ("Setting up image in the database\n");
    do_setimage ($img, \%options);

    my $cmd = "post_binary_package_install ($img, $interface)";
    print ("Running: $cmd");
    do_post_binary_package_install ($img, $interface);

    do_oda_post_install (%$vars, \%options);
}

