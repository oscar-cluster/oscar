#!/bin/sh
# $Id$
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
#
# ssh/sshd installation script for a linux cluster.
#
# Author: Neil Gorsuch ngorsuch@ncsa.uiuc.edu

# This script is meant to be run on a cluster server.  It installs
# openssh/sshd/scp on the server if required, and configures ssh/sshd on
# the server and it's clients so that any user (including root) can
# transparently ssh or scp from this host or any of the clients to this
# host or any of the clients. It can be run as often as needed, before
# or after adding or deleting clients.  All host keys among the clients
# are set the same as on this server.  All root user keys among the
# clients are set the same as on this server. It is assumed that the
# clients that have not been set up yet have a ~root/.rhosts file
# already set up to allow the server to execute commands as root using
# rsh. 

#--------------------- begin configuration section --------------------

# this script requires them to specify one or more directories
# that are the base directories of system images to be updated.

BASES=""
if [ "`echo $* | wc -w`" -lt 1 ] ; then
    echo $0 exiting - no directory parameters specified
    exit 1
fi
for base in $* ; do 
    if [ -z "$base" -o ! -d "$base" ] ; then
	echo $0 parameter error - ignoring non-directory parameter $base
    else
        BASES="$BASES $base"
    fi
done
if [ `echo $BASES | wc -w` -eq 0 ] ; then
    echo $0 exiting - directory parameters specified but none are directories
    exit 1
fi

# the directory where ssh/sshd puts host configuration data
SSHCFGDIR=/etc/ssh

# temporary files prefix
TEMP="/tmp/`echo $0 | sed 's,^.*/,,g'`.$$."

#------------------------ end configuration section --------------------

# make sure we get rid of temprary files if we are aborted
trap "echo rm -rf $TEMP\* ; rm -rf $TEMP* ; exit 1" 1 2 3 4 5 6 7 8 11 14 15

# create the server ssh configuration directory if needed
dir=$SSHCFGDIR
if [ ! -d $dir ] ; then
    echo mkdir -p $dir
    mkdir -p $dir || exit 1
    echo 755 chmod $dir
    chmod 755 $dir
fi

# make the server host keys if required
file=$SSHCFGDIR/ssh_host_key
echo ; echo checking for host key file $file ...
if [ ! -r $file ] ; then
    echo making host key file $file ...
    echo ssh-keygen -b 1024 -f $file -N ""
    ssh-keygen -b 1024 -f $file -N "" || exit 1
fi
file=$SSHCFGDIR/ssh_host_dsa_key
echo checking for host key file $file ...
if [ ! -r $file ] ; then
    echo ssh-keygen -d -f $file -N ""
    ssh-keygen -d -f $file -N "" || exit 1
fi

# make sure that the server sshd configuration file has
# some important authentication methods turned on

cd $SSHCFGDIR || ( echo cannot cd to $SSHCFGDIR ; exit 1 )

file=ssh_config
echo ; echo checking configuration file $file ...

for wantedyes in ForwardX11; do
    if [ yes`grep "^[[:space:]]*$wantedyes[[:space:]]" $file | awk '{print $2}' | tr A-Z a-z | tail -1` != "yesyes" ] ; then
	echo turning on $wantedyes parameter in configuration file $file ...
	if [ ! -r $file.pre_ssh_install ] ; then
	    if [ -r $file ] ; then
		echo cp -fp $file $file.pre_ssh_install
		cp -fp $file $file.pre_ssh_install || exit 1
	    fi
	fi
        if grep "^[[:space:]]*$wantedyes[[:space:]]" $file 2>/dev/null ; then
	    echo ... by modifying existing line\(s\)
	    sed "s,$wantedyes.*\$,$wantedyes yes,g" <$file >$file.tmp
	    mv $file.tmp $file || exit 1
	else
	    echo ... by adding a line
	    echo "$wantedyes yes" >> $file || exit 1
        fi
    fi
done
for wantedno in StrictHostKeyChecking UsePrivilegedPort ; do
    if [ no`grep "^[[:space:]]*$wantedno[[:space:]]" $file | awk '{print $2}' | tr A-Z a-z | tail -1` != "nono" ] ; then
	echo turning off $wantedno parameter in configuration file $file ...
	if [ ! -r $file.pre_ssh_install ] ; then
	    if [ -r $file ] ; then
		echo cp -fp $file $file.pre_ssh_install
		cp -fp $file $file.pre_ssh_install || exit 1
	    fi
	fi
        if grep "^[[:space:]]*$wantedno[[:space:]]" $file 2>/dev/null ; then
	    echo ... by modifying existing line\(s\)
	    sed "s,$wantedno.*\$,$wantedno no,g" <$file >$file.tmp
	    mv $file.tmp $file || exit 1
	else
	    echo ... by adding a line
	    echo "$wantedno no" >> $file || exit 1
        fi
    fi
done

file=sshd_config
echo ; echo checking configuration file $file ...
SSHVER=` ssh -V 2>&1 | cut -f2 -d'p' | cut -f2 -d'_'`
SSHMINORVER=`echo $SSHVER | cut -f2 -d'.'`
SSHMAJORVER=`echo $SSHVER | cut -f1 -d'.'`

SSHBADMAJORVER=3 
SSHBADMINORVER=7


for wantedyes in IgnoreRhosts X11Forwarding RhostsRSAAuthentication RSAAuthentication ; do
    if [ yes`grep "^[[:space:]]*$wantedyes[[:space:]]" $file | awk '{print $2}' | tr A-Z a-z | tail -1` != "yesyes" ] ; then
	echo turning on $wantedyes parameter in configuration file $file ...
	if [ ! -r $file.pre_ssh_install ] ; then
	    if [ -r $file ] ; then
		echo cp -fp $file $file.pre_ssh_install
		cp -fp $file $file.pre_ssh_install || exit 1
	    fi
	fi
        if grep "^[[:space:]]*$wantedyes[[:space:]]" $file 2>/dev/null ; then
	    echo ... by modifying existing line\(s\)
	    sed "s,$wantedyes.*\$,$wantedyes yes,g" <$file >$file.tmp
	    mv $file.tmp $file || exit 1
	else
	    echo ... by adding a line
	    echo "$wantedyes yes" >> $file || exit 1
        fi
    fi
done

if [ $SSHBADMAJORVER -lt $SSHMAJORVER ] && [ $SSHBADMAJOR -lt $SSHMINORVER ]; then
	echo BAD
fi


for wantedno in RhostsAuthentication ; do
    if [ no`grep "^[[:space:]]*$wantedno[[:space:]]" $file | awk '{print $2}' | tr A-Z a-z | tail -1` != "nono" ] && [ $SSHBADMAJORVER -lt $SSHMAJORVER ] && [ $SSHBADMAJOR -lt $SSHMINORVER ]; then
	echo turning off $wantedno parameter in configuration file $file ...
	if [ ! -r $file.pre_ssh_install ] ; then
	    if [ -r $file ] ; then
		echo cp -fp $file $file.pre_ssh_install
		cp -fp $file $file.pre_ssh_install || exit 1
	    fi
	fi
        if grep "^[[:space:]]*$wantedno[[:space:]]" $file 2>/dev/null ; then
	    echo ... by modifying existing line\(s\)
	    sed "s,$wantedno.*\$,$wantedno no,g" <$file >$file.tmp
	    mv $file.tmp $file || exit 1
	else
	    echo ... by adding a line
	    echo "$wantedno no" >> $file || exit 1
        fi
    fi
done

unset SSHVER SSHMAJORVER SSHMINORVER SSHBADMAJORVER SSHBADMINORVER

# set up root

user=root
echo ; echo setting up user $user on this machine
home=`egrep "^$user\:" /etc/passwd | awk -F: '{print $6}' | tail -1`
if [ `echo $home | wc -w` -ne 1 ] ; then
    echo cannot determine home directory of user $user
else
    echo the home directory for user $user is $home
    echo cd $home
    if ! cd $home ; then
	echo cannot cd to home directory $home
    else

        file=$home/.ssh/id_rsa
        type=rsa
        if [ ! -e $file ] ; then
            echo ssh-keygen -t $type -N \'\' -f $file
            ssh-keygen -t $type -N '' -f $file
            pub="`cat $home/.ssh/id_rsa.pub`"
            keys=$home/.ssh/authorized_keys2
            echo echo $pub \>\> $keys
            echo $pub >> $keys
	fi
    
        file=$home/.ssh/id_dsa
        type=dsa
        if [ ! -e $file ] ; then
            echo ssh-keygen -t $type -N \'\' -f $file
            ssh-keygen -t $type -N '' -f $file
	    pub="`cat $home/.ssh/id_dsa.pub`"
	    keys=$home/.ssh/authorized_keys2
            echo echo $pub \>\> $keys
            echo $pub >> $keys
	fi
	
        file=$home/.ssh/identity
        type=rsa1
        if [ ! -e $file ] ; then
            echo ssh-keygen -t $type -N \'\' -f $file
            ssh-keygen -t $type -N '' -f $file
	    pub="`cat $home/.ssh/identity.pub`"
	    keys=$home/.ssh/authorized_keys
            echo echo $pub \>\> $keys
            echo $pub >> $keys
	fi
    
        echo chmod 600 $home/.ssh/authorized_keys*
        chmod 600 $home/.ssh/authorized_keys*
    
    fi
fi

# now we take care of updating each specified image
for image in $BASES ; do
    echo ; echo checking/updating image $image ...
    echo cp -fpr $SSHCFGDIR $image`dirname $SSHCFGDIR`
    cp -fpr $SSHCFGDIR $image`dirname $SSHCFGDIR`

    # every user except root ends up being taken care of by /home cross-mount
    echo ; echo copying ssh files for $user to image $image
    if [ ! -d $image$home ] ; then
        echo mkdir -p $image$home
        mkdir -p $image$home
        echo chown $user $image$home
        chown $user $image$home
    fi
    echo cp -fpr $home/.ssh $image$home
    cp -fpr $home/.ssh $image$home
done

echo
rm -rf $TEMP* 2>/dev/null
exit 0


