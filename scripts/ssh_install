#!/usr/bin/env perl
#

# $Id$
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
#
#
# ssh/sshd installation script for a linux cluster.
#
# Author: Neil Gorsuch ngorsuch@ncsa.uiuc.edu

# This script is meant to be run on a cluster server.  It installs
# openssh/sshd/scp on the server if required, and configures ssh/sshd on
# the server and it's clients so that any user (including root) can
# transparently ssh or scp from this host or any of the clients to this
# host or any of the clients. It can be run as often as needed, before
# or after adding or deleting clients.  All host keys among the clients
# are set the same as on this server.  All root user keys among the
# clients are set the same as on this server. It is assumed that the
# clients that have not been set up yet have a ~root/.rhosts file
# already set up to allow the server to execute commands as root using
# rsh. 

#--------------------- begin configuration section --------------------

# this script requires them to specify one or more directories
# that are the base directories of system images to be updated.

use strict;
use warnings "all";
use File::Path;
use Getopt::Long;

use OSCAR::Env;
use OSCAR::FileUtils;
use OSCAR::Logger;
use OSCAR::LoggerDefs;
use OSCAR::Utils;
use OSCAR::OCA::OS_Settings;

my ($verbose,$debug,$quiet);
my (@BASES);

sub help () {
    print "Type \"man $0\" for help information\n";
}

sub help_and_die {
    help ();
    exit 1;
}

sub help_and_exit {
    help ();
    exit 0;
}

GetOptions  (
        "verbose"   => \$verbose,
        "debug"     => \$debug,
        "quiet"     => \$quiet,
            ) || help_and_die();

if ($debug) {
    $ENV{OSCAR_VERBOSE} = 10;
    $OSCAR::Env::oscar_verbose=10;
} elsif ($verbose) {
    $ENV{OSCAR_VERBOSE} = 5;
    $OSCAR::Env::oscar_verbose=5;
} elsif ($quiet) {
    $ENV{OSCAR_VERBOSE} = 0;
    $OSCAR::Env::oscar_verbose=0;
}

# GetOptions has taken out the cmd line switches.
# Only images should remain in @ARGV.

# 1st we clean up the args
foreach my $arg (@ARGV) {
    chomp ($arg);
    push (@BASES, $arg);
}

# We check first that the parameters are images directories
foreach my $b (@BASES) {
    if (! -d $b) {
        oscar_log(1, ERROR, "Invalid parameter; $b is not a valid image directory");
        exit 1;
    }
}

# The directory where ssh/sshd puts host configuration data
my $SSHCFGDIR=OSCAR::OCA::OS_Settings::getitem("ssh_configdir");
if (!OSCAR::Utils::is_a_valid_string ($SSHCFGDIR)) {
    oscar_log(1, ERROR, "Unable to get the SSH config directory. Check OS_Settings values.");
    exit 1;
}
if ( ! -d $SSHCFGDIR) {
    File::Path::mkpath ($SSHCFGDIR, 1, 0755) 
        or (oscar_log(1, ERROR, "Unable to create $SSHCFGDIR"), exit 1);
}

#------------------------ end configuration section --------------------

################################################################################
# fix_configfile: Update wanted values in a config file.
#
#     $file: the config file to update
#     %wanted_values: hash with key => value pairs.
#
################################################################################
sub fix_configfile($%) {
    my ($file, %wanted_values) = @_;

    if ( ! -f $file ) {
        oscar_log(1, ERROR, "$file does not exists.");
        exit 1;
    }
    foreach my $key (keys %wanted_values) {
        my $pos = OSCAR::FileUtils::re_line_in_file ("^\\s*$key\\s+.*", $file);
        if ($pos != -1) {
            if (OSCAR::FileUtils::replace_line_in_file ($file, $pos, "$key $wanted_values{$key}")) {
                oscar_log(1, ERROR, "Impossible to add \"$key $wanted_values{$key}\" to $file at line $pos");
                exit 1;
            }
        } else {
            if (OSCAR::FileUtils::add_line_to_file_without_duplication ("$key $wanted_values{$key}\n",
                                                                        $file)) {
                oscar_log(1, ERROR, "Impossible to append line \"$key $wanted_values{$key}\" to $file");
                exit 1;
            }
        }
    }
}

################################################################################
#
# Make sure server has keys.
#
################################################################################
my $cmd;

# make the server host keys if required
# first step: generation of the RSA key
my $file= "$SSHCFGDIR/ssh_host_key";
OSCAR::Logger::oscar_log(5,INFO, "Checking for host key file $file...");
if ( ! -f $file ) {
    OSCAR::Logger::oscar_log(5, INFO, "Making host key file $file...");
    $cmd = "/usr/bin/ssh-keygen -t rsa -b 1024 -f $file -N \"\"";
    if (oscar_system ($cmd)) {
        oscar_log(1, ERROR, "Unable to create host rsa key");
        exit 1;
    }
}

# second step generation of the DSA key
$file= "$SSHCFGDIR/ssh_host_dsa_key";
OSCAR::Logger::oscar_log(5, INFO, "Checking for host key file $file...");
if ( ! -f $file ) {
    $cmd = "/usr/bin/ssh-keygen -t dsa -f $file -N \"\"";
    if (oscar_system ($cmd)) {
        oscar_log(1, ERROR, "Unable to create host dsa key");
        exit 1;
    }
}

################################################################################
#
# Make sure that the head ssh client configuration file has
# some important authentication methods turned on
#
################################################################################
$file = "$SSHCFGDIR/ssh_config";
OSCAR::Logger::oscar_log(1, INFO, "Checking ssh client configuration file $file .");

#1st Create a backup of the original file.
backup_file_if_not_exist($file)
    or oscar_log(1, WARNING, "Unable to create a bacup copy of $file");

# Protocol 2: Enforce ssh v2 (v1 is insecure and v2 is supported anywhere).
# ForwardX11: Forward display.
# StrictHostKeyChecking:no => ~/.ssh/known_hosts automatically updated.
# GSSAPIAuthentication: not used.
my %ssh_config = (
    Protocol => '2',
    ForwardX11 => 'yes',
    StrictHostKeyChecking => 'no',
    GSSAPIAuthentication => 'no',
);

fix_configfile($file,%ssh_config);

################################################################################
#
# Make sure that the head ssh server configuration file has
# some important authentication methods turned on
#
################################################################################
$file= "$SSHCFGDIR/sshd_config";
OSCAR::Logger::oscar_log(5, INFO, "Checking configuration file $file...");

#1st Create a backup of the original file.
backup_file_if_not_exist($file)
    or oscar_log(1, WARNING, "Unable to create a bacup copy of $file");

# Protocol 2: Enforce ssh v2 (v1 is insecure and v2 is supported anywhere).
# AuthorizedKeysFile. 
# X11Forwarding: Forward display.
# PermitRootLogin:yes (it is set to no on Mandriva, thus we need to enforce it.
# IgnoreRhosts: rhosts is insecure.
# RSAAuthentication: Not needed as it's for ssh v1 we do not use.
# RhostsRSAAuthentication: not used (related to ssh v1).
# GSSAPIAuthentication: not used.
my %sshd_config = (
    Protocol => '2',
    AuthorizedKeysFile => '.ssh/authorized_keys',
    X11Forwarding => 'yes',
    PermitRootLogin => 'yes',
    IgnoreRhosts => 'yes',
    RSAAuthentication => 'no',
    RhostsRSAAuthentication => 'no',
    GSSAPIAuthentication => 'no',
);

fix_configfile($file,%sshd_config);


################################################################################
#
# set up root account.
# Create rsa and dsa keys and add them in authorized_keys if needed.
#
################################################################################

my $user= "root";
oscar_log(1, INFO, "Setting up user $user on this machine...");
my $home=`egrep \"^$user\:\" /etc/passwd | awk -F: '{print \$6}' | tail -1`;
if (!OSCAR::Utils::is_a_valid_string ($home)) {
    oscar_log(1, ERROR, "Impossible to detect the home directory for $user");
    exit 1;
}
chomp ($home);
if (! -d $home) {
    oscar_log(1, ERROR, "Cannot determine home directory of user $user");
    exit 1;
} else {
    oscar_log(5, INFO, "The home directory for user $user ".
        "is $home");
    my %ssh_keys = (
        "rsa"   => ["$home/.ssh/id_rsa", "$home/.ssh/authorized_keys"],
        "dsa"   => ["$home/.ssh/id_dsa", "$home/.ssh/authorized_keys"],
#        "rsa1"  => ["$home/.ssh/identity", "$home/.ssh/authorized_keys"],
        );
    my $orig_file;
    my $dest_file;
    foreach my $k (keys (%ssh_keys)) {
        if (! -f $ssh_keys{$k}[0]) {
            oscar_log(1, INFO, "Generating $k key for user $user in $ssh_keys{$k}[0].");
            $cmd = "/usr/bin/ssh-keygen -t $k -N \'\' -f $ssh_keys{$k}[0]";
            if (oscar_system ($cmd)) {
                oscar_log(1, ERROR, "Unable to generate $k key for user $user in $ssh_keys{$k}[0].");
                exit 1;
            }
            $orig_file = "$ssh_keys{$k}[0].pub";
            $dest_file = "$ssh_keys{$k}[1]";
            if (! -f $orig_file) {
                oscar_log(1, ERROR, "File $orig_file does not exist");
                exit 1;
            }
            if (! -f $dest_file) {
                $cmd = "/bin/cat $orig_file > $dest_file";
            } else {
                $cmd = "/bin/cat $orig_file >> $dest_file";
            }
            if (oscar_system ($cmd)) {
                oscar_log(1, ERROR, "Unable to add $orig_file to $dest_file");
                exit 1;
            }
        } else {
            OSCAR::Logger::oscar_log(1, INFO, $ssh_keys{$k}[0]." already exists (kept unmodified)");
        }
    }

    $cmd = "/bin/chmod 600 $home/.ssh/authorized_keys*";
    if (oscar_system ($cmd)) {
        oscar_log(1, ERROR, "Unable to set permission 600 for $home/.ssh/authorized_keys*");
        exit 1;
    }
}


################################################################################
#
# now we take care of updating each specified image
#
################################################################################
if (scalar (@BASES) == 0) {
    oscar_log(1, WARNING, "No image(s) specified for the ssh configuration");
} else {
    oscar_log(1, INFO, "Configuring ssh for the following images:");
    foreach (@BASES) {
        oscar_log(1, NONE, "       - $_");
    }
}

foreach my $image (@BASES) {
    # updating the host ssh configuration in the image
    OSCAR::Logger::oscar_log(1, INFO, "Checking/updating ssh config for image $image .");
    $cmd = "/bin/cp -fpr $SSHCFGDIR/* $image$SSHCFGDIR/";
    if (oscar_system ($cmd)) {
        oscar_log(1, ERROR, "Unable to copy $SSHCFGDIR to $image$SSHCFGDIR");
        exit 1;
    }

    # every user except root ends up being taken care of by /home cross-mount
    OSCAR::Logger::oscar_log(1, INFO, "Copying ssh config for $user to ".
        "image $image$home .");
    if (! -d "$image$home") {
        File::Path::mkpath ("$image$home") 
            or (oscar_log(1, ERROR, "Unable to create $image$home"), exit 1);
        $cmd = "/bin/chown $user $image$home";
        if (oscar_system ($cmd)) {
            oscar_log(1, ERROR, "Unable to set ownsership to $user for $image$home");
            exit 1;
        }
    }
    $cmd = "/bin/cp -fpr $home/.ssh $image$home";
    if (oscar_system ($cmd)) {
        oscar_log(1, ERROR, "Unable to copy $home/.ssh to $image$home");
        exit 1;
    }

    # updating the ssh configuration in the image
#    my $image_ssh_configfile = "$image/etc/ssh/ssh_config";
}

oscar_log(1, INFO, "SSH succesffully configured for OSCAR.");
exit 0

__END__

=head1 DESCRIPTION

ssh_install, a command line tool for OSCAR to setup ssh both on the OSCAR
server and into OSCAR images.

=head1 SYNTAX

ssh_install [OPTIONS] image_directories

=head1 OPTIONS

Recognized options include:

=over 8

=item --quiet

Suppress output messages. Only return code is relevant to see if command succeeded.

=item --verbose

Display more information during script execution.

=item --debug

Display even more information during script execution.

=back

=head1 AUTHORS

=over 8

=item Neil Gorsuch

=item Geoffroy Vallee

=item Olivier Lahaye

=back

=cut
