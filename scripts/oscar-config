#!/usr/bin/env perl
#

#
# Copyright (c) 2007-2008 Oak Ridge National Laboratory.
#                         Geoffroy R. Vallee <valleegr@ornl.gov>
#                         All rights reserved.
#
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#

#
# $Id$
#

use strict;
use Carp;
use Cwd qw(chdir cwd);
use Getopt::Long;
use OSCAR::Utils;
use warnings "all";

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

my ($distro_to_setup,
    $distro_repo,
    $distro_repo_to_mirror,
    $distro_repo_to_use,
    $headnode_nic,
    $oscar_repo,
    $oscar_repo_to_use,
    $oscar_repo_to_mirror,
    $sanity_check,
    $startover,
    $network,
    $bootstrap,
    $verbose,
    $debug);

GetOptions(
        "bootstrap"                     => \$bootstrap,
        "debug"                         => \$debug,
        "display-default-distro-repo=s" => \$distro_repo,
        "display-default-oscar-repo=s"  => \$oscar_repo,
        "generate-config-file"          => \&generate_config_file,
        "list-setup-distros"            => \&display_list_setup_distros,
        "sanity-check"                  => \$sanity_check,
        "setup-distro=s"                => \$distro_to_setup,
        "startover"                     => \$startover,
        "supported-distros"             => \&display_list_supported_distros,
        "update-nic"                    => \$headnode_nic,
        "use-distro-repo=s"             => \$distro_repo_to_use,
        "use-oscar-repo=s"              => \$oscar_repo_to_use,
#         "network"                       => \$network,
        "verbose"                       => \$verbose,
        "help"                          => \&help,
        ) || help_and_exit();


################################################################################
# Boostrap OSCAR (install prereqs, setup the system, install core packages on  #
# the server side.                                                             #
#                                                                              #
# Input: None.                                                                 #
# Return: The function is called directly, we exit with 0 if success, 1 if     #
#         error.                                                               #
################################################################################
sub bootstrap () {
    OSCAR::Logger::init_log_file ("/var/log/oscar/bootstrap.log");
    OSCAR::Logger::oscar_log_section "OSCAR bootstrap";
    # First of all we check if the OSCAR_HOME environment variable is set or not
    # This variable is currently mandatory for the usage of OSCAR.
#     if ($ENV{OSCAR_HOME} eq "") {
#         use lib cwd() . "/lib"; # case where the script is used from the actual
#                                 # OSCAR_HOME
#         require OSCAR::Env;
#         OSCAR::Env::oscar_home_env();
#         if ($ENV{OSCAR_HOME} eq "") {
#             print "ERROR: Impossible to set OSCAR_HOME.\n";
#             return -1;
#         }
#     }

    # From now we should be able to use some OSCAR modules! :-)

    require OSCAR::Bootstrap;
    my $configurator = OSCAR::Bootstrap::bootstrap_stage0();
    if (!defined $configurator) {
        carp "ERROR: Impossible to complete stage 0 of the bootstrap.";
        return -1;
    }

    if (OSCAR::Bootstrap::oscar_bootstrap ($configurator)) {
        carp "ERROR: Impossible to bootstrap OSCAR";
        return -1;
    }

    OSCAR::Logger::oscar_log_section "Successfully bootstrapped OSCAR";
    return 0;
}

################################################################################
# Display the list of supported distros by OSCAR.                              #
#                                                                              #
# Input: None.                                                                 #
# Return: None.                                                                #
################################################################################
sub display_list_supported_distros () {
    require OSCAR::Distro;
    # We get the list of supported distros
    my $verbose = 1;
    my @distros = OSCAR::Distro::get_list_of_supported_distros ();
    # The command line output is used by other tools so we are careful about
    # displaying only usefull information.
    foreach my $d (@distros) {
        print $d . " ";
    }
    print "\n";
}

################################################################################
# Display the list of setup distros (distros OSCAR can use for image creation  #
# and cluster deployment.                                                      #
#                                                                              #
# Input: None.                                                                 #
# Return: None.                                                                #
################################################################################
sub display_list_setup_distros () {
    require OSCAR::PackagePath;
    # We check if one of these distros is setup (i.e. if /tftpboot is correctly
    # populated.
    my @list = OSCAR::PackagePath::get_list_setup_distros ();
    if (!scalar (@list)) {
        print "No distribution is setup for OSCAR\n";
    } else {
        # The output can be used by other tools (such as OSCAR GUIs), we are
        # carefull displaying only the list.
        foreach my $d (@list) {
            print "$d ";
        }
        print "\n";
    }
}

################################################################################
# Generate a default configuration file based on OSCAR_HOME, This allows one   #
# to create a configuration for a SVN check-out. In other terms, this is way   #
# to support easily both the usage of OSCAR_HOME and a direct installation of  #
# OSCAR into the system.                                                       #
#                                                                              #
# Input: None.                                                                 #
# Return: exit 0 if success, exit 1 else.                                      #
################################################################################
sub generate_config_file () {
    if (! -d "/etc/oscar/") {
        mkdir "/etc/oscar";
    }
    if (! -f "/etc/oscar/oscar.conf") {
        require File::Copy;
        my $template;
        if (defined $ENV{OSCAR_HOME}) {
            $template = "$ENV{OSCAR_HOME}/share/etc/templates/oscar.conf";
        } else {
            $template = "/etc/oscar/templates/oscar.conf";
        }
        if (defined $ENV{OSCAR_HOME}) {
            my $cmd1 = "echo $ENV{OSCAR_HOME} | sed 's/\\//\\\\\\\//g'";
            my $pwd = `$cmd1`;
            chomp($pwd);
            my $cmd = "sed 's/PATH = /PATH = $pwd\\//g' $pwd/share/etc/templates/oscar.conf > /etc/oscar/oscar.conf";
            `$cmd`;
        } else {
            File::Copy::copy ("$template", "/etc/oscar/oscar.conf");
            print "Template of the OSCAR config file has been copied in ".
                  "/etc/oscar, please check whether the config file matches ".
                  "your configuration or not.\n";
        }
    } else {
        if ( -f "/etc/oscar/oscar.conf") {
            print "[INFO] configuration file already exists, no updating\n";
            exit 0;
        }
        print "Not yet implemented\n";
        exit 1;
    }
    exit 0;
}

sub help {
    print "Usage: $0 OPTION\n";
    print "\n";
    print "Setup OSCAR for Cluster management.\n";
    print "For more details, please refer to the man page (man oscar-config)\n";
    print "\n";
}

sub help_and_exit {
    help ();
    exit 1;
}


my $initial_verbose_value = 0;
$initial_verbose_value = $ENV{OSCAR_VERBOSE} if (defined $ENV{OSCAR_VERBOSE});
if ($debug) {
    $ENV{OSCAR_VERBOSE} = 10;
}
if ($verbose) {
    $ENV{OSCAR_VERBOSE} = 5;
}

if ($startover) {
    require OSCAR::Startover;
    if (OSCAR::Startover::start_over()) {
        die "ERROR: Impossible to start over, please bootstrap OSCAR again ".
            "to try to recover";
        }
    goto EXIT_SUCCESS;
}

if ($distro_repo) {
    require OSCAR::PackagePath;
    require OSCAR::Distro;
    # We display the distro repo that is used with the distro
    my $url = OSCAR::PackagePath::get_default_distro_repo ($distro_repo);
    print "$url\n";
}

if ($oscar_repo) {
    require OSCAR::Distro;
    require OSCAR::PackagePath;
    # We display the OSCAR repo that is used with the distro
    my $url = OSCAR::PackagePath::get_default_oscar_repo ($oscar_repo);
    print "$url\n";
}

if ($distro_to_setup) {
    require OSCAR::PackagePath;
    require OSCAR::Distro;
    require OSCAR::Logger;
    require OSCAR::Utils;

    OSCAR::Logger::oscar_log_section ("Setting $distro_to_setup...");

    # We check first if the distro is supported
    my @distros = OSCAR::Distro::get_list_of_supported_distros ();
    if (OSCAR::Utils::is_element_in_array ($distro_to_setup, @distros) == 0) {
        die "ERROR: Unsupported distro ($distro_to_setup)";
    }

    # We setup the distro repos (configuration files in /tftpboot/distro).
    if (OSCAR::Utils::is_a_valid_string ($distro_repo_to_use) == 0) {
        OSCAR::Logger::oscar_log_subsection ("... using default distro repo");
        if (OSCAR::PackagePath::use_default_distro_repo ($distro_to_setup)) {
            die "ERROR: Impossible to set the default distro repo";
        }
    } else {
        OSCAR::Logger::oscar_log_subsection ("... using $distro_repo_to_use");
        OSCAR::PackagePath::use_distro_repo ($distro_to_setup,
                                             $distro_repo_to_use);
    }

    # We setup the OSCAR repos (configuration files in /tftpboot/oscar).
    if (OSCAR::Utils::is_a_valid_string ($oscar_repo_to_use) == 0) {
        OSCAR::Logger::oscar_log_subsection ("... using default OSCAR repo");
        if (OSCAR::PackagePath::use_default_oscar_repo ($distro_to_setup)) {
            die "ERROR: Impossible to set the default repository";
        }
    } else {
        OSCAR::Logger::oscar_log_subsection ("... using $oscar_repo_to_use");
        OSCAR::PackagePath::use_oscar_repo ($distro_to_setup,
                                             $oscar_repo_to_use);
    }

    goto EXIT_SUCCESS;
}

# if ($network) {
#     my $cmd = "$ENV{OSCAR_HOME}/scripts/system-sanity.d/network-check.pl";
#     my $net_config = system($cmd);
#     if ($net_config != 0) {
#         print "Configuration issues detected, configuring the network...\n"
#     }
# }

if ($headnode_nic) {
    OSCAR::Logger::oscar_log_subsection "--> Updating the NIC used on the ".
        "headnode for cluster management\n";
    require OSCAR::Network;
    if (OSCAR::Network::update_head_nic ()) {
        die "ERROR: Impossible to update the headnode NIC data";
    }
}

if ($sanity_check) {
    require OSCAR::ConfigFile;
    my $binaries_path = OSCAR::ConfigFile::get_value ("/etc/oscar/oscar.conf",
                                                      undef,
                                                      "OSCAR_SCRIPTS_PATH");
    if (system ("$binaries_path/system-sanity")) {
        die "ERROR: Impossible to successfully execute system-sanity";
    }
}

if ($bootstrap) {
    if (bootstrap()) {
        die "ERROR: Impossible to bootstrap OSCAR";
    }
}

EXIT_SUCCESS:
$ENV{OSCAR_VERBOSE} = $initial_verbose_value;
exit 0;


__END__

=head1 NAME

oscar-config, a command line tool for OSCAR configuration.

=head1 SYNOPSIS

oscar-config OPTIONS

=head1 DESCRIPTION

oscar-config is a command line tool for OSCAR configuration, from OSCAR
bootstrapping to repository configuration. It also allow users to get 
information about the current OSCAR configuration.

=head1 SYNTAX

oscar-config [options]

=head1 OPTIONS

Recognized options include:

=over 8

=item --bootstrap

Bootstrap OSCAR, i.e., install all the OSCAR prereqs, setup the database, and
install and setup everything for the creation of a OSCAR headnode.

=item --generate-config-file

Generate the appropriate configuration file based on the OSCAR_HOME environment
variable. The configuration file is /etc/oscar/oscar.conf, the file is generated
only if it does not already exist. If the file already exist, it just exist
without generating an error.

=item --setup-distro <DISTRO_ID>

Setup the Linux distribution DISTRO_ID (which is one the distribution ids
displayed by the --supported-distros option). The repositories used are those
specified in the 'supported-distros.xml' file if no --mirror-<distro|oscar>-from
option is used.

=item --list-setup-distros

List the Linux distributions that are already setup for OSCAR.

=item --supported-distros

List the Linux distributions supported by OSCAR.

=item --display-defaut-distro-repo <DISTRO_ID>

Display the default distribution repository.

=item --display-defaut-oscar-repo <DISTRO_ID>

Display the default OSCAR repository.

=item --use-distro-repo <REPO_URL>

Use a given repository instead of the default repository for a given Linux
distribution.

=item --use-oscar-repo <REPO_URL>

Use a given repository for OSCAR instead of the default repository.

=item --sanity-check

Check the system status. It actually executes the system-sanity script.

=item --startover

Reset OSCAR, typically removing binary packages and the OSCAR database. Useful for testing.

=item --update-nic

Update the NIC used by OSCAR for cluster management. The NIC identifier is specified in the '/etc/oscar/oscar.conf' configuration file.

=item --help

This help information.

=item verbose

=item debug

Display even more debugging information than the verbose option.

=back

=head1 AUTHOR

Geoffroy Vallee <valleegr@ornl.gov>

=head1 SEE ALSO

perl(1)

=cut
