#!/usr/bin/env perl
#
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# $Id$
#
# Copyright (c) 2006 Erich Focht <efocht@hpce.nec.com>
#                    All rights reserved.
# Copyright (c) 2008 Geoffroy Vallee <valleegr@ornl.gov>
#                    Oak Ridge National Laboratory
#                    All rights reserved.

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use POSIX;
use Carp;
use OSCAR::OCA::OS_Detect;
use OSCAR::PackagePath;
use Getopt::Long;
use Data::Dumper;

sub vprint;

# Different distros require different binary packages. 
# Different architectures, too.

# configure command line options parsing
Getopt::Long::Configure("ignore_case"); # ignore case
Getopt::Long::Configure("auto_abbrev"); # allow abbreviated input

my %options;
GetOptions( \%options,
	    'image|i=s',
	    'node|n=s',
	    'pool|p=s',
	    'help|h',
	    'verbose|v',
            ) || usage();

usage() if ($options{help} || scalar(@ARGV));

################################
## Do the job
################################

my $os;
if ($options{pool}) {

    print "Detecting distro pool $options{pool}:\n";
    $os = OSCAR::OCA::OS_Detect::open(pool => $options{pool});
    die "Unable to determine operating system (pool: $options{pool})" 
        if (!$os);
    &print_os_info($os);
    print "Detected os structure :\n".Dumper($os);

} elsif ($options{image}) {

    &print_image_detect($options{image});

} elsif ($options{node}) {

    # this must be "node" detection, so:
    # - find image corresponding to this node
    # - detect its OS

    eval { use lib '/usr/lib/systeminstaller'; };
    eval { require SIS::Client; require SIS::Image; require SIS::DB; };
    if ($@) {
	print "You probably don't have SystemInstaller on your system!\n";
	print "Cannot access SIS database.\n";
	exit 1;
    }

    my $node = $options{node};
    my @clients;
    eval { @clients = SIS::DB::list_client(hostname => $node); };
    if (!@clients) {
	eval { @clients = SIS::DB::list_client(name => $node); };
    }
    die "Unable to find node $node in SIS database.\n" if (!@clients);

    my $img = $clients[0]->imagename;
    die "No image name defined for client $img" if (!$img);
    my @images;
    eval { @images = SIS::DB::list_image(name => $img); };
    die "Image $img not found in SIS database" if (!@images);
    my $imagepath = $images[0]->location;

    &print_image_detect($imagepath);

} else {
    # we want to know the distro ID of the local system
    my $os = OSCAR::OCA::OS_Detect::open ("/");
    if (!defined $os) {
        die "ERROR: Impossible to detect the local distro.\n".
            "Is your system supported by OSCAR?\n";
    }
    my $distro_id = 
        "$os->{distro}-$os->{distro_version}.$os->{distro_update}-$os->{arch}";
    print_image_detect("/");
}
exit 0;

############################################################################
######## only subroutines below
############################################################################

# TODO: should not be there but in OSCAR::Utils
sub vprint {
    print @_ if ($options{verbose});
}

sub print_image_detect {
    my ($img) = @_;

    my $os = OSCAR::OCA::OS_Detect::open($img);
    die "Unable to determine operating system" if (!$os);
    my @distro_repos = split(",",&distro_repo_url($img));
    my @oscar_repos = split(",",&oscar_repo_url($img));
    if ($options{node}) {
	# for repos local to master prepend http://.../repo
	# in the expectation that they are exported
	for (@distro_repos, @oscar_repos) {
	    if (!/^(http|ftp):/ && /^\//) {
		$_ = "http://oscar_server/repo".$_;
	    } elsif (/^file:/) {
		s,^file:,http://oscar_server/repo,;
	    }
	}
    }
    print "Distro package url : ".join(",",@distro_repos)."\n";
    print "OSCAR package pool : ".join(",",@oscar_repos)."\n";

    &print_os_info($os);
    vprint("Detected os structure :\n".Dumper($os));
}

sub print_os_info {
    my ($os) = @_;
    print "distribution: ".$os->{distro}."\n";
    print "distribution version: ".$os->{distro_version}."\n";
    print "compat distribution: ".$os->{compat_distro}."\n";
    print "compat distrover: ".$os->{compat_distrover}."\n";
    print "packaging method: ".$os->{pkg}."\n";
}

sub usage {
    print <<END_USAGE;
Usage: distro-query [options]

 Print OS_Detect information. If no options are specified, print OS_Detect
 information for the local system.

 Options:
   --image|-i IMAGE_PATH : detect distro and architecture of an image directory
   --pool|-p path        : detect distro and architecture of a package pool
   --node|-n node_name   : detect distro and architecture of a node
   --help|-h             : display this help text
END_USAGE
   exit(1);
}

