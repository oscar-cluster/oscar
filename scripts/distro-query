#!/usr/bin/env perl
#
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# $Id$
#
# Copyright (c) 2006 Erich Focht <efocht@hpce.nec.com>
#                    All rights reserved.

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use POSIX;
use Carp;
use OSCAR::OCA::OS_Detect;
use OSCAR::PackagePath;
use Getopt::Long;
use lib '/usr/lib/systeminstaller';
use SIS::Client;
use SIS::Image;
use SIS::DB;
use Data::Dumper;

sub vprint;

# One must always protect oneself.
#
die "\$OSCAR_HOME: not defined.\n" unless exists $ENV{OSCAR_HOME};
die "$ENV{OSCAR_HOME}: not a directory.\n" unless -d $ENV{OSCAR_HOME};
die "$ENV{OSCAR_HOME}: not accessible.\n" unless -x $ENV{OSCAR_HOME};

# Different distros require different RPMs. Different architectures, too.

# configure command line options parsing
Getopt::Long::Configure("ignore_case"); # ignore case
Getopt::Long::Configure("auto_abbrev"); # allow abbreviated input

my %options;
GetOptions( \%options,
	    'image|i=s',
	    'node|n=s',
	    'pool|p=s',
	    'help|h',
	    'verbose|v',
            ) || usage();

usage() if ($options{help});

################################
## Do the job
################################

my $os;
if ($options{pool}) {

    print "Detecting distro pool $options{pool}:\n";
    $os = OSCAR::OCA::OS_Detect::open(pool => $options{pool});
    die "Unable to determine operating system" if (!$os);
    print "Detected os structure :\n".Dumper($os);

} elsif (!$options{node}) {

    &print_image_detect($options{image});

} else {

    my $node = $options{node};
    my @clients;
    @clients = list_client(hostname => $node);
    if (!@clients) {
	@clients = list_client(name => $node);
    }
    die "Unable to find node $node in SIS database.\n" if (!@clients);

    my $img = $clients[0]->imagename;
    die "No image name defined for client $img" if (!$img);
    my @images = list_image(name => $img);
    die "Image $img not found in SIS database" if (!@images);
    my $imagepath = $images[0]->location;

    &print_image_detect($imagepath);

}
exit 0;

############################################################################
######## only subroutines below
############################################################################

sub vprint {
    print @_ if ($options{verbose});
}

sub print_image_detect {
    my ($img) = @_;

    my $os = OSCAR::OCA::OS_Detect::open($img);
    die "Unable to determine operating system" if (!$os);
    print "Distro package url : ".&distro_repo_url($img)."\n";
    print "OSCAR package pool : ".&oscar_repo_path($img)."\n";
    print "Detected os structure :\n".Dumper($os) if ($verbose);
}


sub usage {
    print <<END_USAGE;
Usage: distro-query [options]

 Print OS_Detect information.

 Options:
   --image|-i IMAGE_PATH : detect distro and architecture of an image directory
   --pool|-p path        : detect distro and architecture of a package pool
   --node|-n node_name   : detect distro and architecture of a node
   --help|-h             : display this help text
END_USAGE
   exit(1);
}

