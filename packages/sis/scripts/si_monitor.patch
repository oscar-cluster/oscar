--- /usr/sbin/si_monitor	(Revision 3797)
+++ /usr/sbin/si_monitor	(Arbeitskopie)
@@ -151,23 +151,15 @@
 # Reaping zombie child processes.
 $SIG{CHLD} = 'IGNORE';
 
-# Start daemon.
-my $daemon_pid;
-if ($daemon_pid = fork()) {
-	# Run in background.
-	exit(0);
-} elsif (defined($daemon_pid)) {
-	setsid or die gmtime() . ": error: can't start a new session: $!\n";
-	# Create the pid file.
-	local *FILE;
-	open(FILE, ">$pid_file") or
-		die gmtime() . ": error: cannot open file: $pid_file\n";
-	print FILE "$$\n";
-	close(FILE);
-} else {
-	die gmtime() . ": error: cannot fork daemon process!\n";
-}
+# Create a new process session.
+setsid or die gmtime() . ": error: can't start a new session: $!\n";
 
+# Create the pid file.
+open(FILE, ">$pid_file") or
+	die gmtime() . ": error: cannot open file: $pid_file\n";
+print FILE "$$\n";
+close(FILE);
+
 # Define lock files.
 my $lock_file = $conf{'lock_dir'} . "/db.si_monitor.lock";
 
--- /etc/init.d/systemimager-server-monitord	(Revision 3797)
+++ /etc/init.d/systemimager-server-monitord	(Arbeitskopie)
@@ -43,14 +43,28 @@
         echo -e "failed.\nPID file $PIDFILE exists.  Must be already running."
         exit 1
     fi
+    # Check if ithreads are supported.
+    if perl -e 'use Config; exit ($Config{useithreads} ne "define");'; then
+        SI_MONITOR=`which si_monitor 2>/dev/null`
+    else
+        SI_MONITOR="`which perl 2>/dev/null` -Mforks -Mforks::shared `which si_monitor`"
+        cat << EOF
+
+WARNING: your version of perl doesn't support ithreads!
+
+It's strongly suggested to use a threaded perl (built with 'useithreads').
+
+Falling back to thread emulation via perl-forks...
+EOF
+    fi
     if [ ! -z $LOGFILE ]; then
-        si_monitor --log $LOGFILE --log_level $LOGLEVEL
+        $SI_MONITOR --log $LOGFILE --log_level $LOGLEVEL 0>/dev/null >&0 2>&0 &
     else
-        si_monitor
+        $SI_MONITOR 0>/dev/null >&0 2>&0 &
     fi
     if [ $? -ne 0 ]; then
         echo failed.
-	exit 1
+        exit 1
     else
         echo ok.
     fi
