--- /usr/lib/systeminstaller/SystemInstaller/Tk/AddClients.pm.orig	2003-04-09 10:31:40.000000000 -0700
+++ /usr/lib/systeminstaller/SystemInstaller/Tk/AddClients.pm	2005-03-23 20:09:40.000000000 -0800
@@ -36,6 +36,7 @@
 
     my $window = shift;
     my %vars = (
+                title => "Add Clients to an SIS Image",
                 imgname => "",
                 basename => "",
                 domainname => "",
@@ -51,16 +52,6 @@
                 @_,
                );
 
-    my %defaults = %vars;
-    my %noshow = %{$vars{noshow}};
-
-    my $addclient_window = $window->Toplevel();
-    $addclient_window->title("Add Clients to a SIS Image");
-
-    #
-    #  First line:  What is your image name?
-    # 
-
     # Get the list of images and remove the default selection
     my @allimages= list_image();
     my @mostimages;
@@ -74,9 +65,25 @@
     }
     # If the default selection wasn't found, just use 
     # the first defined image.
-    unless ($defimage) {
-        $defimage=shift(@mostimages);
-    }
+    $defimage = shift(@mostimages) unless $defimage;
+
+    unless( $defimage ) {
+        error_window($window,"You must build at least one image!");
+        $window->Unbusy();
+        return;
+	}
+
+
+    my %defaults = %vars;
+    my %noshow = %{$vars{noshow}};
+
+    my $addclient_window = $window->Toplevel();
+    $addclient_window->withdraw;
+    $addclient_window->title($vars{title});
+
+    #
+    #  First line:  What is your image name?
+    # 
 
     my $imagebox=label_listbox_line($addclient_window, "Image Name", $defimage, \@mostimages,
                      helpbutton($addclient_window, 'Image Name Addclients')) unless $noshow{imgname};
@@ -94,9 +101,10 @@
     label_entry_line($addclient_window, "Base Name", \$vars{basename},"",
                      helpbutton($addclient_window, 'Base Name')) unless $noshow{basename};
 
-    label_entry_line($addclient_window, "Number of Hosts", \$vars{numhosts},"",
+    my $numentry=label_entry_line($addclient_window, "Number of Hosts", \$vars{numhosts},"",
                      helpbutton($addclient_window, 'Number of Hosts')) unless $noshow{numhosts};
 
+    $vars{startinghostnum} = nexthostnum( $vars{basename} ) || $vars{startinghostnum};
     label_entry_line($addclient_window, "Starting Number", \$vars{startinghostnum},"",
                      helpbutton($addclient_window,'Starting Number')) unless $noshow{startinghostnum};
     # Number padding
@@ -109,7 +117,7 @@
     #
 
 
-
+    $vars{startip} = nextip() || $vars{startip};
     label_entry_line($addclient_window, "Starting IP", \$vars{startip},"",
                      helpbutton($addclient_window, 'Starting IP')) unless $noshow{startip};
     label_entry_line($addclient_window, "Subnet Mask", \$vars{netmask},"",
@@ -131,12 +139,13 @@
 
     my $activate_button = $addclient_window->Button(
                                                 -text => "Addclients",
-                                                -command => [\&run_addclients, $addclient_window, $imagebox, \%vars],
+                                                -command => [\&run_addclients, $addclient_window, $imagebox, $numentry, \%vars],
                                                 -pady => 8,
                                                 -padx => 8,
                                                );
 
     $reset_button->grid($activate_button, quit_button($addclient_window) , -sticky => "nesw");
+    center_window( $addclient_window );
 
 }
 
@@ -164,7 +173,7 @@
 }
 
 sub run_addclients {
-    my ($window, $imagebox, $vars) = @_;
+    my ($window, $imagebox, $numentry, $vars) = @_;
     $window->Busy(-recurse => 1);
     my %hashkeys = (
                     numhosts => 'count',
@@ -177,6 +186,14 @@
                     padding => 'pad',
                    );
 
+    unless( $$vars{numhosts} > 0 ) {
+        error_window($window,"You must add at least one host!");
+        $window->Unbusy();
+        $numentry->focus;
+        $numentry->selectionRange( 0, "end" );
+        return undef;
+    }
+
     my @imagesel=$imagebox->curselection;
     my $imagename=$imagebox->get($imagesel[0]);
 
@@ -207,8 +224,35 @@
     }
 
     done_window($window, "Successfully created clients for image $$vars{imgname}");
+
+    $$vars{startinghostnum} = nexthostnum( $$vars{basename} ) || $$vars{startinghostnum};
+    $$vars{startip} = nextip() || $$vars{startip};
+    $window->update();
+
     $window->Unbusy();
     return 1;
 }
 
+sub nexthostnum($)
+{
+    my $bn = quotemeta shift;
+
+    my @hosts = grep { /^$bn\d/ } map { $_->name } list_client();
+    return 1 + (sort { $a <=> $b } map { /(\d+)$/ } @hosts)[-1] if @hosts;
+}
+
+sub nextip()
+{
+    my @allip = map { $_->ip } list_adapter();
+    if( @allip ) {
+        my $lastip = hex( (sort map { sprintf "%.2x%.2x%.2x%.2x", split /\./, $_ } @allip)[-1] );
+        my $x;
+        do {
+            $lastip++;
+            $x = sprintf "%8.8x", $lastip;
+        } while $x =~ /00$/ || $x =~ /ff$/;
+        return join( ".", map { (sprintf "%d", hex $_) } ($x =~ /../g));
+    }
+}
+
 1;
--- /usr/lib/systeminstaller/SystemInstaller/Tk/Common.pm.orig	2002-12-17 09:25:49.000000000 -0800
+++ /usr/lib/systeminstaller/SystemInstaller/Tk/Common.pm	2005-03-23 19:31:31.000000000 -0800
@@ -28,6 +28,7 @@
              resethash
              imageexists
              init_si_config
+             center_window
              done_window
              error_window
             );
@@ -52,7 +53,8 @@
             $selector->configure(-directory => $dir2);
         }
     }
-    $$var = $selector->Show();
+    my $t = $selector->Show();
+    $$var = $t if $t && -e $t;
 }
 
 sub reset_window {
@@ -73,38 +75,61 @@
     $window->destroy;
 }
 
+# Just the standard Tk window centering code...
+#
+sub center_window {
+    my $w = shift;
+    my $p = $w->parent();
+
+    $w->withdraw() if $w->viewable();
+
+    $w->idletasks;
+    my $x = int( ($w->screenwidth - $w->reqwidth)/2 );
+    my $y = int( ($w->screenheight - $w->reqheight)/2 );
+    if( $p ) {
+        $x -= int( $p->vrootx/2 ) if $p->vrootx;
+        $y -= int( $p->vrooty/2 ) if $p->vrooty;
+    }
+    $w->geometry( "+$x+$y" );
+
+    $w->deiconify();
+
+}
+
 sub done_window {
-    my ($window, $message, $onclose, @args) = @_;
-    my $done = $window->Toplevel();
-    $done->title("Done!");
-    my $label = $done->Message(-text => $message, 
-                               -foreground => "blue",
-                              );
-    $label->grid();
-    my $button = $done->Button(
-                               -text=>"Close",
-                               -command=> [\&close_after, $done, $onclose, @args],
-                               -pady => 8,
-                               -padx => 8,
-                              );
-    $button->grid();
+    my ($w, $message, $onclose, @args) = @_;
+
+    my $dialog = $w->Dialog(
+        -title => 'Done!',
+        -bitmap => 'info',
+        -text => $message,
+        -default_button => 'OK',
+        -buttons => [ 'OK' ],
+        );
+    $dialog->Show();
+
+    &$onclose( @args ) if ref( $onclose ) eq 'CODE';
+
+    1;
 }
 
 sub error_window {
-    my ($window, $message, $onclose, @args) = @_;
-    my $done = $window->Toplevel();
-    $done->title("ERROR!");
-    my $label = $done->Message(-text => $message, 
-                               -foreground => "red",
-                              );
-    $label->grid();
-    my $button = $done->Button(
-                               -text=>"Close",
-                               -command=> [\&close_after, $done, $onclose, @args],
-                               -pady => 8,
-                               -padx => 8,
-                              );
-    $button->grid();
+    my ($w, $message, $onclose, @args) = @_;
+
+    my $dialog = $w->Dialog(
+        -title => 'ERROR!',
+        -bitmap => 'error',
+        -text => $message,
+        -default_button => 'OK',
+        -buttons => [ 'OK' ],
+        );
+    $dialog->Subwidget( 'bitmap' )->configure( -foreground => 'red' );
+    $dialog->Subwidget( 'message' )->configure( -foreground => 'red' );
+    $dialog->Show();
+
+    &$onclose( @args ) if ref( $onclose ) eq 'CODE';
+
+    1;
 }
 
 sub init_si_config {
@@ -154,7 +179,8 @@
     my $label = $window->Label(-text => "$labeltext: ",
                                -anchor => "w");
     my $entry = $window->Entry(-textvariable => $variable, @options);
-    $label->grid($entry,@morewidgets);
+    $label->grid($entry,@morewidgets, -sticky => "nesw");
+    return $entry;
 }
 
 # This creates a small list box with 1 item ($selection) selected.
--- /usr/lib/systeminstaller/SystemInstaller/Tk/Help.pm.orig	2003-04-09 10:31:41.000000000 -0700
+++ /usr/lib/systeminstaller/SystemInstaller/Tk/Help.pm	2005-02-15 12:07:44.000000000 -0800
@@ -28,9 +28,10 @@
          "Package File" => "Package File:\n\nThis option specifies a text file which contains a list of all the packages that should be installed.\nThere are various samples for several distributions under /usr/share/systeminstaller/distinfo",
          "Disk File" => "Disk File:\n\nThis option specifies a text file which contains the disk partitiontion table for the image.\n\nFor more information on the format please see the mksidisk man page. There is a sample disktable in /usr/share/doc/systeminstaller-<version>/disktable.",
          "Target Architecture" => "Target Architecture:\n\nThis option specifies what architecture the images should be built for.  The value will default to the current architecture.\n\nThere is some support for cross architecture image building, though it is mostly untested.",
-         "Post Install Action" => "Post Install Action:\n\nThis option specifies what the client should do after installation has completed.  There options are:\n\nbeep - Clients will beep incessantly after succussful completion of an autoinstall.\n\nreboot - Clients will reboot themselves after successful completion of an autoinstall.\n\nshutdown -- Clients will halt themselves after successful completion of an autoinstall.",
+         "Post Install Action" => "Post Install Action:\n\nThis option specifies what the client should do after installation has completed.  The options are:\n\nbeep - Clients will beep incessantly after succussful completion of an autoinstall.\n\nreboot - Clients will reboot themselves after successful completion of an autoinstall.\n\nshutdown -- Clients will halt themselves after successful completion of an autoinstall.",
          "Virtual Disk" => "Virtual Disk:\n\nSpecify a virtual disk device for the Iseries machine.  The specified device will have the image copied to it, and can serve as a master virtual disk, that can be replicated using CPYNWSSTG commands.  WARNING:The contents of the  device  specified here will be completely destroyed.",
          "IP Method" => "IP Assignment Method:\n\nThis option specifies how ip addresses will be assigned to clients. The options are:\n\ndhcp -- A DHCP server will assign IP addresses dynamically to clients installed. They may be assigned a different address each time.\n\nstatic -- The IP address the client uses during autoinstall will be permanently assigned to that client.\n\nreplicant -- Don't mess with the network settings in this image.  I'm using it as a backup and quick restore mechanism for a single machine.",
+         "Multicast" => "Multicast:\n\nPlease refer to the \"OSCAR Installation Guide\", Multicast Installs with SystemImager, for more information.\n\nNOTE: Multicast support is experimental and highly dependent on your network.",
          #### Now we get the Addclients Help
          "Image Name Addclients" => "Image Name:\n\nThe name of the image that this client will be attached to.  This image must already exist on your image server.",
          "Domain Name" => "Domain Name:\n\nThe network domain name you wish to be assigned to the client.",
@@ -69,10 +70,12 @@
     my $window = shift;
     my $tag = shift;
     my $helpwindow = $window->Toplevel();
+    $helpwindow->withdraw;
     $helpwindow->title("Help About: $tag");
     my $ro = $helpwindow->Message(-text => $Help{$tag});
     $ro->pack(-fill => "both", expand => 1);
     quit_button($helpwindow)->pack(-fill => "x");
+    center_window( $helpwindow );
 }
 
 1;
--- /usr/lib/systeminstaller/SystemInstaller/Tk/Image.pm.orig	2003-10-31 07:39:12.000000000 -0800
+++ /usr/lib/systeminstaller/SystemInstaller/Tk/Image.pm	2004-10-23 20:25:50.000000000 -0700
@@ -36,6 +36,7 @@
 
     my $window = shift;
     my %vars = (
+                title => "Create an SIS Image",
                 imgpath => $config->default_image_dir,
                 imgname => "",
                 arch => (uname)[4],
@@ -63,7 +64,8 @@
     }
 
     my $image_window = $window->Toplevel();
-    $image_window->title("Create a System Installation Suite Image");
+    $image_window->withdraw;
+    $image_window->title($vars{title});
     my $message = $image_window->Message(-text => "Fill out the following fields to build a System Installation Suite image.  If you need help on any field, click the help button next to it", -justify => "left", -aspect => 700);
     $message->grid("-","-","-");
 
@@ -169,24 +171,11 @@
    
     # Then a whole bunch of control buttons
     
-    my $reset_button = $image_window->Button(
-                                             -text=>"Reset",
-                                             -command=> [\&reset_window, $image_window, 
-                                                         \%vars, \%defaults, {piaction => $postoption,
-                                                                              arch => $archoption,
-                                                                              ipmeth => $ipoption,
-                                                                              mcast => $multicastOpts
-                                                                             },
-                                                        ],
-                                            -pady => 8,
-                                            -padx => 8,
-                                           );
-
     my $progress = $image_window->ProgressBar(
                                               -takefocus => 0,-width => 20,-length => 200,
                                               -anchor => 'w',-from => 0,-to => 100,
-                                              -blocks => 500,-gap => 0,
-                                              -colors => [0, 'red'], # [0, 'green', 50, 'yellow' , 80, 'red'],
+                                              -blocks => 20,
+                                              -colors => [0, 'green'], # [0, 'green', 50, 'yellow' , 80, 'red'],
                                               -variable => \$vars{percent_done}
                                              );
     
@@ -198,24 +187,39 @@
                                                 -padx => 8,
                                                );
     
+    my $reset_button = $image_window->Button(
+                                             -text=>"Reset",
+                                             -command=> [\&reset_window, $image_window, $progress,
+                                                         \%vars, \%defaults, {piaction => $postoption,
+                                                                              arch => $archoption,
+                                                                              ipmeth => $ipoption,
+                                                                              mcast => $multicastOpts
+                                                                             },
+                                                        ],
+                                            -pady => 8,
+                                            -padx => 8,
+                                           );
+
     $reset_button->grid($activate_button, quit_button($image_window),"-" , -sticky => "nesw");
     
-    $progress->grid("-","-", -sticky => "nesw");
+    $progress->grid("-","-","-", -sticky => "nesw");
 
     # key bindings
     $image_window->bind("<Control-q>",sub {$image_window->destroy});
     $image_window->bind("<Control-r>",sub {$reset_button->invoke});
     
+    center_window( $image_window );
 }
 
 sub reset_window {
-    my ($window, $curvars, $defvars, $optiondefaults) = @_;
+    my ($window, $progress, $curvars, $defvars, $optiondefaults) = @_;
     resethash($curvars, $defvars);
     foreach my $key (keys %$optiondefaults) {
         if($$optiondefaults{$key} and $$curvars{$key}) {
             $$optiondefaults{$key}->setOption($$curvars{$key});
         }
     }
+    $progress->value(0);
 }
 
 sub del_image {
@@ -250,13 +254,16 @@
                               $window->Unbusy(), return undef);
 
     my $lines_so_far;
+    $progress->value(0);
+    $progress->update();
     while(<OUTPUT>) {
         if(/Expected lines of output: (\d+)/) {
             $totallines = $1;
         }
         if($totallines) {
             $lines_so_far++;
-            $progress->value(100 * $lines_so_far / $totallines);
+            $progress->value(90 * $lines_so_far / $totallines);
+            $progress->value(90) if $progress->value() > 90;
             $progress->update();
             print "$lines_so_far: $_";
         }
@@ -264,10 +271,10 @@
 
     close(OUTPUT) or (carp("Command $cmd failed to run properly"), 
                       error_window($window, "Failed to create Image!"),
-                      $progress->value(0),
-                      $progress->update(),
                       $window->Unbusy(),
                       return undef);
+    $progress->value(90);
+    $progress->update();
 
     print "Built image from rpms\n";
 
@@ -279,6 +286,8 @@
                 password => $$vars{pass1}
             );
     }
+    $progress->value(91);
+    $progress->update();
 
     ##############################################
     # Update flamethrower.conf                   #
@@ -289,14 +298,20 @@
        $cmd = "/bin/mv -f /etc/systemimager/flamethrower.conf /etc/systemimager/flamethrower.conf.bak";
        open(OUTPUT,"$cmd |") or (carp("Couldn't run command $cmd"), 
                $window->Unbusy(), return undef);
+       $progress->value(92);
+       $progress->update();
 
        !system("sed -e 's/START_FLAMETHROWER_DAEMON = no/START_FLAMETHROWER_DAEMON = yes/' /etc/systemimager/flamethrower.conf.bak > /etc/systemimager/flamethrower.conf") or carp("Error encountered while changing START_FLAMETHROWER_DAEMON = no to yes in /etc/systemimager/flamethrower.conf");
+       $progress->value(93);
+       $progress->update();
 
        # add entry in flamethrower for the image
        my $entryArg = "[$$vars{imgname}]";
        $cmd = "/usr/lib/systemimager/perl/confedit --file /etc/systemimager/flamethrower.conf --entry $entryArg --data \"$entryArg \n DIR=/var/lib/systemimager/scripts/\"";
        open(OUTPUT,"$cmd |") or (carp("Couldn't run command $cmd"), 
                $window->Unbusy(), return undef);
+       $progress->value(94);
+       $progress->update();
 
        # add entry for boot-i386-standard module
        if ($$vars{arch} eq "i686" or $$vars{arch} eq "i586"  or $$vars{arch} eq "i486" or $$vars{arch} eq "i386"){
@@ -308,10 +323,14 @@
        $cmd = "/usr/lib/systemimager/perl/confedit --file /etc/systemimager/flamethrower.conf --entry $entryArg --data \"$entryArg \n DIR=/usr/share/systemimager/boot/i386/standard/\"";
        open(OUTPUT,"$cmd |") or (carp("Couldn't run command $cmd"), 
                $window->Unbusy(), return undef);
+       $progress->value(95);
+       $progress->update();
        print "Updated flamethrower.conf\n";
 
        !system("/etc/init.d/systemimager-server-flamethrowerd restart") or carp("Couldn't start flamethrower");
     }
+    $progress->value(96);
+    $progress->update();
 
     my $diskcmd = "mksidisk -A --name $$vars{imgname} --file $$vars{diskfile}";
     
@@ -319,6 +338,8 @@
                           error_window($window, "Failed to set disk partitioning in image!"),
                           $window->Unbusy(),
                           return undef);
+        $progress->value(97);
+        $progress->update();
 
         print "Added Disk Table for $$vars{imgname} based on $$vars{diskfile}\n";
     
@@ -333,6 +354,8 @@
                 error_window($window, "Failed to build auto install script for image!"),
                 $window->Unbusy(), 
                 return undef);
+        $progress->value(98);
+        $progress->update();
 
     print "Ran mkautoinstallscript\n";
 
@@ -345,6 +368,8 @@
                                           $window->Unbusy(),
                                           return 0);
     }
+    $progress->value(99);
+    $progress->update();
     if(ref($$vars{postinstall}) eq "ARRAY") {
         my $sub = shift(@{$$vars{postinstall}});
         &$sub($vars, @{$$vars{postinstall}}) or (carp("Couldn't run postinstall"), 
@@ -352,8 +377,10 @@
                                                  $window->Unbusy(), 
                                                  return 0);
     }
+    $progress->value(100);
+    $progress->update();
 
-    done_window($window, "Successfully created image $$vars{imgname}", sub {$a = shift; $a->value(0); $a->update();}, $progress);
+    done_window($window, "Successfully created image $$vars{imgname}");
     $window->Unbusy();
     return 1;
 }
