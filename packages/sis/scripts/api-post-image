#!/usr/bin/perl
###############################################################################
#  Script Name : api-post-image
#  Written by  : Erich Focht
#  Maintainer  : Geoffroy Vallee
#  Date        : July 2006
#  Purpose     : This post_install script configures sis for the
#                a particular image.
#  Copyright (c) Erich Focht 2006
#                All rights reserved.
#  Copyright (c) 2009   Oak Ridge National Laboratory
#                       Geoffroy Vallee <valleegr@ornl.gov>
#                       All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
###############################################################################
# $Id$
#
# This script aims at setting up the SystemConfigurator configuration file into
# a given image. For that:
# - we detect the file system partition configuration,
# - based on it, we generate a basic /etc/systemconfig/systemconfig.conf file
#   in the image,
# - then we upgrade the GRUB related files (some distros such as Debian expect
#   basic grub configuration files to be there (even if empty) whereas other
#   distros will automatically create those files if they do not already exist,
# - we had the different Configurator option, getting those from ODA (currently
#   we only deal with the append kernel boot option.
# Note that if the SystemConfigurator config file already exist, we only create
# a new one if the --force option is used, otherwise we do nothing.
###############################################################################

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use Carp;
use POSIX;
use OSCAR::Configurator_backend;
use OSCAR::Database;
use OSCAR::ImageMgt;
use OSCAR::Logger;
use lib '/usr/lib/systeminstaller';
use SIS::NewDB;
use SIS::Image;
use SystemInstaller::Image;
use File::Basename;
use Getopt::Long;

# sub set_scconf ($$$);

my $base;
if (defined $ENV{OSCAR_HOME}) {
    $base = "$ENV{OSCAR_HOME}/packages/sis";
} else {
    $base = "/var/lib/oscar/packages/sis";
}

my ($force, $update, $verbose);
GetOptions(
           "force|f"   => \$force,
           "update|u"  => \$update,
           "verbose|v" => \$verbose,
           );

my $imagedir = shift;

if (!$imagedir) {
    print "\nUsage: $0 [--force|-f] [--update|-u] [-v] path_to_image\n\n";
    print "\t--update : change IMGDIR/etc/systemconfig/systemconfig.conf,\n";
    print "\t           push changed config to corresponding nodes\n";
    print "\t           and run systemconfigurator to activate config.\n";
    print "\t--force  : force opening the per image selector menu.\n";
    exit 1;
}
$imagedir =~ s/\/$//;
my $image = $imagedir;
$image =~ s:^.*/::g;

$force = 1 if ($update);

my $window;

my $initial_verbose = 0;
$initial_verbose = $ENV{OSCAR_VERBOSE} if defined $ENV{OSCAR_VERBOSE};
if ($verbose) {
    $ENV{OSCAR_VERBOSE}=5;
}

#####################
# BEGIN MAIN SCRIPT #
#####################

# Description of few global variable:
#   - append_str is the string that should be passed to the kernel on compute
#     nodes at boot time (e.g., "selinux=0").
use vars qw ($configdir $imageconf $scdir $scconf $masterconf $append_str);
$configdir = $base."/.configs";
$imageconf = $configdir."/".$image;
$scdir = "$imagedir/etc/systemconfig/";
$scconf = "$scdir/systemconfig.conf";
$masterconf = $base."/configurator.html";
$append_str = "";

# First we check the basic directories and files actually exist in the image
if (! -d $scdir) {
    mkdir $scdir or die "ERROR: Could not create directory $scdir";
}

if (! -d $configdir) {
    mkdir $configdir or die "ERROR: Could not create directory $configdir";
}

# Then we check whether some configurator data is available in the database.
oscar_log_subsection "Querying ODA for configuration data";
my %query = ('opkg' => "sis");
my @config_data = OSCAR::Database::get_pkgconfig_vars (%query);
if (scalar (@config_data) > 0) {
    oscar_log_subsection ("Configuration data from ODA:\n");
    for (my $i = 0; $i < scalar (@config_data); $i++) {
        my $data = $config_data[$i];
        OSCAR::Utils::print_hash ("Config data from ODA:", "", $data)
            if ($ENV{OSCAR_VERBOSE});
        if ($data->{'name'} eq "kernel_append") {
            if (OSCAR::Utils::is_a_valid_string ($data->{'value'})) {
                oscar_log_subsection "Adding kernel append option...";
                $append_str .= $data->{'value'};
            }
        }
    }
} else {
    oscar_log_subsection ("ODA does not have any configuration data, using ".
                          "default values");
}

if (! -f $scconf || $force) {
    oscar_log_subsection "Getting the harddrive configuration of the image ".
                         "$image...";
    my $cmd = "/usr/bin/mksidisk --List --name $image --parse";
    oscar_log_subsection "Executing: $cmd";
    my @output = `$cmd`;
    my ($root, $boot);
    foreach my $line (@output) {
        if ($line =~ /(.*):\/:(.*)/) {
            $root = $1;
        }
        if ($line =~ /(.*):MB:(.*)/) {
            $boot = $1;
        }
        if (defined $boot && defined $root) {
            last;
        }
    }
    oscar_log_subsection "Detected root: $root\n";
    oscar_log_subsection "Detected boot: $boot\n";

    my ($defaultboot, %kernels) = get_img_kernels($imagedir);
    if (!defined $defaultboot) {
        die "ERROR: Impossible to detect the default boot for image $imagedir";
    }
    oscar_log_subsection ("Default boot id: $defaultboot");
    OSCAR::Utils::print_hash ("Detected kernels", "", \%kernels) 
        if ($ENV{OSCAR_VERBOSE});

    if (SystemInstaller::Image::write_scconf($imagedir, $root, $boot) == 0) {
        carp "ERROR: Impossible to generate the systemconfig.conf file";
        return -1;
    }

    if (OSCAR::ImageMgt::update_grub_config ($imagedir)) {
        carp "ERROR: Impossible to update the grub config file in $imagedir";
        return -1;
    }

    if (OSCAR::Utils::is_a_valid_string ($append_str)) {
        if (OSCAR::ImageMgt::update_kernel_append ($imagedir, $append_str)) {
            carp "ERROR: Impossible to update kernel config ($imagedir)";
            return -1;
        }
    }

} else {
    oscar_log_subsection "[INFO] The $scconf already exists, not update.";
}

$ENV{OSCAR_VERBOSE} = $initial_verbose;

exit 0;

###################################################################

# DEPRECATED???
# Return: 0 if success, -1 else.
sub set_scconf ($$$$) {
    my ($scconf, $block, $var, $value) = @_;

    oscar_log_subsection ("Setting the SystemConfigurator file");
    my $cmd = "scconf_tool --block $block --set --var $var ".
              "--val \"$value\" $scconf";
    oscar_log_subsection ("Executing $cmd");
    open CMD, "$cmd | " or (carp "ERROR: Could not run: $cmd", return -1);
    my @out = <CMD>;
    close CMD;
    oscar_log_subsection ("Writing the following to $scconf: \n".
        join ("\n", @out));
    open OUT, "> $scconf" or (carp "ERROR: Could not open: $scconf", return -1);
    print OUT @out;
    close OUT;
    return 0;
}

# DEPRECATED??
# Return: undef if error.
sub get_scconf ($$) {
    my ($scconf, $var) = @_;
    my $res;
    my $cmd = "scconf_tool --block BOOT --var $var $scconf";
    oscar_log_subsection "Executing: $cmd";
    open CMD, "$cmd | " or (carp "ERROR: Could not run: $cmd", return undef);
    while (<CMD>) {
        chomp;
        if (/\s*($var)\s*=\s*(.*)\s*$/) {
            $res = $2;
        }
    }
    close CMD;
    return $res;
}

# DEPRECATED???
sub write_img_cfg {
    my ($imagedir, $cfgfile) = @_;
    my ($defaultboot, %kernels) = &get_img_kernels($imagedir);
    my $image = basename($imagedir);
    
    local *OUT;
    open OUT, "> $cfgfile" or croak "Could not open $cfgfile : $!";
    print OUT "<html>\n";
    print OUT "<head><title>SIS Configuration</title>\n";
    print OUT "</head>\n";
    print OUT "<body>\n";
    print OUT "<h1>Configuring SIS for image $image</h1>\n";
    print OUT "<br>\n";
    print OUT "<form>\n";
    print OUT "<p>Additional kernel boot options\n";
    print OUT " <input name=\"kernel_append\" value=\"\">\n";
    print OUT "</p>\n";
    print OUT "<br>\n";
    print OUT "<b>Choose the default boot kernel for this image</b><br>\n";
    for my $k (keys(%kernels)) {
	my $kfile = $kernels{$k};
	my $checked = ($k eq $defaultboot);
	print OUT "<input type=radio ";
	print OUT "checked " if $checked;
	print OUT "name=default_boot value=\"$k\">$kfile ($k)<br>\n";
    }
    print OUT "<br><br><p>Systemconfigurator will create an initrd ";
    print OUT "if necessary.<br><br>\n";
    print OUT "<input type=reset value=\"Reset Form\">\n";
    print HTML "</form>\n";
    print HTML "</body></html>\n";
}

sub get_img_kernels ($) {
    my ($imgdir) = @_;
    my ($defaultboot, %kernels);
    my $cmd = "scconf_kernel -i $imgdir";
    local *CMD;
    open CMD, "$cmd |"
        or (carp "ERROR: Could not run: $cmd : $!", return (undef, undef));
    while (<CMD>) {
	next if (/^Label/);
	chomp;
	if (/DEFAULTBOOT : (\S+)$/) {
	    $defaultboot = $1;
	} elsif (/^(\S+)\s+(\S+)$/) {
	    $kernels{$1} = $2;
	}
    }
    close CMD;
    return ($defaultboot, %kernels);
}

# Generate a new /etc/systemconfig/systemconfig.conf file for a given image.
# DEPRECATED???
#
# Return: 0 if success, -1 else.
sub mk_new_scconf ($) {
    my ($imgdir) = @_;
    my ($root, $boot);
    my ($boot, %kernels, $root);

    oscar_log_subsection ("Creating $scconf");

    $root = get_scconf($scconf, "ROOTDEV");
    if (!defined $root) {
        carp "ERROR: Impossible to get the root for the generation of the ".
                "new systemconfig.conf file";
        return -1;
    }

    $boot = get_scconf($scconf, "BOOTDEV");
    if (!defined $boot) {
        if (! -f $scconf) {
            ($boot, %kernels) = get_img_kernels($imagedir);
        }
    }

    if (SystemInstaller::Image::write_scconf($imgdir, $root, $boot) == 0) {
        carp "ERROR: Impossible to generate the systemconfig.conf file";
        return -1;
    }

    return 0;
}

#
# run scpush and scexec to update all nodes with new boot configuration
#
sub update_cluster {
    my ($image) = @_;
    my $v;
    $v = "--verbose" if ($verbose);
    my $scconf = $imagedir . "/etc/systemconfig/systemconfig.conf";
    print "Pushing $scconf to corresponding hosts.\n";
    system("scpush --image $image $v $scconf /etc/systemconfig/");
    print "Running systemconfigurator to enable new config.\n";
    system("scexec --image $image -- systemconfigurator $v --runboot");
}
