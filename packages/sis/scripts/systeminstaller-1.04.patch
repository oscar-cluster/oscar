--- /usr/lib/systeminstaller/SystemInstaller/Machine.pm.orig	2003-01-14 09:07:32.000000000 -0800
+++ /usr/lib/systeminstaller/SystemInstaller/Machine.pm	2004-11-23 08:31:45.000000000 -0800
@@ -54,6 +54,14 @@
     return %results;
 }
 
+# Use Schwartzian transform to sort clients by node names alphabetically and numerically.
+# Names w/o numeric suffix precede those with numeric suffix.
+sub sortclients(@) {
+	return map { $_->[0] }
+	       sort { $a->[1] cmp $b->[1] || ($a->[2]||-1) <=> ($b->[2]||-1) }
+	       map { [$_, $_->name =~ /^([\D]+)([\d]*)$/] }
+	       @_;
+}
 
 sub synchosts {
 	my @delhosts=@_;
@@ -97,7 +105,7 @@
 	&verbose("Re-adding currently defined machines.");
 
 	print TMP "\n# These entries are managed by SIS, please don't modify them.\n";
-	foreach my $mach (@machinelist) {
+	foreach my $mach (sortclients @machinelist) {
                 my $name=$mach->name;
                 if ($ADAPTERS{$name}) {
 	                printf TMP "%-20.20s %s\t%s\n", $ADAPTERS{$name},$mach->hostname,$name;
--- /usr/lib/systeminstaller/SystemInstaller/Image.pm.orig	2004-12-08 10:48:28.000000000 +0100
+++ /usr/lib/systeminstaller/SystemInstaller/Image.pm	2004-12-08 10:50:23.000000000 +0100
@@ -153,6 +153,10 @@
                 # Now find the version
                 $relfiles[0]=~s/.*\///;
                 my ($j1,$j2,$version,$j3)=split(/-/,$relfiles[0]);
+		#EF# treat 3WS, 3ES like 3AS
+		if ($version =~ m/3(WS|ES)/) {
+			$version = "3AS";
+		}
                 return($distro,$version);
         }
         undef @relfiles;
--- /usr/lib/systeminstaller/SystemInstaller/Package.pm.orig	2003-04-11 14:09:03.000000000 -0700
+++ /usr/lib/systeminstaller/SystemInstaller/Package.pm	2005-02-14 09:22:16.000000000 -0800
@@ -34,12 +34,13 @@
 $VERSION = sprintf("%d.%02d", q$Revision: 1.57 $ =~ /(\d+)\.(\d+)/);
 
 use SystemInstaller::Package::RpmNoScripts;
+use SystemInstaller::Package::UpdateRpms;
 use SystemInstaller::Package::Rpm;
 use SystemInstaller::Package::Suse;
 use SystemInstaller::Package::Deb;
 use SystemInstaller::Package::Deboot;
 
-my @PKGMODS=qw(Deboot Deb Suse RpmNoScripts Rpm);
+my @PKGMODS=qw(Deboot Deb Suse RpmNoScripts UpdateRpms Rpm);
 
 sub pkg_install {
 # Head sub to do all the steps, use this or the individual subs below.
--- /usr/lib/systeminstaller/SystemInstaller/Package/UpdateRpms.pm.orig	2005-03-11 14:19:00.000000000 -0800
+++ /usr/lib/systeminstaller/SystemInstaller/Package/UpdateRpms.pm	2005-03-11 15:27:33.000000000 -0800
@@ -0,0 +1,344 @@
+package SystemInstaller::Package::UpdateRpms;
+
+#   Copyright (c) 2001 International Business Machines
+ 
+#   This program is free software; you can redistribute it and/or modify
+#   it under the terms of the GNU General Public License as published by
+#   the Free Software Foundation; either version 2 of the License, or
+#   (at your option) any later version.
+ 
+#   This program is distributed in the hope that it will be useful,
+#   but WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#   GNU General Public License for more details.
+ 
+#   You should have received a copy of the GNU General Public License
+#   along with this program; if not, write to the Free Software
+#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ 
+#   Michael Chase-Salerno <mchasal@users.sf.net>
+use strict;
+
+use  File::Path;
+use  File::Basename;
+use SystemInstaller::Log qw(verbose get_verbose);
+use SystemInstaller::Image qw(find_distro split_version);
+use Carp;
+
+use vars qw($VERSION $config);
+
+# The following two env vars are needed by mandrake.  They should not affect
+# anyone else in a negative way
+
+$ENV{SECURE_LEVEL} = 1;
+ 
+$VERSION = sprintf("%d.%02d", q$Revision: 1.68 $ =~ /(\d+)\.(\d+)/);
+
+#
+## API FUNCTIONS
+#
+
+sub footprint {
+# Look at a directory and determine if it looks like rpms.
+# Input:        Directory name
+# Returns:      Boolean of match
+        my $class=shift;
+        my $mode=shift;
+        my $path=shift;
+        if (($mode eq "files")
+                || ($mode eq "install")
+                || ($mode eq "post_install")
+                || ($mode eq "pre_install")) {
+                return glob( "$path/*.rpm" ) && -s "/var/cache/update-rpms/update-rpms.meta.cache";
+        }
+
+        return 0;
+
+} #footprint
+
+sub files_find {
+# Check that the files exist on the specified media.
+# Set the PFILES list to the filenames found.
+# Input:	rpm path, architecture, pkg list
+# Returns:	file list or null if failure.
+
+        my $class=shift;
+        my $rpmdir=shift;
+        my $arch=shift;
+        my @pkglist=@_;
+        my @stages;
+
+        my %files;
+        #my $cmd = "update-rpms --root=none --cache=u --list ";
+        my $cmd = "update-rpms --root=none --cache=u --check ";
+        $cmd .= join " ", @pkglist;
+        if( open( CMD, $cmd."|" ) ) {
+                my @missing;
+                while (<CMD>) {
+                        chomp;
+                        my @items = split /\t/;
+                        $items[2] =~ /([^\/]+)$/;
+                        if( $items[2] ) {
+                                $files{$items[1]} = $1;
+                        } else {
+                                push @missing, $items[1];
+                        }
+                }
+                close CMD;
+                if( $? || @missing ) {
+                    carp("ERROR: The following RPMs are missing from $rpmdir:\n ".join( "\n ",@missing )."\n\n" );
+                    return;
+                }
+        }
+        unless (%files) {
+                carp("Couldn't any files.");
+                return;
+        }
+
+        &verbose("Identifying distro.");
+        my ($distro,$version)=find_distro($rpmdir);
+        my ($maj,$min)=split_version($version);
+        &verbose("Distro is $distro, version is $version.");
+        my $stage=0;
+        my %alreadyinstalled;
+        my $stagefile= $main::config->distinfo . "/" . $distro . "/" . $maj ."/".$min . "/stages";
+        if (-e $stagefile) {
+                &verbose("Found stage file for this distro and full version.");
+        } else {
+                $stagefile= $main::config->distinfo . "/" . $distro ."/". $maj. "/stages";        
+        }
+        if (-e $stagefile) {
+                &verbose("Found stage file for this distro and major version.");
+        } else {
+                $stagefile= $main::config->distinfo . "/" . $distro . "/stages";        
+
+        }
+        if (-e $stagefile) {
+                &verbose("No version stage file found, falling back to distro file.");
+        } else {
+                &verbose("No stage file found, using single stage install.");
+        }
+                
+        if (-e $stagefile) {
+                &verbose("Reading stage definition file, $stagefile");
+                unless (open (STAGE,"< $stagefile")) {
+                        carp("Unable to open stage file $stagefile");
+                        return;
+                }
+                my $fail=0;
+                while (<STAGE>) {
+                        chomp;
+                        s/\s+$//;
+                        if (/^#/) {next;}
+                        if (/^$/) {next;}
+                        if (/^SISstage\s*/){
+                                $stage++;
+                                s/^SISstage\s*//;
+                                $stages[$stage]{ARGS}=$_;
+                        } else {
+                                unless ($files{$_}) {
+                                        carp("Couldn't find file for required package $_");
+                                        $fail++;
+                                } else {
+                                        push(@{$stages[$stage]{FILES}},$files{$_});
+                                        $stages[$stage]{PACKAGES}{$_}=$files{$_};
+                                        $alreadyinstalled{$_} = 1;
+                                }
+                        }
+                }
+                if ($fail) {
+                        carp("Failed to find required packages.");
+                        return;
+                }
+        } 
+
+        # Now add the user files minus the stage packages
+        $stage++;
+        foreach my $pkg (keys %files) {
+                next if $alreadyinstalled{$pkg};
+                push @{$stages[$stage]{FILES}},$files{$pkg};
+                $stages[$stage]{PACKAGES}{$pkg}=$files{$pkg};
+        }
+
+                                
+        return @stages;
+
+} #files_find
+
+
+sub files_pre_install {
+# Rpm pre install routine
+# Make sure rpm database dir exists.
+# Input: imagedir, pkgdir
+# Output: boolean
+    my $class=shift;
+    my $imagedir = shift;
+    my $pkgdir = shift;
+
+    &verbose("Identifying distro.");
+    my ($distro,$version)=find_distro($pkgdir);
+    &verbose("Distro is $distro, version is $version.");
+
+    my $imgroot=find_imgroot($distro,$version);
+    if ($imgroot) {
+        &verbose("Seeding image from distinfo tree");
+        if (system("cp -af $imgroot/* $imagedir")) {
+                carp("Copying seed files to image failed");
+                return 0;
+        }
+    } else {
+            &verbose("No seed directory found, using defaults.");
+    }
+
+    &verbose("Priming Rpm database: $imagedir/var/lib/rpm/");
+    unless (mkpath("$imagedir/var/lib/rpm/")) {
+            carp("Unable to create rpm database directory.");
+            return 0;
+    }
+    unless (mkpath("$imagedir/dev/")) {
+            carp("Unable to create dev directory.");
+            return 0;
+    }
+
+    &verbose("Creating /dev/null");
+    if (system("/bin/mknod $imagedir/dev/null c 1 3")) {
+            carp("Unable to create /dev/null device, continuing.");
+    }
+
+
+    return 1;
+} # files_pre_install
+
+sub files_install {
+# Install the packages.
+# Input:        image dir, filelist	
+# Returns:	Boolean
+
+        my $class=shift;
+        my $imgpath=shift;
+        my $pkgpath=shift;
+        my @stages=@_;
+
+        
+        # Install them
+        my $rpmcmd=$main::config->rpm;
+        my $rpmargs=$main::config->rpmargs;
+        my $redir;
+        if (get_verbose) {
+                $redir="";
+        } else {
+                $redir=">/dev/null";
+        }
+
+        foreach my $stage (1..(scalar(@stages)-1)) {
+                # Make a string of all the filenames
+                my $pkglist=join(" ",@{$stages[$stage]{FILES}});
+                my $cmd="cd $pkgpath;$rpmcmd -ir $imgpath $rpmargs $stages[$stage]{ARGS} $pkglist $redir";
+                &verbose("Performing RPM stage $stage install, command is:");
+                &verbose("$cmd");
+                open (INSTALL,"$cmd |");
+                while (<INSTALL>) {
+                       unless (/^\%\%/) {
+                               chomp;
+                               print "$_\n" if &get_verbose;
+                       }
+                }
+                unless (close(INSTALL)) {
+                        carp("Rpm installation failed.");
+                        return 0;
+                }
+
+        }
+
+        return 1;
+} #files_install
+
+sub files_post_install {
+# Rpm post install routine
+# Input: imagedir, pkgdir
+# Output: boolean
+    my $class=shift;
+    my $imagedir = shift;
+    my $pkgdir = shift;
+    my @file;
+    # Here are some things that I know we need to do...
+
+    # The following is a Mandrakeism.
+    if(-x "$imagedir/usr/sbin/msec") {
+        system("chroot $imagedir /usr/sbin/msec 3");
+    }
+    if ((! -e "$imagedir/boot/lilo") && (-e "$imagedir/boot/lilo-text")) {
+            symlink("lilo-text","$imagedir/boot/lilo");
+    }
+
+    # Generate shadow files
+    if(-x "$imagedir/usr/sbin/pwconv") {
+        system("chroot $imagedir /usr/sbin/pwconv");
+    }
+    if(-x "$imagedir/usr/sbin/grpconv") {
+        system("chroot $imagedir /usr/sbin/grpconv");
+    }
+
+    
+    # run ldconfig to ensure libraries are accounted for
+    system("chroot $imagedir /sbin/ldconfig");
+
+    return 1;
+} # files_post_install
+
+#
+## ADDITIONAL FUNCTIONS
+#
+
+sub find_imgroot{
+# Find a valid imgroot tree
+# Input: distro, version
+# Output: Path to the tree or 0 if not found.
+
+        my $distro=shift;
+        my $version=shift;
+        # Split the version to major and minor parts
+        my ($maj,$min)=split_version($version);
+        # Now loop through the parent directories until an imgroot is found
+        # or we hit the top of distinfo.
+        my $imgroot=$main::config->distinfo ."/".$distro."/".$maj."/".$min."/imgroot";
+        until ((-d $imgroot) || ($imgroot eq $main::config->distinfo."/imgroot")) {
+                $imgroot=~s/\/+/\//g; # get rid of any double /
+                $imgroot=~s/\/[^\/]+\/imgroot$/\/imgroot/;
+        }
+        # If we didn't hit the top, return the directory.
+        unless (-d $imgroot) {
+                return 0;
+        } else {
+                return $imgroot;
+        }
+
+} #find_imgroot
+
+### POD from here down
+
+=head1 NAME
+ 
+SystemInstaller::Package::Rpm - Rpm package installation functions.
+ 
+=head1 DESCRIPTION
+
+This module provides the SystemInstall package API functions for Rpm based
+installation. This is the default type of installation when no other modules
+have provided a suitable match. This module provides the following API subroutines:
+files_find, files_pre_install, files_install, files_post_install.
+
+See the SystemInstaller::Package manpage for details
+on the API specification.
+
+=head1 AUTHOR
+ 
+Michael Chase-Salerno <mchasal@users.sf.net>
+ 
+=head1 SEE ALSO
+
+L<SystemInstaller::Package>
+ 
+=cut
+
+1;
--- /usr/lib/systeminstaller/SystemInstaller/Package/RpmNoScripts.pm.orig	2002-11-06 14:54:07.000000000 -0800
+++ /usr/lib/systeminstaller/SystemInstaller/Package/RpmNoScripts.pm	2005-04-06 08:12:44.000000000 -0700
@@ -47,22 +47,19 @@
 # Look at a directory and determine if it looks like rpms.
 # Input:        Directory name
 # Returns:      Boolean of match
-	my $class=shift;
+        my $class=shift;
         my $mode=shift;
         my $path=shift;
-	my $rpmcmd=$main::config->rpm;
+        my $rpmcmd=$main::config->rpm;
         if ($mode eq "install") {
                 if (glob "$path/*.rpm")  {
-                        open(RPMCMD, "$rpmcmd --version |");
-                        while (<RPMCMD>) {
-                                chomp;
-                                my ($R,$V,$rpmver)=split;
-                                my ($V1,$V2,$V3)=split(/\./,$rpmver);
-                                if (( $V1 >= 4) && ($V2 >= 0) && ($V3 >= 3)) {
-                                        return 1;
-                                }
-                        }
-                        close(RPMCMD);
+                        my $line = `$rpmcmd --version 2>/dev/null`;
+                        chomp $line;
+                        my $rpmver = (split /\s+/, $line)[2];
+                        my ($V1,$V2,$V3)=split(/\./,$rpmver);
+                        return $V1 >= 4 if $V1 <=> 4;
+                        return $V2 >= 0 if $V2;
+                        return $V3 >= 3;
                 }
         }
 
@@ -116,12 +113,7 @@
 		        return 0;
 	        }
                 &pre_run_scriptlets($imgpath);
-                my @forder;
-                foreach my $pkg (@order) {
-                        $pkg=~s/-[^-]*-[^-]*$//;
-                        push(@forder,$stages[$stage]{PACKAGES}{$pkg});
-                }
-                &run_scriptlets($imgpath,$pkgpath,@forder);
+                &run_scriptlets($imgpath,$pkgpath,@order);
         }
 
 	return 1;
@@ -146,39 +138,36 @@
         verbose("Extracting and running scriptlets from rpms.");
         foreach my $pkg (@order) {
                 my $piprog=undef;
-                print "$pkg\n" if &get_verbose;
-                my $cmd="$rpmcmd -q --scripts -p $pkgpath/$pkg";
+                print "$pkg:" if &get_verbose;
+                my $cmd="$rpmcmd -q --scripts --root $imgpath $pkg";
                 open (SCRIPTQ,"$cmd |");
                 while (<SCRIPTQ>) {
+                        chomp;
                         if (/^postinstall script/) {
+                                my $shell = $_;
+                                $shell =~ s/^[^\/]*//;
+                                $shell =~ s/\).*$//;
+                                print " $shell" if &get_verbose;
                                 open (POST,">$imgpath$postfile");
-                                my ($j1,$shell)=split(/\(through /,$_);
-                                $shell=~s/\).*$//;
                                 print POST "#!$shell\n";
                                 print POST "# Post scriptlet for $pkg\n\n";
                                 $post_writing=1;
-                                next;
                         } elsif (/^postinstall program/) {
                                 $piprog=$_;
                                 $piprog=~s/^.*://;
                                 $piprog=~s/^ *//;
-                                $piprog=~s/ *\n$//;
-                                if ($piprog eq "/bin/sh") {
-                                        $piprog=undef;
-                                }
-
+                                $piprog=~s/ *$//;
+                                $piprog=undef if $piprog eq "/bin/sh";
+                                print " $piprog" if $piprog && &get_verbose;
                         } elsif (/^(post|pre)(un)?install/) {
                                 $post_writing=0;
-                        }
-                        if ($post_writing) {
-                                print POST "$_";
+                        } elsif( $post_writing ) {
+                                print POST "$_\n";
                         }
                 }
+                print "\n" if &get_verbose;
                 close (POST);
-	        unless (close(SCRIPTQ)) {
-                        carp("Failed to extract scripts from $pkg.");
-		        return 0;
-	        }
+                close SCRIPTQ;
                 if ($piprog) {
                         if (system("chroot $imgpath $piprog")) {
                                 carp("Post program for $pkg, failed.");
