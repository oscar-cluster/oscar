--- /etc/systemimager/autoinstallscript.template.orig	2004-07-06 07:13:29.000000000 -0700
+++ /etc/systemimager/autoinstallscript.template	2004-07-06 07:16:44.000000000 -0700
@@ -85,6 +85,71 @@
 #
 ################################################################################
 
+################################################################################
+# BEGIN disk enumeration
+# David N. Lombard, david.n.lombard@intel.com
+#
+# Note the kludgey way to get /dev/sd* and /dev/*/c*d* to sort properly...
+#
+echo DISKORDER=${DISKORDER=hd,sd,cciss,ida,rd}
+[ -z $DISKORDER ] || {
+  echo enumerate_disks
+  order=`echo "$DISKORDER" | sed 's/ /,/g' | sed s/,,*/,/g | sed s/^,//`
+  DISKS=0
+  while : ; do
+    [ -z $order ] && break
+    type=`expr $order : '\([^,]*\),' \| $order`
+    case $type in
+    cciss | ida | rd )
+      rest=
+      [ $type = rd ] && rest="8 9 10 11 12 13 14 15"
+      for c in 0 1 2 3 4 5 6 7 $rest ; do
+        for dev in `ls /dev/$type/c${c}d[0-9] 2>/dev/null` ; do
+          echo " $dev"
+          eval DISK$DISKS=${dev}
+          DISKS=`expr $DISKS + 1`
+        done
+        for dev in `ls /dev/$type/c${c}d[0-9][0-9] 2>/dev/null` ; do
+          echo " $dev"
+          eval DISK$DISKS=${dev}
+          DISKS=`expr $DISKS + 1`
+        done
+      done
+      ;;
+    hd )
+      for dev in `ls /dev/$type[a-z] 2>/dev/null` ; do
+        echo " $dev"
+        eval DISK$DISKS=$dev
+        DISKS=`expr $DISKS + 1`
+      done
+      ;;
+    sd )
+      for dev in `ls /dev/$type[a-z] 2>/dev/null` ; do
+        echo " $dev"
+        eval DISK$DISKS=$dev
+        DISKS=`expr $DISKS + 1`
+      done
+      for dev in `ls /dev/$type[a-z][a-z] 2>/dev/null` ; do
+        echo " $dev"
+        eval DISK$DISKS=$dev
+        DISKS=`expr $DISKS + 1`
+      done
+      ;;
+    * )
+      echo "type='$type'"
+      shellout
+      ;;
+    esac
+    order=`expr $order : '[^,]*,\(.*\)'`
+  done
+  echo DISKS=$DISKS
+  echo
+  beep
+}
+#
+# END disk enumeration
+################################################################################
+
 ##PARTITION_DISKS##
 
 echo "Load additional filesystem drivers."
@@ -183,6 +248,28 @@
 #
 ################################################################################
 
+################################################################################
+# BEGIN disk edits
+# David N. Lombard, david.n.lombard@intel.com
+#
+[ -z $DISKORDER ] || {
+  echo "Editing files for actual disk configuration..."
+##SHOW_DISK_EDITS##
+  for file in /etc/fstab /etc/raidtab /etc/systemconfig/systemconfig.conf; do
+    [ -f /a/$file ] || continue
+    echo " $file"
+    cp /a/$file /a/$file.image
+    cat /a/$file.image |
+##EDIT_DISK_NAMES##
+    cat > /a/$file
+  done
+  echo
+  beep
+}
+#
+# END disk edits
+################################################################################
+
 
 ##################################################################
 #
--- /usr/lib/systemimager/perl/SystemImager/Server.pm.orig	2004-07-06 07:13:29.000000000 -0700
+++ /usr/lib/systemimager/perl/SystemImager/Server.pm	2004-07-06 07:16:44.000000000 -0700
@@ -16,7 +16,7 @@
 use File::Copy;
 use File::Path;
 use XML::Simple;
-use vars qw($VERSION @mount_points %device_by_mount_point %filesystem_type_by_mount_point);
+use vars qw($VERSION @mount_points %device_by_mount_point %filesystem_type_by_mount_point $disk_no %dev2disk);
 
 $VERSION="3.2.0";
 
@@ -364,6 +364,16 @@
         );
 
         my $devfs_dev = $devfs_map{$dev};
+        # dnl
+        $dev2disk{$devfs_dev} = "DISK".$disk_no++;
+        print $out "if [ -z \$DISKORDER ] ; then\n";
+        print $out "  $dev2disk{$devfs_dev}=$devfs_dev\n";
+        print $out "elif [ -z \$$dev2disk{$devfs_dev} ] ; then\n";
+        print $out qq(  echo "Undefined: $dev2disk{$devfs_dev}"\n);
+        print $out "  shellout\n";
+        print $out "fi\n";
+        $devfs_dev = '$'.$dev2disk{$devfs_dev};
+        # dnl
 
         print $out "### BEGIN partition $devfs_dev ###\n";
         print $out qq(echo "Partitioning $devfs_dev..."\n);
@@ -630,6 +640,10 @@
             print $out "\n";
 	    
             $part = &get_part_name($dev, $m);
+            #dnl
+            $part =~ /^(.*?)(p?\d+)$/;
+            $part = "\${".$dev2disk{$1}."}".$2;
+            #dnl
             $cmd = "Creating partition $part.";
             print $out qq(echo "$cmd"\n);
             
@@ -829,6 +843,9 @@
 
     my @all_devices = get_all_devices($file);
     my %devfs_map = dev_to_devfs(@all_devices) or return undef;
+    #dnl
+    my @d2dkeys = reverse sort keys %dev2disk;
+    #dnl
 
 
     # Figure out if software RAID is in use. -BEF-
@@ -854,7 +871,9 @@
 	# file.  We should also look at the format and write functions for that 
 	# same file. -BEF-
         print $out qq(# /etc/raidtab that will be used for creating software RAID devices on client(s).\n);
-        print $out qq(cat <<'EOF' > /etc/raidtab\n);
+        #dnl
+        print $out qq(cat <<EOF > /etc/raidtab\n);
+        #dnl
         if (!$raidtab) {
             $raidtab = $image_dir . "/etc/raidtab";
         }
@@ -863,6 +882,13 @@
         }
         open(FILE,"<$raidtab") or croak("Couldn't open $raidtab for reading.");
             while (<FILE>) {
+                #dnl
+                foreach my $key (@d2dkeys) {
+                    next unless /\Q$key/;
+                    s/\Q$key\E/\${$dev2disk{$key}}/;
+                    last;
+                }
+                #dnl
                 print $out $_;
             }
         close(FILE);
@@ -920,6 +946,11 @@
         # software RAID devices (/dev/md*)
         if ($real_dev =~ /\/dev\/md/) {
             print $out qq(mkraid --really-force $real_dev || shellout\n);
+        # dnl
+        } else {
+            $real_dev =~ /^(.*?)(p?\d+)$/;
+            $real_dev = "\${".$dev2disk{$1}."}".$2;
+        # dnl
         }
 
         # swap
@@ -1299,6 +1330,24 @@
     }
 }
 
+#dnl
+sub show_disk_edits{
+    my ($out) = shift;
+    foreach (sort keys %dev2disk) {
+        print $out qq(  echo " $_ -> \$$dev2disk{$_}"\n);
+    }
+}
+sub edit_disk_names{
+    my ($out) = shift;
+    foreach (reverse sort keys %dev2disk) {
+        print $out qq(    sed s:$_:%$dev2disk{$_}%:g |\n);
+    }
+    for (my $i = 0; $i < scalar keys %dev2disk; $i++) {
+        print $out qq(    sed s:%DISK$i%:\$DISK$i:g |\n);
+    }
+}
+#dnl
+
 sub write_sc_command {
     my ( $out, $ip_assignment_method ) = @_;
     my $sc_excludes_to = "/etc/systemimager/systemconfig.local.exclude";
@@ -1379,6 +1428,11 @@
     open (my $TEMPLATE, "<$template") || die "Can't open $template for reading\n";
     open (my $MASTER_SCRIPT, ">$file") || die "Can't open $file for writing\n";
 
+    # dnl
+    $disk_no = 0;
+    %dev2disk = ();
+    # dnl
+
     my $delim = '##';
     while (<$TEMPLATE>) {
         SWITCH: {
@@ -1458,6 +1512,18 @@
                 }
                 last SWITCH;
 	        }
+
+			# dnl
+			if (/^\s*${delim}SHOW_DISK_EDITS${delim}\s*$/) {
+				show_disk_edits( $MASTER_SCRIPT );
+				last SWITCH;
+			}
+			if (/^\s*${delim}EDIT_DISK_NAMES${delim}\s*$/) {
+				edit_disk_names( $MASTER_SCRIPT );
+				last SWITCH;
+			}
+			# dnl
+
 	        ### END end of autoinstall options ###
 	        print $MASTER_SCRIPT $_;
         }
@@ -1704,4 +1770,4 @@
 }
 
 
-
+1
