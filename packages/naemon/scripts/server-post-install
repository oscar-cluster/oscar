#!/usr/bin/env perl
                                                                                
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# If the ntpconfig package has been configured to use a particular ntp server
# then this script will update /etc/ntp.conf with the new server settings,
# otherwise, it simply sets up the headnode to act as a time server for the
# client nodes                                                                                
# (C)opyright Olivier Lahaye <olivier.lahaye@cea.fr>

use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::Opkg;
use OSCAR::Network;
use OSCAR::Database;
use OSCAR::Configurator_backend;
use OSCAR::SystemServices;
use OSCAR::SystemServicesDefs;
use OSCAR::FileUtils;
use OSCAR::MonitoringMgt;
use OSCAR::Package; # get_script_dir()
use OSCAR::Utils;   # oscar_system()
use OSCAR::Logger;  # oscar_log()
use OSCAR::LoggerDefs;
use OSCAR::oda;
use Carp;

init_naemon_config_dir() and (oscar_log(1,ERROR,"Failed to create naemon OSCAR's specific directory structure"), exit 1);

#my $configurator = "$ENV{OSCAR_PACKAGE_HOME}/configurator.html";
my $scripts_dir = OSCAR::Package::get_scripts_dir("naemon", 'server-post-install');
my $configurator = "$scripts_dir/configurator.html";

if (! -f $configurator) {
    oscar_log(1, ERROR, "Failed to read Naemon configurator.html file (Looked for $masterconf)");
    exit 1;
}

# Rename default configuration files to oscarbak.
foreach ('contacts.cfg', 'localhost.cfg', 'printer.cfg', 'switch.cfg', 'windows.cfg') {
    if ( -f "$naemon_configdir/conf.d/$_" ) {
        !system("mv -f $naemon_configdir/conf.d/$_ $naemon_configdir/conf.d/$_.oscarbak")
            or (oscar_log(1, ERROR, "Failed to move default config file $naemon_configdir/conf.d/$_ to $naemon_configdir/conf.d/$_.oscarback."), exit 1);
    }
}

# Now, fix /etc/naemon/resource.cfg (naemon still uses nagios plugins)
!oscar_system('sed -i -e "s|naemon/plugins$|nagios/plugins|g" /etc/naemon/resource.cfg')
    or (oscar_log(1, ERROR, "Failed to update plugin path in /etc/naemon/resource.cfg."), exit 1);

# Now, enable the needed services.
opkg_print("Enabling  httpd, naemon, thruk services on head-node\n");
!enable_system_services(HTTP,NAEMON,THRUK)
    or (oscar_log(1, ERROR, "Couldn't enable at least one of httpd, naemon, thruk services on head-node."), exit 1);

# Now, do the real configuration.
my $ref = OSCAR::Configurator_backend::readInConfigValues($configurator, "naemon", "", noarray=>1);

# Configurator Values:
# $ref->{admin_email}     => Contact mail for OSCAR Cluster system administrator.
# $ref->{admin_fullname} => Contact description (full name).
# $ref->{admin_passwd}   => Password for web interface access.
# $ref->{admin_passwd2}  => Password confirmation.
# $ref->{admin_login}    => Login for web interface access.

# Basic tests for valid values:
# Check for valid email address.
if ($ref->{admin_email} !~ /^[\w\-\_\.]+\@([\w\-\.]+\.)+[a-zA-Z]+$/) {
    oscar_log(1, ERROR, "admin mail is invalid! ($ref->{admin_email})");
    exit 1;
}

# Check that admin description is a valid string
if (!OSCAR::Utils::is_a_valid_string ($ref->{admin_fullname})) {
    oscar_log(1, ERROR, "admin full name is invalid!");
    exit 1;
}

# Check that admin login is a valid word with no spaces and doesn't start with a number.
if ($ref->{admin_login} !~ /^[a-z]+[a-z0-9_]*$/) {
    oscar_log(1, ERROR, "admin login name is invalid! ($ref->{admin_login})");
    exit 1;
}

# Check that the 2 password given are the same.
if ($ref->{admin_passwd} ne $ref->{admin_passwd2}) {
    oscar_log(1, ERROR, "admin passwords don't match!");
    exit 1;
}

my $errors = 0;
# Write OSCAR admin contact and admins contactgroup.
$errors += write_oscar_contact_cfg ($ref->{admin_login}, $ref->{admin_fullname}, $ref->{admin_email});

my @constacts = ( $ref->{admin_email} );
$errors += write_oscar_contactgroup_cfg ('admins', 'Naemon Administrators', \@contacts);

# Write oscar_commands.cfg (check_mysql, check_nrpe, check_nrpe_head)

# Define the check_mysql command.
$errors += write_oscar_command_cfg ('check_mysql', '$USER1$/check_mysql -H $HOSTADDRESS$ $ARG1$');

# Define the check nrpe command.
$errors += write_oscar_command_cfg ('check_nrpe', '$USER1$/check_nrpe -H $HOSTADDRESS$ $ARG1$');

# Define the check nrpe for head only.
#write_oscar_command_cfg ('check_nrpe_head', '$USER1$/check_nrpe -H oscar_server $ARG1$');

# Write oscar_<service>.cfg (ping, ssh, (HTTP-ganlia:ganglia), HTTP-naemon, MySQL-oscar, (DISK-export:nfs), PBSNODE, SATA Disk smart status)

# Check that all cluster hosts are responding to ping.
$errors += write_oscar_service_cfg ('PING', 'hostgroup', 'oscar_cluster', 'check_ping!100.0,20%!500.0,60%');

# Check that ssh service is running on all cluster hosts.
$errors += write_oscar_service_cfg ('SSH', 'hostgroup', 'oscar_cluster', 'check_ssh');

# Check that naemon web interface is working. We assume that naemon runs on head.
$errors += write_oscar_service_cfg ('HTTP-naemon', 'host', 'oscar_server', 'check_http!-u/naemon');

# Check that / filesystem is not full (/var/tmp /tmp ...).
$errors += write_oscar_service_cfg ('Root-Partition', 'host', 'oscar_server', 'check_local_disk!20%!10%!/');

# Check that OSCAR MySQL database is up.
$errors += write_oscar_service_cfg ('MySQL-oscar', 'host', 'localhost', 'check_mysql!-d oscar -u root');

# Write oscar_hosts.cfg (nodes + head + hostgroups) OL: don't know nodes yet. will be done in api post deploy.
# 1st, write oscar_server which is the head.
# Get IP of oscar_server from ODA.
my @internal_results = ();
my $sql = "select Nics.ip from Nodes,Nics where Nodes.name='oscar_server' AND Nodes.id=Nics.node_id";
OSCAR::oda::do_query(undef, $sql, \@internal_results);
my $oscar_server_ip = "127.0.0.1"; # Fallback default value.
$oscar_server_ip = "$internal_results[0]->{'ip'}" if (scalar(@internal_results) ==1);
$errors += write_oscar_host_cfg('oscar_server', 'oscar_server', $oscar_server_ip);
$errors += write_oscar_host_cfg('localhost', 'localhost', "127.0.0.1"); # Required for local only testing like MySQL.

# Now, set the admin password to web interface access.
!oscar_system("htpasswd -b -p -d /etc/naemon/htpasswd admin '$ref->{admin_passwd}'")
    or (oscar_log(1, ERROR, "Failed to set passwd for naemon web interface."), exit 1);

exit($errors);
