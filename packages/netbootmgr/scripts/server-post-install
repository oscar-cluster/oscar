#!/usr/bin/perl

# post_server_install script for netbootmgr
#
# - turn on service systemimager-server-netbootmond
# - make it switch to local boot mode after installation

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use Carp;
use strict;
use OSCAR::OCA::OS_Detect;
use OSCAR::OCA::OS_Settings;
use OSCAR::Opkg;
use OSCAR::SystemServices;
use OSCAR::SystemServicesDefs;
use OSCAR::Logger;
use OSCAR::LoggerDefs;

my $os = OSCAR::OCA::OS_Detect::open();
my $binary_format = $os->{'pkg'};

my $config_file = OSCAR::OCA::OS_Settings::getitem(SI_SERVER()."_configfile");

open IN, "$config_file" or
	croak("ERROR: Could not open $config_file for reading!");
my @sic = <IN>;
close IN;

oscar_log(3, INFO, "Setting systemimager-server-netboodmond to NET_BOOT_DEFAULT=local");
open OUT, "> $config_file" or
	(oscar_log(1, ERROR, "Could not open $config_file for writing!"), exit 1);
for my $line (@sic) {
    if ($line =~ m/^\s*NET_BOOT_DEFAULT\s*=/) {
        print OUT "NET_BOOT_DEFAULT = local\n";
    } else {
        print OUT $line;
    }
}
close OUT;

# OL: FIXME: Fake si_rsyncd log file so we can start.
# Need to be removed once si_netbootmond will not depend of thins anymore.
my $si_rsyncd_log = "/var/log/systemimager/rsyncd";
open HANDLE, ">>$si_rsyncd_log" or die "touch $filename: $!\n"; 
close HANDLE

# Do not abort if we fail when trying to restart the service.
!system_service(SI_NETBOOTMOND,RESTART)
    or oscar_log(1, ERROR, "Couldn't restart si_netbootmond service.");

# If we cannot enable the service, the situation is more serious. opkg-netbootmgr
# Will not be usable. In this case, we fail if a problem occures.
!enable_system_services( SI_NETBOOTMOND )
    or (oscar_log(1, ERROR, "Failed to enable si_netbootmond"), exit 1);

# OL: Code below was a workaround a design flaw in si_netbootmond.
# si_netbootmond parses the rsyncd log which is bad fro 2 reasons:
# 1: can't work with other deployment methods.
# 2: if a node is successfully imaged, that doesn't mean it can boot.
#    setting localboot without knowing if the node was able to reboot is not
#    correct as we will want to image again the node.
#    Instead, si_netbootmond should check the REBOOTED status of the node.

# GV:
# - We do not do restart since we just want to be sure the service restarts 
#   without generating errors. 
# - We do not catch error for stopping (the service may already be stopped and
#   this is just fine.
# - We catch potential errors when starting the service (we want to make sure
#   the service is on)
# Other nasty details: the /etc/init.d/systemimager-server-netbootmond service
# actually rely on /usr/sbin/si_netbootmond which is a very ugly beast: if the
# /etc/systemimager/systemimager-server-rsyncd daemon is not running, 
# everything will fail without a single line of output because the 
# /var/log/systemimager/rsyncd file does not exists. So before to start the
# daemon, we check the rsyncd deamon is running.

#my $mandatory_log = "/var/log/systemimager/rsyncd";
#if (! -f $mandatory_log) {
#    # If the log file does not exist, we check whether 
#    # /etc/init.d/systemimager-server-rsyncd is running or not (this daemon actually 
#    # creates the log file).
#    my $parent_service = "/etc/init.d/systemimager-server-rsyncd";
#    if (system ("$parent_service status")) {
#        print ("[WARNING] The $mandatory_log file does not exist and the ".
#               "$parent_service daemon is not running, so we do not start ".
#               "monitoring deamon (we assume you are not using rsync to ".
#               "deploy the compute nodes\n");
#        exit 0;
#    } else {
#        die "ERROR: $parent_service is running but $mandatory_log does not ".
#            "exist. The system is not coherent.";
#    }
#}
#
#my $cmd = "$service stop";
#system ($cmd);
#$cmd = "$service start";
# !system("$cmd") or
#	croak("ERROR: Impossible to exexcute $cmd");

exit 0;

