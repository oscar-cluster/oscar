#!/usr/bin/env perl
                                                                                
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# This script simply sets up the headnode to act as a http proxy server for the
# client nodes so yum can use it if nodes are not routed to the internet.
#
# (C)opyright Olivier Lahaye <olivier.lahaye@cea.fr>

use OSCAR::Opkg;
use OSCAR::Network;
use OSCAR::Configurator_backend;
use OSCAR::SystemServices;
use OSCAR::SystemServicesDefs;
use OSCAR::FileUtils;
use OSCAR::ConfigFile;
use Carp;

my $squidBuffer = "";
my $squid_conf = OSCAR::OCA::OS_Settings::getitem(SQUID()."_configfile");
my $configurator = "$ENV{OSCAR_PACKAGE_HOME}/configurator.html";

# Get OSCAR Interface.
my $oscar_interface = OSCAR::ConfigFile::get_value ("/etc/oscar/oscar.conf",
                                                 undef,
                                                 "OSCAR_NETWORK_INTERFACE");
my ($ip, $network, $cidr);
my $ipregex = '\d+\.\d+\.\d+\.\d+';

# Get Interface IP address and netmask in cidr format.
open(IP_ADDR_SHOW,"/sbin/ip -o addr show $oscar_interface |")
    or (oscar_log(5, ERROR, "Couldn't run '/sbin/ip addr show $oscar_interface'"), exit 1);
while(<IP_ADDR_SHOW>) {
    if(/\s+inet ($ipregex)\/([0-9]{2}) brd $ipregex scope .*$/o) {
        ($ip, $cidr) = ($1,$2);
        last;
    }
}
close(IP_ADDR_SHOW);

# Get network address from IP and cidr netmask.
# Code inspired from IPv4Addr.pm (Francis J. Lacoste).
my $u32 = unpack "N", pack "CCCC", split /\./, $ip;
my $bits = "1" x $cidr . "0" x (32 - $cidr );
my $msk = unpack "N", pack "B*", $bits;
$network = join ".", unpack "CCCC", pack "N", $u32 & $msk;


open(CONF, $squid_conf) or croak("Failed to open $squid_conf");

while ($line = <CONF>) {
    $squidBuffer = $squidBuffer.$line;
}
                                                                                
close(CONF, $squid_conf);


my @results=split('\.', $ip);
                                                                                
my $squid_visible_hostname;
my $squid_port;

# User has configured squid package.
if (-e $configurator) {
    my $ref = OSCAR::Configurator_backend::readInConfigValues($configurator,
        "squid", "", noarray=>1);
    $squid_visible_hostname = $ref->{visible_hostname};
    $squid_port = $ref->{port};
} else {
    $squid_visible_hostname = oscar_server;
    $squid_port = 3128;
}

# Now work on config file.

# 1st, create a backup of the config file if not already done.
backup_file_if_not_exist($squid_conf) or (carp "ERROR: Couldn't backup $squid_conf.\n", exit 1);

# Add OSCAR header if needed.
if (!($squidBuffer =~ /Added by OSCAR package squid/)) {
    $squidBuffer = $squidBuffer."\n# Added by OSCAR package squid\n#\n";
}

# 1: Remove localnet acl access.
if ($squidBuffer =~ /^http_access allow localnet/) {
         $squidBuffer =~ s/^http_access allow localnet$/#http_access allow localnet/m;
}

# 2: Create oscarnet acl
if ($squidBuffer =~ /^acl oscarnet src.*$/) {
    # Update the acl.
    $squidBuffer =~ s/^acl oscarnet src.*$/acl oscarnet src $network\/$cidr # OSCAR nodes acl/m;

} else {
    # Add new oscarnet acl.
    $squidBuffer = $squidBuffer."acl oscarnet src $network\/$cidr # OSCAR nodes acl\n";
}

# 3: update http_port
if ($squidBuffer =~ /^http_port.*$/) {
    $squidBuffer =~ s/^http_port.*$/http_port $ip:$squid_port/m;
} else { # no http_port in config? strange...
    $squidBuffer = $squidBuffer."\nhttp_port $ip:$squid_port\n";
}

# 4: set visible_hostname

if ($squidBuffer =~ /^visible_hostname/) {
    $squidBuffer =~ s/^visible_hostname.*$/visible_hostname $ref->{visible_hostname}/m;
} else {
    # User selected visible_hostname
   	$squidBuffer = $squidBuffer."# User selected visible_hostname\nvisible_hostname $ref->{visible_hostname}\n";
}


open(CONF, ">$squid_conf") or croak("Failed to open $squid_conf");
print CONF $squidBuffer;
close(CONF);

opkg_print("enabling squid (http proxy) service at boot time on server\n");
!enable_system_services( (SQUID) )
    or (carp "ERROR: Couldn't enable squid (http proxy) service.\n", exit 1);

opkg_print("restarting squid (http proxy) service\n");
!system_service(SQUID,RESTART)
    or die "ERROR: Couldn't restart squid (http proxy) service on server.";

exit(0);
