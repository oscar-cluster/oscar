#!/usr/bin/env perl
                                                                                
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# This script simply sets up the headnode to act as a http proxy server for the
# client nodes so yum can use it if nodes are not routed to the internet.
#
# (C)opyright Olivier Lahaye <olivier.lahaye@cea.fr>

use OSCAR::Opkg;
use OSCAR::Network;
use OSCAR::Configurator_backend;
use OSCAR::SystemServices;
use OSCAR::SystemServicesDefs;
use OSCAR::FileUtils;
use OSCAR::ConfigFile;
use Carp;

my $squidBuffer = "";
my $squid_conf = OSCAR::OCA::OS_Settings::getitem(SQUID()."_configfile");
my $configurator = "$ENV{OSCAR_PACKAGE_HOME}/configurator.html";

# Get OSCAR Interface.
my $oscar_interface = OSCAR::ConfigFile::get_value ("/etc/oscar/oscar.conf",
                                                 undef,
                                                 "OSCAR_NETWORK_INTERFACE");
my ($ip, $network, $cidr);
my $ipregex = '\d+\.\d+\.\d+\.\d+';

# Get Interface IP address and netmask in cidr format.
open(IP_ADDR_SHOW,"/sbin/ip -o addr show $oscar_interface |")
    or (oscar_log(1, ERROR, "Couldn't run '/sbin/ip addr show $oscar_interface'"), exit 1);
while(<IP_ADDR_SHOW>) {
    if(/\s+inet ($ipregex)\/([0-9]{2}) brd $ipregex scope .*$/o) {
        ($ip, $cidr) = ($1,$2);
        last;
    }
}
close(IP_ADDR_SHOW);

# Get network address from IP and cidr netmask.
# Code inspired from IPv4Addr.pm (Francis J. Lacoste).
my $u32 = unpack "N", pack "CCCC", split /\./, $ip;
my $bits = "1" x $cidr . "0" x (32 - $cidr );
my $msk = unpack "N", pack "B*", $bits;
$network = join ".", unpack "CCCC", pack "N", $u32 & $msk;


my $squid_visible_hostname;
my $squid_port;

# User has configured squid package.
if (-e $configurator) {
    my $ref = OSCAR::Configurator_backend::readInConfigValues($configurator,
        "squid", "", noarray=>1);
    $squid_visible_hostname = $ref->{visible_hostname};
    $squid_port = $ref->{port};
    opkg_print("squid: using configurator values\n");
} else {
    $squid_visible_hostname = oscar-server;
    $squid_port = 3128;
    opkg_print("squid: using default values\n");
}

opkg_print("squid: visible_hostname = $squid_visible_hostname\n");
opkg_print("squid:             port = $squid_port\n");

# Now generate config file.

open(SQUID_CONF, ">$squid_conf") or croak("Failed to open $squid_conf");

print SQUID_CONF <<"EOF";
#
# Squid configuration generated by OSCAR (opkg-squid-server)
# Mostly inspired from original config file.
#

# OSCAR Nodes acl
acl oscarnet src $network\/$cidr

acl SSL_ports port 443
acl Safe_ports port 80		# http
acl Safe_ports port 21		# ftp
acl Safe_ports port 443		# https
acl Safe_ports port 70		# gopher
acl Safe_ports port 210		# wais
acl Safe_ports port 1025-65535	# unregistered ports
acl Safe_ports port 280		# http-mgmt
acl Safe_ports port 488		# gss-http
acl Safe_ports port 591		# filemaker
acl Safe_ports port 777		# multiling http
acl CONNECT method CONNECT

# Deny requests to certain unsafe ports
http_access deny !Safe_ports

# Deny CONNECT to other than secure SSL ports
http_access deny CONNECT !SSL_ports

# Only allow cachemgr access from localhost
http_access allow localhost manager
http_access deny manager

# protect innocent web applications running on the proxy server who
# think the only one who can access services on "localhost" is a
# local user
http_access deny to_localhost

# Rule allowing access from nodes and head.
http_access allow oscarnet
http_access allow localhost

# And finally deny all other access to this proxy
http_access deny all

# Restrict squid to oscar network.
http_port $ip:$squid_port

# Set ou visible hostname.
visible_hostname $squid_visible_hostname

# Uncomment and adjust the following to add a disk cache directory.
#cache_dir ufs /var/spool/squid 100 16 256

# Leave coredumps in the first cache dir
coredump_dir /var/spool/squid

#
# Add any of your own refresh_pattern entries above these.
#
refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern -i (/cgi-bin/|\\\?)	0	0%	0
refresh_pattern .		0	20%	4320
EOF

close(SQUID_CONF);

opkg_print("enabling squid (http proxy) service at boot time on server\n");
!enable_system_services( (SQUID) )
    or (carp "ERROR: Couldn't enable squid (http proxy) service.\n", exit 1);

opkg_print("restarting squid (http proxy) service\n");
!system_service(SQUID,RESTART)
    or die "ERROR: Couldn't restart squid (http proxy) service on server.";

exit(0);
