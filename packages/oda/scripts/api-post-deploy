#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# Copyright (c) 2005-2007 The Trustees of Indiana University.  
#                    All rights reserved.

#$Id: post_install 5840 2007-05-02 17:13:51Z dikim $

#client make the /etc/odaserver file on all oscar s

use strict;
use Carp;

use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::Logger;

my ($db_type, $chk) = split(':', $ENV{OSCAR_DB});
if ( $db_type eq "pgsql" ){
    my $PG_DATA_DIR = "/var/lib/pgsql/data";
    my $database_daemon = "postgresql";
    my $pg_conf = "$PG_DATA_DIR/pg_hba.conf";
    my $postgresql_conf = "$PG_DATA_DIR/postgresql.conf";
    if ($chk eq "old"){
        if ( !system("/etc/init.d/$database_daemon status | grep -c stopped") ) {
            !system("/etc/init.d/$database_daemon start") or
                croak("Couldn't restart $database_daemon");
        }

        open OLD_CFG, "$pg_conf"
            or croak("Can not open $pg_conf file");
        open NEW_CFG, ">$pg_conf.$$";

        # Clear off the previous ODA configurations if it exists
        my $config_flag = 0;
        while(chomp(my $line = <OLD_CFG>)){
            print NEW_CFG "$line\n";
            $config_flag = 1 if ($line =~ m/^host.*127.0.0.1.*trust$/);
            last if $config_flag;
        }
        close NEW_CFG;
        close OLD_CFG;

        open UPDATE_CFG, ">>$pg_conf.$$"
            or croak("Can not open $pg_conf.$$ file");
            
        chomp(my @ip_addrs = `oda nics | grep -v List | grep -v =`);

        if ($#ip_addrs > -1){ #If @ip_addrs is not empty
            print UPDATE_CFG "# All the nodes to access oda(pgsql)\n";
            foreach my $ip (@ip_addrs){
                print "$ip\n";
                print UPDATE_CFG "host  all  all  $ip  255.255.255.0  trust\n";
            }
            close UPDATE_CFG;
        }
        rename $pg_conf, "$pg_conf.bak";
        rename "$pg_conf.$$", $pg_conf;

        system("chmod 600 $pg_conf");
        system("chown postgres:postgres $pg_conf");
    }

    my $database_daemon = "postgresql";
    oscar_log_subsection("Checking status of $db_type server $database_daemon");
    if (! -x "/etc/init.d/$database_daemon") {
        croak("Couldn't find /etc/init.d/$database_daemon. $db_type server not correctly installed?");
    }
    # Reload the database if it is running. Otherwise, just start it.
    if ( system("/etc/init.d/$database_daemon status | grep -c stopped > /dev/null 2>&1") ){
      !system("/etc/init.d/$database_daemon reload") or croak("Couldn't reload $database_daemon");
      $chk = "old";
      $ENV{OSCAR_DB} = "$db_type:$chk";
    } else {
      oscar_log_subsection("$database_daemon was not running and will start");
      !system("/etc/init.d/$database_daemon start") or croak("Couldn't start $database_daemon");
    }

}


my $file = "/etc/odaserver";
print "generating the $file file on all oscar clients\n";
my $command = ". /etc/profile.d/c3.sh && cexec \'echo oscar_server > $file\'";
print "$command\n";
system( $command ) && croak("oda server location file $file push failed.");



#####################################################################
#   OPIUM CONFIGURATION FOR ODA
#####################################################################

# Execute the confmgr of OPIUM to synchronize the /etc/odapw with
# client nodes.
my $opium_cmd = "/opt/sync_files/bin/confmgr --syncnow --add /etc/odapw";

system( $opium_cmd ) && croak("OPIUM failed to synchronize the /etc/odapw.");

exit 0;
