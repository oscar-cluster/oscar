<?xml version="1.0" encoding="ISO-8859-1"?>

<oscar>

  <!--
  =====================================================
  =====================================================
  ==                                                 ==
  ==    oda data for oda record in packages table    ==
  ==                                                 ==
  =====================================================
  =====================================================
  -->

  <!--
      Copyright (c) 2004 NCSA 
                         All rights reserved.
      
      This file is part of the OSCAR software package.  For license
      information, see the COPYING file in the top level directory of the
      OSCAR source distribution.
     
      $Id: config.xml,v 1.82 2004/05/04 22:54:31 ngorsuch Exp $
  -->
  <name>oda</name>

  <version>
    <major>1</major>
    <minor>30</minor>
    <subversion>0</subversion>
    <release>2</release>
    <epoch>1</epoch>
  </version>

  <class>core</class>

  <summary>Oscar DAtabase</summary>
  <license>Freely distributable</license>
  <group>Application/Environment</group>

  <packager>
    <name>Neil Gorsuch</name>
    <email>ngorsuch@ncsa.uiuc.edu</email>
  </packager>

  <maintainer>
    <name>Neil Gorsuch</name>
    <email>ngorsuch@ncsa.uiuc.edu</email>
  </maintainer>

  <description>ODA provides a central database for OSCAR.</description>

  <rpmlist>
    <filter group="oscar_server" distribution="fedora" distribution_version="1" />
    <filter group="oscar_server" distribution="redhat" distribution_version="7.3" />
    <filter group="oscar_server" distribution="rhas" distribution_version="2.1AS" />
    <rpm>mysql-server</rpm>
  </rpmlist>

  <rpmlist>
    <filter distribution="fedora" distribution_version="1" />
    <rpm>mysql</rpm>
    <rpm>perl-DBD-MySQL</rpm>
    <rpm>perl-DBI</rpm>
  </rpmlist>

  <rpmlist>
    <filter distribution="redhat" distribution_version="7.3" />
    <filter distribution="redhat" distribution_version="8.0" />
    <filter distribution="redhat" distribution_version="9"   />
    <filter distribution="rhas" distribution_version="2.1AS" />
    <rpm>perl-CGI</rpm>
    <rpm>mysql</rpm>
    <rpm>perl-DBD-MySQL</rpm>
    <rpm>perl-DBI</rpm>
  </rpmlist>

  <rpmlist>
    <filter distribution="mandrake" distribution_version="9.0" />
    <rpm>MySQL-client</rpm>
    <rpm>libmysql10</rpm>
    <rpm>perl-CGI</rpm>
    <rpm>perl-DBI</rpm>
    <rpm>perl-Mysql</rpm>
    <rpm>perl-ExtUtils-PerlPP</rpm>
    <rpm>oda</rpm>
    <rpm>MySQL</rpm>
  </rpmlist>

  <rpmlist>
    <filter distribution='mandrake' distribution_version='9.1' />
    <rpm>MySQL</rpm>
    <rpm>MySQL-client</rpm>
    <rpm>libmysql10</rpm>
    <rpm>perl-CGI</rpm>
    <rpm>perl-DBI</rpm>
    <rpm>perl-Mysql</rpm>
    <rpm>perl-ExtUtils-PerlPP</rpm>
    <rpm>oda</rpm>
    <rpm>MySQL-common</rpm>
    <rpm>libmysql12</rpm>
  </rpmlist>
    
  <rpmlist>
    <filter distribution='mandrake' distribution_version='9.2' />
    <rpm>MySQL</rpm>
    <rpm>MySQL-client</rpm>
    <rpm>libmysql12</rpm>
    <rpm>perl-CGI</rpm>
    <rpm>perl-DBI</rpm>
    <rpm>perl-Mysql</rpm>
    <rpm>perl-Data-ShowTable</rpm>
    <rpm>perl-ExtUtils-PerlPP</rpm>
    <rpm>oda</rpm>
    <rpm>MySQL-common</rpm>
    <rpm>libmysql12</rpm>
  </rpmlist>
  
  <rpmlist>
    <filter distribution='suse' />
    <rpm>mysql</rpm>
    <rpm>mysql-client</rpm>
    <rpm>perl-Msql-Mysql-modules</rpm>
    <rpm>perl-DBI</rpm>
    <rpm>perl-Data-ShowTable</rpm>
    <rpm>mysql-shared</rpm>
    <rpm>oda</rpm>
  </rpmlist>

  <rpmlist>
    <filter group="oscar_clients"/>
    <rpm>oda</rpm>
  </rpmlist>

  <package>

    <oda>
      <!--
      ===============================================
      ===============================================
      ==                                           ==
      ==        global shortcut definitions        ==
      ==                                           ==
      ===============================================
      ===============================================
       -->

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-=							      =-=
      =-= CLUSTER_PARTITIONS table shortcuts			      =-=
      =-=							      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> add_node_to_cluster_partition </command>
        <description>
          add_node_to_cluster_partition adds a node to a cluster partition,
          removing it from whichever cluster partition it belonged to 
          previously, required and only parameters are:
                  node          name of the node to add
                  partition     name of the cluster partition to add it to
        </description>
        <expansion>
          modify_record 
          nodes
          nodes.name=%1
          cluster_partitions.name=%2
          nodes.cluster_partition_id~cluster_partitions.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> cluster_partition_id_to_name </command>
        <expansion>
          read_records
          cluster_partitions
          id=%1
          name
        </expansion>
      </shortcut>

      <shortcut>
        <command> cluster_partition_name_to_id </command>
        <expansion>
          read_records
          cluster_partitions
          name=%1
          id
        </expansion>
      </shortcut>

      <shortcut>
        <command> cluster_partitions </command>
        <expansion>
          read_records
          cluster_partitions
          cluster_partitions.name
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> create_cluster_partition </command>
        <description>
          create_cluster_partition creates a new cluster partition record,
          required parameters are:
                  name          name of the cluster partition
        </description>
        <expansion>
          insert_record
          cluster_partitions
          cluster_partitions.name~%1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_all_cluster_partitions </command>
        <description>
          delete_all_cluster_partitions deletes all cluster partitions.
          The portions of this multiple commands shortcut do:
          Delete all cluster partition records.
          Set all node records partition id to null.
        </description>
        <expansion>
          delete_records
          cluster_partitions
          name=name
          ;
          modify_records
          nodes
          name=name
          nodes.cluster_partition_id~null
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_cluster_partition </command>
        <description>
          delete_cluster_partition deletes a single cluster partition.
          The portions of this multiple commands shortcut do:
          Set all node records that point to this partition to no partition.
          Delete the appropriate cluster partition record.
        </description>
        <expansion>
          modify_records
          nodes
          cluster_partitions.name=%1
          cluster_parititons.id=nodes.cluster_partition_id
          nodes.cluster_partition_id~null
          ;
          delete_records
          cluster_partitions
          cluster_partitions.name=%1
        </expansion>
      </shortcut>

      <shortcut>
        <command> nodes_in_cluster_partition </command>
        <description>
          nodes_in_cluster_partition lists the nodes that are in a cluster partition.
          required parameters are:
                  name          name of the cluster partition
        </description>
        <expansion>
          read_records
          cluster_partitions.name=%1
          cluster_partitions.id=nodes.cluster_partition_id
          nodes.name
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_node_from_cluster_partitions </command>
        <expansion>
          modify_records
          nodes
          nodes.name=%1
          nodes.cluster_partition_id=null
        </expansion>
      </shortcut>

      <shortcut>
        <command> rename_cluster_partition </command>
        <expansion>
          modify_records
          cluster_partitions
          name=%1
          name~%2
        </expansion>
      </shortcut>

      <shortcut>
        <command> which_cluster_partition_has_node </command>
        <expansion>
          read_records
          nodes.name=%1
          nodes.cluster_partition_id=cluster_partitions.id
          cluster_partitions.name
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-=							      =-=
      =-= CONFIGURATIONS table shortcuts			      =-=
      =-=							      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> configurations </command>
        <description>
          configurations lists the names of all node group records.
          Adding further        parameters can also list specified
          configuration field values and/or can specify conditions
          to match only certain recoreds. No parameters are required.
        </description>
        <expansion>
          read_records
          configurations
          configurations.name
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> create_configuration </command>
        <description>
          create_configuration creates a new named configuration,
          required parameters are:
                  name          name of the configuration
        </description>
        <expansion>
          insert_record
          configurations
          configurations.name~%1
          %+
        </expansion>
      </shortcut>


      <!--
      ==================================================
      ==           NEST SHORTCUTS <BEGIN>             ==
      ==================================================
      -->
    
      <shortcut>
        <command> add_config_opkgs </command>
        <description>
          add_config_opkgs insert a configurations_id and package_id,
          required parameters are:
                  configurations_id          ID of the configurations
                  package_id                 ID of the package
        </description>
        <expansion>
          insert_record
          config_opkgs
          config_opkgs.configurations_id~%1
          config_opkgs.package_id~%2
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> add_node_config_revs </command>
        <description>
          add_node_config_revs insert a node_id and configurations_id with config's revison,
          required parameters are:
                  node_id                    ID of the node
                  configurations_id          ID of the configurations
          Optional parameters are:
                  version         To control the change of configuration (default 0)
        </description>
        <expansion>
          insert_record
          node_config_revs
          node_config_revs.node_id~%1
          node_config_revs.configurations_id~%2
          %+
        </expansion>
      </shortcut>
      
      <shortcut>
        <command> del_node_config_opkgs </command>
        <description>
          del_node_config_opkgs delete a record from node_config_revs 
          and config_opkgs tables with a node name,
          required parameters are:
                  nodes.name                    Name of the node
        </description>
        <expansion>
          delete_records
          config_opkgs
          configurations_id=node_config_revs.configurations_id
          node_config_revs.node_id=nodes.id
	      nodes.name=%1
          ;
          delete_records
          node_config_revs
          node_id=nodes.id
          nodes.name=%1
        </expansion>
      </shortcut>

      <shortcut>
        <command> install_opkg </command>
        <description>
          install_opkg inserts a record from config_opkgs 
          table with a package name,
          required parameters are:
                  configurations.id           ID of the configurations
                  package.name                Name of the package
        </description>
        <expansion>
          insert_record
          config_opkgs
          config_opkgs.configurations_id~%1
          config_opkgs.package_id~packages.id
          packages.name=%2
        </expansion>
      </shortcut>

      <shortcut>
        <command> uninstall_opkg </command>
        <description>
          uninstall_opkg delete a record from config_opkgs 
          table with a package name,
          required parameters are:
                  package.name                    Name of the package
        </description>
        <expansion>
          delete_records
          config_opkgs
          config_opkgs.package_id=packages.id
          packages.name=%1
        </expansion>
      </shortcut>

      <shortcut>
        <command> list_services </command>
        <description>
          Lists all services provided by a group, if the service does
          not belong to a group, the group is NULL.  Required parameter is:
		group		Group you want to list services
        </description>
        <expansion>
          read_records
          packages_servicelists.service
          packages.id=packages_servicelists.package_id
          packages.installed=1
          packages_servicelists.group=%1
        </expansion>
      </shortcut>

      <!--
      ==================================================
      ==            NEST SHORTCUTS <END>              ==
      ==================================================
      -->
    
      <shortcut>
        <command> delete_all_configurations </command>
        <description>
          delete_all_configurations deletes all named configurations.
          Note that this will not delete any configurations that 
          are associated with a single node group.
        </description>
        <expansion>
          delete_records
          node_groups_included_configurations
          node_groups_included_configurations.configuration_id=
          configurations.id
          configurations.special=0
          ;
          delete_records
          package_configurations
          package_configurations.configuration_id=
          configurations.id
          configurations.special=0
          ;
          delete_records
          configurations
          configurations.special=0
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_configuration </command>
        <description>
          delete_configuration deletes a single named configuration.
          Note that this will not delete any configurations that 
          were created along with node groups with same names as 
          the node group.
        </description>
        <expansion>
          delete_records
          node_groups_included_configurations
          node_groups_included_configurations.configuration_id=configurations.id
          configurations.name=%1
          configurations.special=0
          %+
          ;
          delete_records
          package_configurations
          package_configurations.configuration_id=
          configurations.id
          configurations.name=%1
          configurations.special=0
          %+
          ;
          delete_records
          configurations
          configurations.name=%1
          configurations.special=0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> rename_configuration </command>
        <description>
          rename_configuration renames a named configuration.
          Note that this will not rename the configuration if it was
          automatically associated with and created for a single node group,
          this happens when the node group is renamed.
        </description>
        <expansion>
          modify_records
          configurations
          configurations.special=0
          configurations.name=%1
          configurations.name~%2
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-=							      =-=
      =-= CONFIGURATIONS <> NODE_GROUPS shortcuts       	      =-=
      =-=							      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> add_configuration_to_node_group </command>
        <description>
          add_configuration_to_node_group adds a named configuration to a
          node group, required and only parameters are:
                  configuration   name of configuration
                  group           name of node group
        </description>
        <expansion>
          insert_record
          node_groups_included_configurations
          configurations.name=%1
          configurations.special=0
          node_groups.name=%2
          node_groups_included_configurations.configuration_id~configurations.id
          node_groups_included_configurations.node_group_id~node_groups.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> configurations_in_node_group </command>
        <description>
          configurations_in_node_group lists the names of all 
          configuraitons that are included in a given node group.
          This is not recursive, it only lists the configurations 
          linked directly to the node group, not the configurations
          that are linked to other node groups that are part of
          the specified node group. Required parameters are:
                  group          name of the node group
        </description>
        <expansion>
          read_records
          configurations
          configurations.name
          configurations.id=node_groups_included_configurations.configuration_id
          node_groups_included_configurations.node_group_id=node_groups.id
          node_groups.name=%1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_configuration_from_all_node_groups </command>
        <description>
          remove_configuration_from_all_node_groups removes
          a named configurations from all node groups.
          Note that this will not remove the named configuration if it was
          automatically associated with and created for a single node group.
        </description>
        <expansion>
          delete_records
          node_groups_included_configurations
          node_groups_included_configurations.configuration_id=configurations.id
          configurations.special=0
          configurations.name=%1
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_configuration_from_node_group </command>
        <description>
          remove_configuration_from_node_group removes
          a named configuration from a specified node group.
          Note that this will not remove the named configuration if it was
          automatically associated with and created for a single node group.
        </description>
        <expansion>
          delete_records
          node_groups_included_configurations
          node_groups_included_configurations.configuration_id=configurations.id
          configurations.special=0
          configurations.name=%1
          node_groups_included_configurations.node_group_id=node_groups.id
          node_groups.name=%2
          %+
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-=							      =-=
      =-= CONFIGURATIONS <> NODES shortcuts       		      =-=
      =-=							      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> add_configuration_to_node </command>
        <description>
          add_configuration_to_node adds a named configuration to a
          node (really this adds the configuration to the special 
	    node group that includes only that node), required and 
          only parameters are:
                  configuration   name of configuration
                  node            name of node
        </description>
        <expansion>
          insert_record
          node_groups_included_configurations
          configurations.name=%1
          configurations.special=0
          nodes.name=%2
          nodes.name=node_groups.name
          node_groups_included_configurations.configuration_id~configurations.id
          node_groups_included_configurations.node_group_id~node_groups.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_configuration_from_node </command>
        <description>
          remove_configuration_from_node removes a named configuration
          from a specified node (really this removes the configuration
          from the special node group that includes only that node).
          Note that this will not remove the named configuration if it was
          automatically associated with and created for a single node group.
        </description>
        <expansion>
          delete_records
          node_groups_included_configurations
          configurations.name=%1
          configurations.special=0
          configurations.id=node_groups_included_configurations.configuration_id
          node_groups_included_configurations.node_group_id=node_groups.id
          node_groups.name=nodes.name
          nodes.name=%2
          %+
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-=							      =-=
      =-= CONFIGURATIONS <> PACKAGE_CONFIGURATION_VALUES shortcuts    =-=
      =-=							      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> add_configuration_package_field_value </command>
        <description>
          add_configuration_package_field_value adds another
          value to a named configuration package field. 
          This assumes that there is only one version of the package.
          Using this shortcut, each field is treated as a list of values.
          See the add_node_group_configuration_package_field_value shortcut
          if you want to add a field value to the automatically created
          configuration for a particular node group. 
          See the add_node_configuration_package_field_value shortcut
          if you want to add a field value to the automatically created
          configuration for a particular node. 
          Required parameters are:
                  configuration   name of the configuration
                  package                name of the package
                  field           name of the field being added (to)
                  value                value being added to the field
        </description>
        <expansion>
          insert_record
          package_configuration_values
          configurations.name=%1
          configurations.id=package_configurations.configuration_id
          packages.name=%2
          packages.id=package_configurations.package_id
          package_configurations.id=
          package_configuration_values.package_configuration_id
          package_configuration_values.field~%3
          package_configuration_values.value~%4
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> add_configuration_package_version_field_value </command>
        <description>
          add_configuration_package_version_field_value adds
          another value to a named configuration package field. 
          Using this shortcut, each field is treated as a list of values.
          See the add_node_group_configuration_package_version_field_value
          shortcut if you want to add a field value to the automatically
          created configuration for a particular node group. 
          See the add_node_configuration_package_version_field_value
          shortcut if you want to add a field value to the automatically
          created configuration for a particular node. 
          Required and only parameters are:
                  configuration   name of the configuration
                  package                name of the package
                  version                version of the package
                  field           name of the field being added (to)
                  value                value being added to the field
        </description>
        <expansion>
          add_configuration_package_field_value
          %1
          %2
          %4
          %5
          packages.version=%3
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_field_from_configuration_package </command>
        <description>
          remove_field_from_configuration_package removes a
          field and all of it's values from a named configuration
          for a specified package. This assumes that there is only
          version of the package. Required and only parameters are:
                  field           name of the field being removed
                  configuration   name of the configuration
                  package                name of the package
        </description>
        <expansion>
          delete_records
          package_configuration_values
          package_configuration_values.field=%1
          package_configuration_values.package_configuration_id=
          package_configurations.id
          package_configurations.configuration_id=configurations.id
          configurations.name=%2
          package_configurations.package_id=packages.id
          packages.name=%3
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_field_from_configuration_package_version </command>
        <description>
          remove_field_from_configuration_package_version removes a
          field and all of it's values from a named configuration
          for a specified package. Required and only parameters are:
                  field           name of the field being removed
                  configuration   name of the configuration
                  package                name of the package
                  version                version of the package
        </description>
        <expansion>
          remove_field_from_configuration_package
          %1
          %2
          %3
          packages.version=%4
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> set_configuration_package_field_value </command>
        <description>
          set_configuration_package_field_value sets the value
          of a named configuration field for a specified version.
          This assumes that there is only one version of the package.
          It will create a new single value for the field if needed.
          It will delete any extra values for field if there is
          already more than one field value there.
          Required and only parameters are:
                  configuration   name of the configuration
                  package                name of the package
                  field           name of the field being added (to)
                  value                value being added to the field
        </description>
        <expansion>
          remove_field_from_configuration_package
          %1
          %2
          %3
          %+
          ;
          add_configuration_package_field_value
          %1
          %2
          %3
          %4
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> set_configuration_package_version_field_value </command>
        <description>
          set_configuration_package_version_field_value sets the value
          of a named configuration field for a specified version.
          It will create a new single value for the field if needed.
          It will delete any extra values for field if there is
          already more than one field value there.
          Required and only parameters are:
                  configuration   name of the configuration
                  package                name of the package
                  version                version of the package
                  field           name of the field being added (to)
                  value                value being added to the field
        </description>
        <expansion>
          remove_field_from_configuration_package_version
          %1
          %2
          %3
          %4
          ;
          add_configuration_package_version_field_value
          %1
          %2
          %3
          %4
          %5
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= DISK_PARTITIONS and DISK_LAYOUTS shortcuts       	      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> add_partition_to_disk_layout </command>
        <description>
          add_partition_to_disk_layout adds a disk partition to a
          disk layout record, required and only parameters are:
                  name          partition name
                  offset        offset of the start of the partition
                  size          size of the partition
                  type          type of the partition
                  layout              name of the disk layout record to add it to
        </description>
        <expansion>
          insert_record
          disk_partitions
          partition~%1
          offset~%2
          size~%3
          type~%4
          disk_layouts.name=%5
          disk_layout_id~disk_layouts.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> create_disk_layout </command>
        <description>
          create_disk_layout creates a new disk layout record,
          required parameters are:
                  name          name of the new disk layout record
          Optional parameters are:
                  units         for offsets and sizes (default mb)
        </description>
        <expansion>
          insert_record
          disk_partitions
          disk_partitions.name~%1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_disk_layout </command>
        <expansion>
          delete_records
          disk_partitions.disk_layout_id=disk_layouts.id
          disk_layouts.name=%1
          ;
          delete_records
          disk_layouts
          name=%1
        </expansion>
      </shortcut>

      <shortcut>
        <command> disk_layout_id_to_name </command>
        <expansion>
          read_records
          disk_layouts
          id=%1
          name
        </expansion>
      </shortcut>

      <shortcut>
        <command> disk_layout_name_to_id </command>
        <expansion>
          read_records
          disk_layouts
          name=%1
          id
        </expansion>
      </shortcut>

      <shortcut>
        <command> disk_layouts </command>
        <expansion>
          read_records
          disk_layouts.name
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> link_node_to_disk_layout </command>
        <expansion>
          modify_records
          modes
          nodes.name=%1
          disk_layouts.name=%2
          nodes.disk_layout_id~disk_layouts.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> list_nodes_in_disk_layout </command>
        <expansion>
          read_records
          disk_layouts.name=%1
          disk_layouts.id=nodes.disk_layout_id
          nodes.name
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_disk_partition_from_disk_layout </command>
        <expansion>
          delete_records
          disk_partitions
          disk_partitions.partition=%1
          disk_layouts.name=%2
          disk_layouts.id=disk_partitions.disk_layout_id
        </expansion>
      </shortcut>

      <shortcut>
        <command> rename_disk_layout </command>
        <expansion>
          modify_records
          disk_layouts
          disk_layouts.name=%1
          disk_layouts.name~%2
        </expansion>
      </shortcut>

      <shortcut>
        <command> unlink_node_from_disk_layouts </command>
        <expansion>
          modify_records
          nodes
          nodes.name=%1
          nodes.disk_layout_id~null
        </expansion>
      </shortcut>

      <shortcut>
        <command> which_disk_layout_has_node </command>
        <expansion>
          read_records
          disk_layouts.id=nodes.disk_layout_id
          nodes.name=%1
          disk_layouts.name
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= IMAGES table shortcuts				      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> create_image </command>
        <description>
          create_image creates a new image record,
          required parameters are:
                  name          name of the new image record
          Optional parameters are:
                  path          base directory path on server

        </description>
        <expansion>
          insert_record
          images
          images.name~%1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_image </command>
        <expansion>
          modify_records
          nodes
          nodes.image_id=images.id
          images.name=%1
          nodes.images_id~0
          ;
          delete_records
          images
          name=%1
        </expansion>
      </shortcut>

      <shortcut>
        <command> image_id_to_name </command>
        <expansion>
          read_records
          images
          id=%1
          name
        </expansion>
      </shortcut>

      <shortcut>
        <command> image_name_to_id </command>
        <expansion>
          read_records
          images
          name=%1
          id
        </expansion>
      </shortcut>

      <shortcut>
        <command> images </command>
        <expansion>
          read_records
          images.name
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> link_node_to_image </command>
        <expansion>
          modify_records
          nodes
          nodes.name=%1
          images.name=%2
          nodes.image_id~images.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> list_nodes_in_image </command>
        <expansion>
          read_records
          images.name=%1
          images.id=nodes.image_id
          nodes.name
        </expansion>
      </shortcut>

      <shortcut>
        <command> rename_image </command>
        <expansion>
          modify_records
          images
          images.name=%1
          images.name~%2
        </expansion>
      </shortcut>

      <shortcut>
        <command> unlink_node_from_images </command>
        <expansion>
          modify_records
          nodes
          nodes.name=%1
          nodes.image_id~null
        </expansion>
      </shortcut>

      <shortcut>
        <command> which_image_has_node </command>
        <expansion>
          read_records
          images.id=nodes.image_id
          nodes.name=%1
          images.name
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= NETWORKS and NODE_NICS  shortcuts       		      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> create_network </command>
        <description>
          create_network creates a new network record,
          required parameters are:
                  name          name of the network
                  base_ip              base ip address of the network
                  netmask              netmask of the network
          Optional parameters are:
                  broadcast     broadcast address of the network
                  cluster_only  non-zero if private cluster network, default 0
                  gateway       gateway address of the network
        </description>
        <expansion>
          insert_record
          networks
          networks.name~%1
          networks.base_ip~%2
          networks.netmask~%3
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> create_nic_on_node </command>
        <description>
          create_nic_on_node creates a new network interface entry
          in a node record, required parameters are:
                  interface    name of the new network interface entry
                  node         name of the node record
                  
          Optional parameters are:
                  assignment    method of assigning IP "static" or "dhcp"
                  broadcast     broadcast address of the network
                  driver_module name of the associated driver module
                  gateway       gateway address of the network
              interface     name of the interface
              ip            ip address of the nic
              mac              mac address of the nic
              netmask              netmask mask of the network
        </description>
        <expansion>
          insert_record
          nics
          nics.name~%1
          nodes.name=%2
          nics.node_id~nodes.id
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_network </command>
        <expansion>
          modify_records
          nics
          nics.network_id=networks.id
          networks.name=%1
          nics.network_id~0
          ;
          delete_records
          networks
          name=%1
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_node_nic </command>
        <expansion>
          delete_records
          nics
          nodes.name=%1
          nics.name=%2
          nics.node_id=nodes.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> ip_to_node </command>
        <description>
          ip_to_node returns the node name which has the given
          network ip address on one of the node nics, required
          parameter is:
                  ip            ip address
        </description>
        <expansion>
          read_records
          nics.ip=%1
          nics.node_id=nodes.id
          nodes.name
        </expansion>
      </shortcut>

      <shortcut>
        <command> link_node_nic_to_network </command>
        <description>
          link_node_nic_to_network links a particular nic on a node
          to a specified network, required parameters are:
                  node          name of the node
                  nic              name of the nic on the node
                  network              name of the network
        </description>
        <expansion>
          modify_records
          nics
          nodes.name=%1
          nics.name=%2
          networks.name=%3
          nics.node_id~nodes.id
          nics.network_id~networks.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> list_nics_on_node </command>
        <expansion>
          read_records
          nodes.name=%1
          nics.node_id=nodes.id
          nics.name
        </expansion>
      </shortcut>

      <shortcut>
        <command> list_node_nics_on_network </command>
        <expansion>
          read_records
          networks.name=%1
          nics.node_id=nodes.id
          nics.network_id=networks.id
          nodes.name
          nics.name
        </expansion>
      </shortcut>

      <shortcut>
        <command> list_nodes_on_network </command>
        <expansion>
          read_records
          networks.name=%1
          nics.node_id=nodes.id
          nics.network_id=networks.id
          nodes.name
        </expansion>
      </shortcut>

      <shortcut>
        <command> network_id_to_name </command>
        <expansion>
          read_records
          networks
          id=%1
          name
        </expansion>
      </shortcut>

      <shortcut>
        <command> network_name_to_id </command>
        <expansion>
          read_records
          networks
          name=%1
          id
        </expansion>
      </shortcut>

      <shortcut>
        <command> networks </command>
        <expansion>
          read_records
          networks.name
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_nic_broadcast </command>
        <description>
          node_nic_broadcast reads the network broadcast value
          for a specified nic interface on a specified node.
          It will use the nic record's broadcast field if that
          has been set, otherwise, if a network is linked to
          the nic and the network has a broadcast value that
          has been set the network record's broadcast field
          will be used. Required and only parameters are:
                  node        name of the node
                  nic         name of nic interface
        </description>
        <expansion>
          read_records
          nodes.name=%1
          nodes.id=nics.node_id
          nics.name=%2
          nics.broadcast!=null
          nics.broadcast
          ;
          read_records
          nodes.name=%1
          nodes.id=nics.node_id
          nics.name=%2
          nics.broadcast=null
          nics.network_id=networks.id
          networks.broadcast!=null
          networks.broadcast
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_nic_base_ip </command>
        <description>
          node_nic_base_ip reads the network base ip address for a
          particular nic on a node. First, for each nic attached 
          to the node, it will try to use the nic base_ip field if
          that has been set. Otherwise, if a network is linked to
          the nic and the network has a base_ip address that has 
          been set, the network base_ip field will be used.
          Required and only parameters are:
                  node        name of the node
                  nic         name of the nic
        </description>
        <expansion>
          read_records
          nodes.name=%1
          nodes.id=nics.node_id
          nics.name=%2
          nics.base_ip!=null
          nics.base_ip
          ;
          read_records
          nodes.name=%1
          nodes.id=nics.node_id
          nics.name=%2
          nics.base_ip=null
          nics.network_id=networks.id
          networks.base_ip!=null
          networks.base_ip
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_nic_gateway </command>
        <description>
          node_nic_gateway reads the network gateway address for a
          particular nic on a node, ignoring the node gateway field.
          First, for each nic attached to the node, it will try to
          use the nic gateway field if that has been set. Otherwise,
          if a network is linked to the nic and the network has a 
          gateway address that has been set, the network gateway 
          field will be used. Required and only parameters are:
                  node        name of the node
                  nic         name of the nic
        </description>
        <expansion>
          read_records
          nodes.name=%1
          nodes.id=nics.node_id
          nics.name=%2
          nics.gateway!=null
          nics.gateway
          ;
          read_records
          nodes.name=%1
          nodes.id=nics.node_id
          nics.name=%2
          nics.gateway=null
          nics.network_id=networks.id
          networks.gateway!=null
          networks.gateway
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_nic_high_ip </command>
        <description>
          node_nic_high_ip reads the network high ip address for a
          particular nic on a node. First, for each nic attached 
          to the node, it will try to use the nic high_ip field if
          that has been set. Otherwise, if a network is linked to
          the nic and the network has a high_ip address that has 
          been set, the network high_ip field will be used.
          Required and only parameters are:
                  node        name of the node
                  nic         name of the nic
        </description>
        <expansion>
          read_records
          nodes.name=%1
          nodes.id=nics.node_id
          nics.name=%2
          nics.high_ip!=null
          nics.high_ip
          ;
          read_records
          nodes.name=%1
          nodes.id=nics.node_id
          nics.name=%2
          nics.high_ip=null
          nics.network_id=networks.id
          networks.high_ip!=null
          networks.high_ip
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_nic_ip </command>
        <description>
          node_nic_ip reads the network ip address value
          for a specified nic interface on a specified node.
          Required and only parameters are:
                  node        name of the node
                  nic         name of nic interface
        </description>
        <expansion>
          read_records
          nodes.name=%1
          nodes.id=nics.node_id
          nics.name=%2
          nics.ip!=null
          nics.ip
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_nic_netmask </command>
        <description>
          node_nic_netmask reads the network netmask value
          for a specified nic interface on a specified node.
          It will use the nic record's netmask field if that
          has been set, otherwise, if a network is linked to
          the nic and the network has a netmask value that
          has been set the network record's netmask field
          will be used. Required and only parameters are:
                  node        name of the node
                  nic         name of nic interface
        </description>
        <expansion>
          read_records
          nodes.name=%1
          nodes.id=nics.node_id
          nics.name=%2
          nics.netmask!=null
          nics.netmask
          ;
          read_records
          nodes.name=%1
          nodes.id=nics.node_id
          nics.name=%2
          nics.netmask=null
          nics.network_id=networks.id
          networks.netmask!=null
          networks.netmask
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_nic_rfc1918 </command>
        <description>
          node_nic_rfc1918 reads the network rfc1918 value
          for a specified nic interface on a specified node.
          It will use the nic record's rfc1918 field if that
          has been set, otherwise, if a network is linked to
          the nic and the network has a rfc1918 value that
          has been set the network record's rfc1918 field
          will be used. Required and only parameters are:
                  node        name of the node
                  nic         name of nic interface
        </description>
        <expansion>
          read_records
          nodes.name=%1
          nodes.id=nics.node_id
          nics.name=%2
          nics.rfc1918!=null
          nics.rfc1918
          ;
          read_records
          nodes.name=%1
          nodes.id=nics.node_id
          nics.name=%2
          nics.rfc1918=null
          nics.network_id=networks.id
          networks.rfc1918!=null
          networks.rfc1918
        </expansion>
      </shortcut>

      <shortcut>
        <command> nodes_nics </command>
        <description>
          nodes_nics lists all of the node/nic pairs.
        </description>
        <expansion>
          read_records
	  nodes.name
	  nodes.id=nics.node_id
          nics.name
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> rename_network </command>
        <expansion>
          modify_records
          networks
          networks.name=%1
          networks.name~%2
        </expansion>
      </shortcut>

      <shortcut>
        <command> rename_node_nic </command>
        <expansion>
          modify_records
          nics
          nodes.name=%1
          nics.name=%2
          nics.node_id=nodes.id
          nics.name~%3
        </expansion>
      </shortcut>

      <shortcut>
        <command> unlink_node_nic_from_networks </command>
        <expansion>
          modify_records
          nics
          nodes.name=%1
          nics.name=%2
          nics.node_id=nodes.id
          nics.network_id~null
        </expansion>
      </shortcut>

      <shortcut>
        <command> which_networks_have_node </command>
        <expansion>
          read_records
          nodes.name=%1
          nics.node_id=nodes.id
          nics.network_id=networks.id
          networks.name
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= NODES table shortcuts					      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> add_dns_server_to_node </command>
        <description>
          add_dns_server_to_node adds a dns server to a
          node record, required and only parameters are:
                  dns_server    IP or dns name of dns server machine to add
                  node          cluster node name of the record to modify
        </description>
        <expansion>
          insert_record
          nodes_included_dns_servers
          nodes_included_dns_servers.server~%1
          nodes.name=%2
          nodes_included_dns_servers.node_id~nodes.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> create_node </command>
        <description>
          create_node creates a new node record. This also 
          creates an associated node group record of the same
          name which cannot have any other node groups be 
          included in the associated node group, and it also
          creates an associated configuration of the same name.
          Required parameters are:
                   name          name of the node record
          Optional parameters are:
                  cpu_num       number of processors
                  cpu_speed     speed of processor(s)
                  cpu_type      type of processor(s)
                  default_gateway IP or dns name of the default gateway
                  domain        dns domain of the node
                  hostname      name of the node returned by hostname command
                  ram           amount of ram in the node
                  swap              amount of swap space in the node
                  units              units for ram and swap
        </description>
        <expansion>
          create_node_group
          %1
          node_groups.special~1
          ;
          insert_record
          nodes
          nodes.name~%1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_node </command>
        <description>
          delete_node deletes a node record. This also 
          deletes the associated node group record of the same
          name, and the associated configuration of the same name.
          Note that this shortcut cannot delete any nodes that
          are marked as being special. Required parameter is:
                   name          name of the node record
        </description>
        <expansion>
          delete_records
          nics
          nics.node_id=nodes.id
          nodes.name=%1
          ;
          modify_records
          node_groups
          node_groups.name=%1
          node_groups.special~0
          ;
          delete_node_group
          %1
          ;
          modify_records
          oscar
          oscar.oscar_server_node_id=nodes.id
          nodes.name=%1
          oscar.oscar_server_node_id~0
          ;
          delete_records
          nodes
          name=%1
        </expansion>
      </shortcut>

      <shortcut>
        <command> ip_to_node_name </command>
        <expansion>
          read_records
          nics.ip=%1
          nics.node_id=nodes.id
          nodes.name
        </expansion>
      </shortcut>

      <shortcut>
        <command> list_nodes_using_dns_server </command>
        <expansion>
          read_records
          nodes_included_dns_servers.server=%1
          nodes_included_dns_servers.node_id=nodes.id
          nodes.name
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_cluster_only_ips </command>
        <expansion>
          read_records
          nodes.name=%1
          nics.node_id=nodes.id
          nics.network_id=networks.id
          networks.cluster_only!=0
          nics.ip
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_gateway </command>
        <description>
          node_gateway reads the network gateway address for node.
          First, it will try to use the gateway field for the node.
          Then, for each nic attached to the node, it will try to
          use the nic gateway field if that has been set. Otherwise,
          if a network is linked to one of the node's nics and the 
          network has a gateway address that has been set, the 
          network gateway field will be used. Note that more than one
          gateway value can be returned if more than one nic
          on the node has a gateway field set or points to a
          network with a gateway field set.
          Required and only parameters are:
                  node        name of the node
        </description>
        <expansion>
          read_records
          nodes.name=%1
          nodes.gateway!=null
          nodes.gateway
          ;
          read_records
          nodes.name=%1
          nodes.gateway=null
          nodes.id=nics.node_id
          nics.gateway!=null
          nics.gateway
          ;
          read_records
          nodes.name=%1
          nodes.gateway=null
          nodes.id=nics.node_id
          nics.gateway=null
          nics.network_id=networks.id
          networks.gateway!=null
          networks.gateway
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_hostname_to_name </command>
        <expansion>
          read_records
          nodes
          hostname=%1
          name
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_id_to_name </command>
        <expansion>
          read_records
          nodes
          nodes.id=%1
          nodes.name
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_ips </command>
        <expansion>
          read_records
          nodes.name=%1
          nics.node_id=nodes.id
          nics.ip!=null
          nics.ip
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_name_to_hostname </command>
        <expansion>
          read_records
          nodes
          name=%1
          hostname!=null
          hostname
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_name_to_id </command>
        <expansion>
          read_records
          nodes
          name=%1
          id
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_public_ips </command>
        <expansion>
          read_records
          nodes.name=%1
          nics.node_id=nodes.id
          nics.network_id=networks.id
          networks.cluster_only=0
          nics.ip
        </expansion>
      </shortcut>

      <shortcut>
        <command> nodes </command>
        <description>
          nodes lists the names of all nodes. Adding further
          parameters can also list specified node field values
          and/or can specify condition to match only certain nodes.
          No parameters are requires.
        </description>
        <expansion>
          read_records
          nodes
          nodes.name
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> nodes_cluster_only_ips </command>
        <expansion>
          read_records
          nics.node_id=nodes.id
          nics.network_id=networks.id
          networks.cluster_only!=0
          nics.ip
        </expansion>
      </shortcut>

      <shortcut>
        <command> nodes_public_ips </command>
        <expansion>
          read_records
          nics.node_id=nodes.id
          nics.network_id=networks.id
          networks.cluster_only=0
          nics.ip
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_dns_server_from_node </command>
        <expansion>
          delete_records
          nodes_included_dns_servers
          nodes_included_dns_servers.server=%1
          nodes.name=%2
          nodes_included_dns_servers.node_id=nodes.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> rename_node </command>
        <description>
          rename_node renames a node record. This also renames
          the associated node group record of the same name, and
          renames the associated configuration of the same name.
          Note that this shortcut cannot rename any nodes that
          are marked as being special. Required parameters are:
                   old          old name of the node record
                   new          new name of the node record
        </description>
         <expansion>
          modify_records
          nodes
          nodes.name=%1
          nodes.name~%2
          ;
          modify_records
          node_groups
          node_groups.name=%1
          node_groups.name~%2
          ;
          modify_records
          configurations
          configurations.name=%1
          configurations.name~%2
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= NODES <> PACKAGE_CONFIGURATION_VALUES shortcuts             =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> add_node_configuration_package_field_value </command>
        <description>
          add_node_configuration_package_field_value adds another
          package field value to the automatically created
          configuration that was associated with the specified node. 
          This assumes that there is only one version of the package.
          Using this shortcut, each field is treated as a list of values.
          See the add_node_group_configuration_package_field_value shortcut
          if you want to add a field value to the automatically created
          configuration for a particular node group. 
          Required parameters are:
                  node        name of the node
                  package            name of the package
                  field       name of the field being added (to)
                  value            value being added to the field
        </description>
        <expansion>
          insert_record
          package_configuration_values
          nodes.name=%1
          nodes.name=node_groups.name
          node_groups.name=configurations.name
          configurations.id=package_configurations.configuration_id
          packages.name=%2
          packages.id=package_configurations.package_id
          package_configurations.id=
          package_configuration_values.package_configuration_id
          package_configuration_values.field~%3
          package_configuration_values.value~%4
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> add_node_configuration_package_version_field_value </command>
        <description>
          add_node_configuration_package_version_field_value adds
          another package field value to the automatically created
          configuration that was associated with the specified node. 
          This assumes that there me be more than one version of the package.
          Using this shortcut, each field is treated as a list of values.
          See the add_node_group_configuration_package_version_field_value
          shortcut if you want to add a field value to the automatically
          created configuration for a particular node. 
          Required parameters are:
                  node        name of the node
                  package            name of the package
                  version            version of the package
                  field       name of the field being added (to)
                  value            value being added to the field
        </description>
        <expansion>
          add_node_configuration_package_field_value
          %1
          %2
          %4
          %5
          packages.version=%3
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_field_from_node_configuration_package </command>
        <description>
          remove_field_from_node_configuration_package removes a
          field and all of it's values from an automatically created
          configuration that was associated with the specified node.
          This assumes that there is only version of the package.
          Required parameters are:
                  field           name of the field being removed
                  node            name of the node
                  package                name of the package
        </description>
        <expansion>
          delete_records
          package_configuration_values
          package_configuration_values.field=%1
          package_configuration_values.package_configuration_id=
          package_configurations.id
          package_configurations.configuration_id=configurations.id
          nodes.name=%2
          nodes.name=node_groups.name
          node_groups.name=configurations.name
          package_configurations.package_id=packages.id
          packages.name=%3
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_field_from_node_configuration_package_version </command>
        <description>
          remove_field_from_node_configuration_package_version removes
          a field and all of it's values from an automatically created
          configuration that was associated with the specified node.
          Required and only parameters are:
                  field           name of the field being removed
                  node            name of the node
                  package                name of the package
                  version                version of the package
        </description>
        <expansion>
          remove_field_from_node_configuration_package
          %1
          %2
          %3
          packages.version=%4
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> set_node_configuration_package_field_value </command>
        <description>
          set_node_configuration_package_field_value sets the
          field value of an automatically created configuration that was
          associated with the specified node for a specified package.
          This assumes that there is only one version of the package.
          It will create a new single value for the field if needed.
          It will delete any extra values for field if there is
          already more than one field value there.
          Required and only parameters are:
                  node            name of the node
                  package                name of the package
                  field           name of the field being added (to)
                  value                value being added to the field
        </description>
        <expansion>
          remove_field_from_node_configuration_package
          %1
          %2
          %3
          ;
          add_node_configuration_package_field_value
          %1
          %2
          %3
          %4
        </expansion>
      </shortcut>

      <shortcut>
        <command> set_node_configuration_package_version_field_value </command>
        <description>
          set_node_configuration_package_version_field_value sets the
          field value of an automatically created configuration that was
          associated with the specified node for a specified package.
          It will create a new single value for the field if needed.
          It will delete any extra values for field if there is
          already more than one field value there.
          Required and only parameters are:
                  group           name of the node group
                  package                name of the package
                  version                version of the package
                  field           name of the field being added (to)
                  value                value being added to the field
        </description>
        <expansion>
          remove_field_from_node_configuration_package_version
          %1
          %2
          %3
          ;
          add_node_configuration_package_version_field_value
          %1
          %2
          %3
          %4
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= NODE_GROUPS table shortcuts				      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> create_node_group </command>
        <description>
          create_node_group creates a new node group record.
          This also creates an associated configuration of
          the same name. Required parameter is:
                  name          name of the node set
        </description>
        <expansion>
          create_configuration
          %1
          configurations.special~1
          ;
          insert_record
          node_groups
          node_groups.name~%1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_all_node_groups </command>
        <description>
          delete_all_node_groups deletes all node groups.
          The portions of this multiple commands shortcut do:
          Remove all records from node groups/included nodes table.
          Remove all records from node_groups names/ids table.
          Note that this will not delete any node groups that 
          are associated with a single node.
        </description>
        <expansion>
          delete_records
          node_groups_included_configurations
          node_group_id=node_group_id
          ;
          delete_records
          node_groups_included_node_groups
          child_node_group_id=child_node_group_id
          ;
          delete_records
          node_groups
          name=name
          node_groups.special=0
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_node_group </command>
        <description>
          delete_node_group deletes a single node group record.
          The portions of this multiple commands shortcut do:
          Remove all appropriate records from node groups/included nodes table.
          Remove the appropriate record from node_groups names/ids table.
          Note that this shortcut cannot delete a node group that is a
          single node associated group, to do that the node has to be
          deleted which will delete the associated node group.
        </description>
        <expansion>
          modify_records
          configurations
          configurations.name=%1
          configurations.name=node_groups.name
          node_groups.special=0
          configurations.special~0
          ;
          delete_configuration
          %1
          configurations.name=node_groups.name
          node_groups.special=0
          ;
          delete_records
          node_groups_included_configurations
          node_groups_included_configurations.node_group_id=node_groups.id
          node_groups.name=%1
          node_groups.special=0
          ;
          delete_records
          node_groups_included_node_groups
          node_groups_included_node_groups.parent_node_group_id=node_groups.id
          node_groups.name=%1
          node_groups.special=0
          ;
          delete_records
          node_groups
          node_groups.name=%1
          node_groups.special=0
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_group_id_to_name </command>
        <expansion>
          read_records
          node_groups
          id=%1
          name
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_group_name_to_id </command>
        <expansion>
          read_records
          node_groups
          name=%1
          id
        </expansion>
      </shortcut>

      <shortcut>
        <command> node_groups </command>
        <description>
          node_groups lists the names of all node group records.
          Adding further         parameters can also list specified node 
          group field values and/or can specify conditions to 
          match only certain nodes. No parameters are required.
        </description>
        <expansion>
          read_records
          node_groups
          node_groups.name
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_all_node_groups_from_all_node_groups </command>
        <expansion>
          delete_records
          node_groups_included_nodes
          child_node_group_id=child_node_group_id
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_all_node_groups_from_node_group </command>
        <expansion>
          delete_records
          node_groups_included_nodes
          node_groups.name=%1
          node_groups.id=node_groups_included_nodes.parent_node_group_id
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_node_group_from_all_node_groups </command>
        <expansion>
          delete_records
          node_groups_included_node_groups
          node_groups.name=%1
          node_groups_included_nodes.child_node_group_id=node_groups.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> rename_node_group </command>
        <expansion>
          modify_records
          node_groups
          node_groups.special=0
          name=%1
          name~%2
          ;
          modify_records
          configurations
          configurations.name=%1
          configurations.name~%2
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= NODE_GROUPS <> PACKAGE_CONFIGURATIOS shortcuts       	      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> create_node_group_package_configuration </command>
        <description>
          create_node_group_package_configuration creates,
          for a specified node group, a package configuration for
          a specified package (that only has one version),
          required parameters are:
                  group         name of the node group
                  package       name of the package
        </description>
        <expansion>
          insert_record
          package_configurations
          node_groups.name=%1
          packages.name=%2
          package_configurations.node_group_id~node_groups.id
          package_configurations.package_id~packages.id
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> create_node_group_package_version_configuration </command>
        <description>
          create_node_group_package_version_configuration creates,
          for a specified node group, a package configuration for
          a specified version of a specified package,
          required parameters are:
                  group         name of the node group
                  package       name of the package
                  version       version of the package
        </description>
        <expansion>
          insert_record
          package_configurations
          node_groups.name=%1
          packages.name=%2
          packages.version=%3
          package_configurations.node_group_id~node_groups.id
          package_configurations.package_id~packages.id
          %+
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= NODE_GROUPS <> PACKAGE_CONFIGURATION_VALUES shortcuts       =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> remove_all_package_configuration_fields_from_node_group </command>
        <description>
          remove_all_package_configurations_fields_from_node_group
          removes all package configuration field values associated
          with the specified node group, required parameters are:
                  group         name of the node group
        </description>
        <expansion>
          delete_records
          package_configuration_values
          node_groups.name=%1
          node_groups.id=package_configurations.node_group_id
          package_configurations.id=
          package_configuration_values.package_configuration_id
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_field_from_node_group_configuration_package </command>
        <description>
          remove_field_from_node_group_configuration_package removes a
          field and all of it's values from an automatically created
          configuration that was associated with the specified node group.
          This assumes that there is only version of the package.
          Required parameters are:
                  field           name of the field being removed
                  group           name of the node group
                  package                name of the package
        </description>
        <expansion>
          delete_records
          package_configuration_values
          package_configuration_values.field=%1
          package_configuration_values.package_configuration_id=
          package_configurations.id
          package_configurations.configuration_id=configurations.id
          node_groups.name=%2
          node_groups.name=configurations.name
          package_configurations.package_id=packages.id
          packages.name=%3
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_field_from_node_group_configuration_package_version </command>
        <description>
          remove_field_from_node_group_configuration_package_version removes
          a field and all of it's values from an automatically created
          configuration that was associated with the specified node group.
          Required and only parameters are:
                  field           name of the field being removed
                  group           name of the node group
                  package                name of the package
                  version                version of the package
        </description>
        <expansion>
          remove_field_from_node_group_configuration_package
          %1
          %2
          %3
          packages.version=%4
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> set_node_group_configuration_package_field_value </command>
        <description>
          set_node_group_configuration_package_field_value sets the
          field value of an automatically created configuration that was
          associated with the specified node group for a specified package.
          This assumes that there is only one version of the package.
          It will create a new single value for the field if needed.
          It will delete any extra values for field if there is
          already more than one field value there.
          Required and only parameters are:
                  group           name of the node group
                  package                name of the package
                  field           name of the field being added (to)
                  value                value being added to the field
        </description>
        <expansion>
          remove_field_from_node_group_configuration_package
          %1
          %2
          %3
          ;
          add_node_group_configuration_package_field_value
          %1
          %2
          %3
          %4
        </expansion>
      </shortcut>

      <shortcut>
        <command> set_node_group_configuration_package_version_field_value </command>
        <description>
          set_node_group_configuration_package_version_field_value sets the
          field value of an automatically created configuration that was
          associated with the specified node group for a specified package.
          It will create a new single value for the field if needed.
          It will delete any extra values for field if there is
          already more than one field value there.
          Required and only parameters are:
                  group           name of the node group
                  package                name of the package
                  version                version of the package
                  field           name of the field being added (to)
                  value                value being added to the field
        </description>
        <expansion>
          remove_field_from_node_group_configuration_package_version
          %1
          %2
          %3
          ;
          add_node_group_configuration_package_version_field_value
          %1
          %2
          %3
          %4
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= OSCAR global cluster information table shortcuts	      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> oscar_server_architecture </command>
        <expansion>
          read_records
          oscar
          oscar_server_architecture!=null
          oscar_server_architecture
        </expansion>
      </shortcut>

      <shortcut>
        <command> oscar_server_distribution </command>
        <expansion>
          read_records
          oscar
          oscar_server_distribution!=null
          oscar_server_distribution
        </expansion>
      </shortcut>

      <shortcut>
        <command> oscar_server_distribution_version </command>
        <expansion>
          read_records
          oscar
          oscar_server_distribution_version!=null
          oscar_server_distribution_version
        </expansion>
      </shortcut>

      <shortcut>
        <command> oscar_server_node </command>
        <expansion>
          read_records
          oscar.oscar_server_node_id!=null
          oscar.oscar_server_node_id=nodes.id
          nodes.name
        </expansion>
      </shortcut>

      <shortcut>
        <command> oscar_version </command>
        <expansion>
          read_records
          oscar.oscar_version!=null
          oscar.oscar_version
        </expansion>
      </shortcut>

      <shortcut>
        <command> selected_package_set </command>
        <expansion>
          read_records
          oscar.selected_package_set_id!=null
          oscar.selected_package_set_id=package_sets.id
          package_sets.name
        </expansion>
      </shortcut>

      <shortcut>
        <command> set_oscar_server_node </command>
        <expansion>
          modify_records
          nodes.name=%1
          oscar.oscar_server_node_id~nodes.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> set_selected_package_set </command>
        <expansion>
          modify_records
          package_sets.name=%1
          oscar.selected_package_set_id~package_sets.id
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= PACKAGE_CONFIGURATION_VALUES <> NODE_GROUPS shortcuts       =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> add_node_group_configuration_package_field_value </command>
        <description>
          add_node_group_configuration_package_field_value adds
          another package field value to the automatically created
          configuration that was associated with the specified node group. 
          This assumes that there is only one version of the package.
          Using this shortcut, each field is treated as a list of values.
          See the add_node_configuration_package_field_value shortcut
          if you want to add a field value to the automatically created
          configuration for a particular node. 
          Required and only parameters are:
                  group       name of the node group
                  package            name of the package
                  field       name of the field being added (to)
                  value            value being added to the field
        </description>
        <expansion>
          insert_record
          package_configuration_values
          node_groups.name=%1
          node_groups.name=configurations.name
          configurations.id=package_configurations.configuration_id
          packages.name=%2
          packages.id=package_configurations.package_id
          package_configurations.id=
          package_configuration_values.package_configuration_id
          package_configuration_values.field~%3
          package_configuration_values.value~%4
        </expansion>
      </shortcut>

      <shortcut>
        <command> add_node_group_configuration_package_version_field_value </command>
        <description>
          add_node_group_configuration_package_version_field_value adds
          another package field value to the automatically created
          configuration that was associated with the specified node group. 
          This assumes that there me be more than one version of the package.
          Using this shortcut, each field is treated as a list of values.
          See the add_node_configuration_package_version_field_value
          shortcut if you want to add a field value to the automatically
          created configuration for a particular node. 
          Required and only parameters are:
                  group       name of the node group
                  package            name of the package
                  version            version of the package
                  field       name of the field being added (to)
                  value            value being added to the field
        </description>
        <expansion>
          add_node_group_configuration_package_field_value
          %1
          %2
          %4
          %5
          packages.version=%3
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_node_group_package_configuration_field </command>
        <description>
          remove_node_group_package_configuration_field removes all 
          values for a node group package configuration field. 
          Required and only parameters are:
                  group         name of the node group
                  package              name of the package
                  field         name of the field being added (to)
        </description>
        <expansion>
          delete_records
          package_configuration_values
          node_groups.name=%1
          node_groups.name=configurations.name
          configurations.id=
          packages.name=%2
          package_configuration_values.node_group_id~node_groups.id
          package_configuration_values.package_id~packages.id
          package_configuration_values.field~%3
          package_configuration_values.value~%4

        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= PACKAGE_CONFIGURATIONS <> NODE_GROUPS shortcuts             =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> delete_node_group_package_configuration </command>
        <description>
          delete_node_group_package_configuration deletes,
          for a specified node group, the package configuration for
          a specified package (that only has one version),
          required parameters are:
                  group         name of the node group
                  package       name of the package
        </description>
        <expansion>
          remove_all_fields_from_node_group_package_configuration
          %1
          %2
          ;
          delete_records
          package_configurations
          node_groups.name=%1
          packages.name=%2
          package_configurations.node_group_id=node_groups.id
          package_configurations.package_id=packages.id
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_node_group_package_version_configuration </command>
        <description>
          delete_node_group_package_version_configuration deletes,
          for a specified node group, the package configuration for
          a specified version of a specified package,
          required parameters are:
                  group         name of the node group
                  package       name of the package
        </description>
        <expansion>
          remove_all_fields_from_node_group_package_version_configuration
          %1
          %2
          %3
          ;
          delete_records
          package_configurations
          node_groups.name=%1
          packages.name=%2
          packages.version=%3
          package_configurations.node_group_id=node_groups.id
          package_configurations.package_id=packages.id
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_all_package_configurations_from_node_group </command>
        <description>
          remove_all_package_configurations_from_node_group removes
          all package configurations associated with a specified
          node group. It also removes all all package configuration
          field values associated with the specified node group.
          Required parameters are:
                  group         name of the node group
        </description>
        <expansion>
          remove_all_package_configuration_fields_from_node_group
          %1
          ;
          delete_records
          package_configurations
          node_groups.name=%1
          package_configurations.node_group_id=node_groups.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_all_configurations_from_all_node_groups </command>
        <description>
          remove_all_configurations_from_all_node_groups removes
          all named configurations from all node groups.
          Note that this will not remove any configurations that have
          been automatically associated with a single node group.
        </description>
        <expansion>
          delete_records
          node_groups_included_configurations
          node_groups_included_configurations.configuration_id=configurations.id
          configurations.special=0
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_all_configurations_from_node_group </command>
        <description>
          remove_all_configurations_from_node_group removes
          all named configurations from a specified node group.
          Note that this will not remove the configuration that was
          automatically associated with that node group.
        </description>
        <expansion>
          delete_records
          node_groups_included_configurations
          node_groups_included_configurations.configuration_id=configurations.id
          configurations.special=0
          node_groups_included_configurations.node_group_id=node_groups.id
          node_groups.name=%1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> which_node_groups_have_configuration </command>
        <expansion>
          read_records
          configurations.name=%1
          configurations.id=node_groups_included_configurations.configuration_id
          node_groups_included_configurations.node_group_id=node_groups.id
          node_groups.name
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= PACKAGES table shortcuts				      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> conflicts_with_package </command>
        <expansion>
          read_records
          packages_conflicts
          package=%1
          name
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_package </command>
        <description>
          delete_package deletes a single package record.
          This assumes only one version of the package
          is in the database. Required parameters are:
                  name          name of the package(s)
          The portions of this multiple commands shortcut do:
          Remove the package from being included in any configurations,
          Remove the package from being included in any package sets,
          Remove the package from being included in any package filters,
          Remove all rpmlist records for the package,
          Remove the packages table record for the package.
        </description>
        <expansion>
          remove_package_from_all_configurations
          %1
          ;
          remove_package_from_all_package_sets
          %1
          ;
          remove_package_from_all_packages_filters
          %1
          ;
          remove_package_from_all_packages_rpmlists
          %1
          ;
          delete_records
          packages
          name=%1
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_package_version </command>
        <description>
          delete_package_version deletes a single package record.
          This will work when there are multiple versions of 
          the same packages in the database. Required parameters are:
                  name          name of the package
                  vesion        version of the package
          The portions of this multiple commands shortcut do:
          Remove the package from being included in any configurations,
          Remove the package from being included in any package sets,
          Remove the package from being included in any package filters,
          Remove all rpmlist records for the package,
          Remove the packages table record for the package.
        </description>
        <expansion>
          remove_package_version_from_all_configurations
          %1
          %2
          ;
          remove_package_version_from_all_package_sets
          %1
          %2
          ;
          remove_package_version_from_all_packages_filters
          %1
          %2
          ;
          remove_package_version_from_all_packages_rpmlists
          %1
          %2
          ;
          delete_records
          packages
          name=%1
          version=%2
        </expansion>
      </shortcut>

      <shortcut>
        <command> installable_package_directories </command>
        <expansion>
          read_records
          packages
          packages.installable!=0
          packages.directory
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_clear_installed </command>
        <expansion>
          modify_records
          packages
          packages.name=%1
          packages.installed~0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_clear_should_be_installed </command>
        <expansion>
          modify_records
          packages
          packages.name=%1
          packages.should_be_installed~0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_clear_should_be_uninstalled </command>
        <expansion>
          modify_records
          packages
          packages.name=%1
          packages.should_be_uninstalled~0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_id_to_name </command>
        <expansion>
          read_records
          packages
          id=%1
          name
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_id_to_name_version </command>
        <expansion>
          read_records
          packages
          id=%1
          name
          version
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_name_to_directory </command>
        <expansion>
          read_records
          packages
          name=%1
          directory
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_name_to_id </command>
        <expansion>
          read_records
          packages
          name=%1
          id
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_name_version_to_directory </command>
        <expansion>
          read_records
          packages
          name=%1
          version=%2
          directory
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_name_version_to_id </command>
        <expansion>
          read_records
          packages
          name=%1
          version=%2
          id
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_mark_installed </command>
        <expansion>
          modify_records
          packages
          packages.name=%1
          packages.installed~1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_mark_should_be_installed </command>
        <expansion>
          modify_records
          packages
          packages.name=%1
          packages.should_be_installed~1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_mark_should_be_uninstalled </command>
        <expansion>
          modify_records
          packages
          packages.name=%1
          packages.should_be_uninstalled~1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_version_clear_installed </command>
        <expansion>
          modify_records
          packages
          packages.name=%1
          packages.version=%2
          packages.installed~0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_version_clear_should_be_installed </command>
        <expansion>
          modify_records
          packages
          packages.name=%1
          packages.version=%2
          packages.should_be_installed~0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages </command>
        <description>
          packages lists all of the packages names.
        </description>
        <expansion>
          read_records
          packages
          packages.name
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_version_mark_installed </command>
        <expansion>
          modify_records
          packages
          packages.name=%1
          packages.version=%2
          packages.installed~1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_version_mark_should_be_installed </command>
        <expansion>
          modify_records
          packages
          packages.name=%1
          packages.version=%2
          packages.should_be_installed~1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_version_mark_should_be_uninstalled </command>
        <expansion>
          modify_records
          packages
          packages.name=%1
          packages.version=%2
          packages.should_be_uninstalled~1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_clear_all_installed </command>
        <expansion>
          modify_records
          package
          packages.installed~0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_clear_all_should_be_installed </command>
        <expansion>
          modify_records
          packages
          packages.should_be_installed~0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_clear_all_should_be_uninstalled </command>
        <expansion>
          modify_records
          packages
          packages.should_be_uninstalled~0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_conflicts_with_package </command>
        <expansion>
          read_records
          packages_conflicts
          package=%1
          type="package"
          name
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_installable </command>
        <expansion>
          packages
          packages.installable!=0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_installable_allowed </command>
        <description>
          packages_installable_allowed lists all of the packages that
	  are set to be installable and are allowed to be installed.
        </description>
        <expansion>
          packages
          packages.installable!=0
          packages.install_allowed!=0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_installed </command>
        <expansion>
          packages
          packages.installed!=0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_not_installed </command>
        <expansion>
          packages
          packages.installed=0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_provided_by_package </command>
        <expansion>
          provided_by_package
          %1
          packages_provides.type="package"
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_required_by_package </command>
        <expansion>
          required_by_package
          %1
          packages_requires.type="package"
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_that_conflict </command>
        <expansion>
          read_records
          packages_conflicts
          packages_conflicts.name=%1
          packages_conflicts.package
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_that_conflict_package </command>
        <expansion>
          packages_that_conflict
          %1
          packages_conflicts.type="package"
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_that_provide </command>
        <expansion>
          read_records
          packages_provides
          packages_provides.name=%1
          packages_provides.package
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_that_provide_package </command>
        <expansion>
          packages_that_provide
          %1
          packages_provides.type="package"
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_that_require </command>
        <expansion>
          read_records
          packages_requires
          packages_requires.name=%1
          packages_requires.package
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_that_require_package </command>
        <expansion>
          packages_that_require
          %1
          packages_requires.type="package"
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_that_should_be_installed </command>
        <expansion>
          packages
          packages.should_be_installed!=0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_that_should_be_uninstalled </command>
        <expansion>
          packages
          packages.should_be_uninstalled!=0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_uninstallable </command>
        <expansion>
          packages
          packages.installable=0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_versions </command>
        <description>
          packages_versions lists all of the packages names and versions.
        </description>
        <expansion>
          read_records
          packages.name
          packages.version
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_versions_installable </command>
        <description>
          packages_versions_installable lists all of the packages names
	  and versions that are set to be installable.
        </description>
        <expansion>
          packages_versions
          packages.installable!=0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_versions_installable_allowed </command>
        <description>
          packages_versions_installable_allowed lists all of the packages
	  names and versions that are set to be installable and are allowed 
	  to be installed.
        </description>
        <expansion>
          packages_versions_installable
          packages.install_allowed!=0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> provided_by_package </command>
        <expansion>
          read_records
          packages_provides
          packages_provides.package=%1
          packages_provides.name
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_package_from_all_packages_filters </command>
        <expansion>
          delete_records
          packages_filters
          packages.name=%1
          packages.id=packages_filters.package_id
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_package_from_all_packages_rpmlists </command>
        <expansion>
          delete_records
          packages_rpmlists
          packages.name=%1
          packages.id=packages_rpmlists.package_id
        </expansion>
      </shortcut>

      <shortcut>
        <command> required_by_package </command>
        <expansion>
          read_records
          packages_requires
          packages_requires.package=%1
          packages_requires.name
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> set_package_installable </command>
        <expansion>
          modify_records
          packages
          name=%1
          installable~1
        </expansion>
      </shortcut>

      <shortcut>
        <command> set_package_uninstallable </command>
        <expansion>
          modify_records
          packages
          name=%1
          installable~0
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= PACKAGE_SETS table shortcuts				      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> add_package_set_to_node </command>
        <description>
          add_package_set_to_node adds a software package set to a
          compute node record, required and only parameters are:
                  set           name of the package set to add to the node
                  node          name of the compute node record to add it to
        </description>
        <expansion>
          insert_record
          nodes_included_package_sets
          package_sets.name=%1
          nodes.name=%2
          nodes_included_package_sets.node_id~nodes.id
          nodes_included_package_sets.package_set_id~package_sets.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> add_package_to_package_set </command>
        <description>
          add_package_to_package_set adds a software package set to
          a package set record, required and only parameters are:
                  package       name of the package to add to the package set
                  set           name of the package set record to add it to
        </description>
        <expansion>
          insert_record
          package_sets_included_packages
          packages.name=%1
          package_sets.name=%2
          package_sets_included_packages.package_id~packages.id
          package_sets_included_packages.package_set_id~package_sets.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> create_package_set </command>
        <description>
          create_package_set creates a new software package set record,
          required parameters are:
                  name          name of the package set
        </description>
        <expansion>
          insert_record
          package_sets
          package_sets.name~%1
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_all_package_sets </command>
        <description>
          delete_all_package_sets deletes all software packages.
          The portions of this multiple commands shortcut do:
          Set no selected package set in the oscar table.
          Remove all records from package sets/included packages table.
          Remove all records from package sets/included package sets table.
          Remove all records from nodes/included package sets table.
          Remove all records from package_set names/ids table.
        </description>
        <expansion>
          modify_records
          oscar
          selected_package_set_id~0
          ;
          delete_records
          package_sets_included_packages
          package_set_id=package_set_id
          ;
          delete_records
          nodes_included_package_sets
          node_id=node_id
          ;
          delete_records
          package_sets
          name=name
        </expansion>
      </shortcut>

      <shortcut>
        <command> delete_package_set </command>
        <description>
          delete_package_set deletes a software package set record,
          required parameters are:
                  name          name of the package set
          The portions of this multiple commands shortcut do:
          Set no selected package set if the deleted package was selected,
          in the oscar table.
          Remove all records for the deleted package set from the package sets
          included packages table.
          Remove all records for the deleted package set from the nodes
          included package sets table.
          Remove all records for the deleted package set from the package_set 
          names/ids table.
        </description>
        <expansion>
          modify_records
          oscar
          oscar.selected_package_set_id=package_sets.id
          package_sets.name=%1
          oscar.selected_package_set_id~0
          ;
          remove_all_packages_from_package_set
          %1
          ;
          remove_package_set_from_all_nodes
          %1
          ;
          delete_records
          package_sets
          name=%1
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_set_id_to_name </command>
        <expansion>
          read_records
          package_sets
          id=%1
          name
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_set_name_to_id </command>
        <expansion>
          read_records
          package_sets
          name=%1
          id
        </expansion>
      </shortcut>

      <shortcut>
        <command> package_sets </command>
        <expansion>
          read_records
          package_sets.name
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_in_package_set </command>
        <expansion>
          read_records
          package_sets.name=%1
          package_sets.id=package_sets_included_packages.package_set_id
          package_sets_included_packages.package_id=packages.id
          packages.name
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_in_selected_package_set </command>
        <expansion>
          packages_in_package_set
          package_sets.name
          oscar.selected_package_set_id=package_sets.id
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> packages_installable_in_selected_package_set </command>
        <expansion>
          packages_in_selected_package_set
          packages.installable!=0
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_all_packages_from_package_set </command>
        <expansion>
          delete_records
          package_sets_included_packages
          package_sets.name=%1
          package_sets.id=package_sets_included_packages.package_set_id
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_package_from_all_package_sets </command>
        <expansion>
          delete_records
          package_sets_included_packages
          packages.name=%1
          packages.id=package_sets_included_packages.package_id
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_package_from_package_set </command>
        <expansion>
          delete_records
          package_sets_included_packages
          packages.name=%1
          package_sets.name=%2
          package_sets.id=package_sets_included_packages.package_set_id
          package_sets_included_packages.package_id=packages.id
          %+
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_package_set_from_all_nodes </command>
        <expansion>
          delete_records
          nodes_included_package_sets
          nodes_included_package_sets.package_set_id=package_sets.id
          package_sets.name=%1
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_package_set_from_node </command>
        <expansion>
          delete_records
          nodes_included_package_sets
          nodes_included_package_sets.package_set_id=package_sets.id
          package_sets.name=%1
          nodes.name=%2
          nodes_included_package_sets.node_id=nodes.id
        </expansion>
      </shortcut>

      <shortcut>
        <command> rename_package_set </command>
        <expansion>
          modify_records
          package_sets
          name=%1
          name~%2
        </expansion>
      </shortcut>

      <shortcut>
        <command> which_package_sets_have_package </command>
        <expansion>
          read_records
          packages.name=%1
          package_sets_included_packages.package_id=packages.id
          package_sets_included_packages.package_set_id=package_sets.id
          package_sets.name
        </expansion>
      </shortcut>

      <!--
      This defines the second field name for records in 
      the packages_rpmlist which can't be surmised from 
      the xml structure. If there were more than one 
      field name that needed to be specified for a 
      particular table, they would be specified all on 
      the same line.
      -->
      <fieldnames> packages_rpmlist scope </fieldnames>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-=							      =-=
      =-= PROGRAM_VARIABLES shortcuts                                 =-=
      =-=							      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> add_program_variable_value </command>
        <description>
          add_program_variable_value adds another value to a named
	  program variable.  Using this shortcut, each variable is 
	  treated as a list of values.
          Required parameters are:
                  program       name of the program
                  variable      name of the variable being added (to)
                  value         value being added to the variable
        </description>
        <expansion>
          insert_record
          program_variable_values
          program_variable_values.program~%1
          program_variable_values.variable~%2
          program_variable_values.value~%3
        </expansion>
      </shortcut>

      <shortcut>
        <command> program_variable_values </command>
        <description>
          program_variable_values lists all of the values of a named
	  program variable. Required and only parameters are:
                  program       name of the program
                  variable      name of the variable being removed
        </description>
        <expansion>
          read_records
          program_variable_values
          program_variable_values.program=%1
          program_variable_values.variable=%2
          program_variable_values.value
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_program_variable </command>
        <description>
          remove_program_variable removes a variable and all of it's
	  values from a named program. Required and only parameters are:
                  program       name of the program
                  variable      name of the variable being removed
        </description>
        <expansion>
          delete_records
          program_variable_values
          program_variable_values.program=%1
          program_variable_values.variable=%2
        </expansion>
      </shortcut>

      <shortcut>
        <command> remove_program_variables </command>
        <description>
          remove_program_variables removes all of the variables
	  from a named program. Required and only parameters are:
                  program       name of the program
        </description>
        <expansion>
          delete_records
          program_variable_values
          program_variable_values.program=%1
        </expansion>
      </shortcut>

      <shortcut>
        <command> set_program_variable_value </command>
        <description>
          set_program_variable_value sets the value of a named 
	  program variable. It will create a new single value 
	  for the variable if needed. It will delete any extra 
	  values for variable if there is already more than one 
	  variable value there. Required and only parameters are:
                  program       name of the program
                  variable      name of the variable being added (to)
                  value         value being added to the variable
        </description>
        <expansion>
          remove_program_variable
          %1
          %2
          ;
          add_program_variable_value
          %1
          %2
          %3
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= SHORTCUT shortcuts for shortcut information		      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <shortcut>
        <command> shortcut_description </command>
        <description>
          shortcut_description lists the description for a given shortcut
        </description>
        <expansion>
          read_records
          oda_shortcuts
          command=%1
          description
        </expansion>
      </shortcut>

      <shortcut>
        <command> shortcut_expansion </command>
        <description>
          shortcut_expansion lists the expansion for a given shortcut
        </description>
        <expansion>
          read_records
          oda_shortcuts
          command=%1
          expansion
        </expansion>
      </shortcut>

      <shortcut>
        <command> shortcuts </command>
        <description>
          shortcuts lists all of the shortcuts
        </description>
        <expansion>
          read_records
          oda_shortcuts
          command
          %+
        </expansion>
      </shortcut>

      <!--
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      =-= SWITCHER shortcuts for package provides/requires	      =-=
      =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       -->

      <!--
      These definitions allow easier access to switcher information
  
      To list all the packages that provide a switched thing:
      oda switcher_packages_that_provide switchable_thing_name
  
      To list all the switchable things that a single package provides:
      oda switcher_this_package_provides package_name

      To list all the switchable information with these three
      fields per line: package_name switchable_tag switchable_name
      oda switcher_list_packages_tags_names
      -->

      <shortcut> switcher_packages_that_provide read_records package_switcher.package package_switcher.tag=%1 </shortcut>
      <shortcut> switcher_this_package_provides read_records package_switcher.tag package_switcher.package=%1 </shortcut>
      <shortcut> switcher_list_packages_tags_names read_records package_switcher package_switcher.package package_switcher.tag package_switcher.name </shortcut>

    </oda>

  </package>        

  <!--
  ==================================================
  ==================================================
  ==                                              ==
  ==    definitions of global database tables     ==
  ==                                              ==
  ==================================================
  ==================================================
   -->

  <database_tables>

    <cluster_partitions>
      <fields> 
        <id> 
          <type> integer </type>
          <parameters> auto_increment not null unique primary key </parameters>
        </id>
        <name>
          <parameters> not null unique </parameters>
        </name>
      </fields>
    </cluster_partitions>

    <configurations>
      <fields> 
        <id> 
          <type> integer </type>
          <parameters> auto_increment not null unique primary key </parameters>
        </id>
        <name>
          <parameters> not null unique </parameters>
        </name>
        <special>
          <type> integer </type>
          <default> 0 </default>
        </special>
      </fields>
    </configurations>

    <disk_layouts>
      <fields> 
        <id> 
          <type> integer </type>
          <parameters> auto_increment not null unique primary key </parameters>
        </id>
        <name>
          <parameters> not null unique </parameters>
        </name>
        <units> 
          <default> mb </default>
        </units>
      </fields>
    </disk_layouts>

    <disk_partitions>
      <fields> 
        <active/>
        <bootable/>
        <disk_layout_id>
          <type> integer </type>
        </disk_layout_id>
        <mount_point/>
        <offset>
          <type> integer </type>
        </offset>
        <partition/>
        <size>
          <type> integer </type>
        </size>
        <type/>
      </fields>
    </disk_partitions>

    <images>
      <fields> 
        <id> 
          <type> integer </type>
          <parameters> auto_increment not null unique primary key </parameters>
        </id>
        <name>
          <parameters> not null unique </parameters>
        </name>
        <path/>
      </fields> 
    </images>

    <networks>
      <parameters> unique(base_ip,netmask) </parameters>
      <fields> 
        <base_ip>
	  <type> varchar(24) </type>
          <default> 127.0.0.1 </default>
        </base_ip>
        <broadcast/>
        <cluster_nodes> 
          <type> integer </type>
          <default> 0 </default>
        </cluster_nodes>
        <cluster_only> 
          <type> integer </type>
          <default> 0 </default>
        </cluster_only>
        <gateway/>
	<high_ip/>
        <id> 
          <type> integer </type>
          <parameters> auto_increment not null unique primary key </parameters>
        </id>
        <name>
          <parameters> not null unique </parameters>
        </name>
        <netmask>
	  <type> varchar(24) </type>
          <default> 255.255.255.0 </default>
        </netmask>
        <rfc1918>
          <type> integer </type>
          <default> 0 </default>
        </rfc1918>
      </fields> 
    </networks>

    <nics>
      <parameters> unique(name,node_id) </parameters>
      <fields> 
        <assignment_method/>
        <base_ip/>
        <broadcast/>
        <driver_module/>
        <gateway/>
	<high_ip/>
        <id> 
          <type> integer </type>
          <parameters> auto_increment not null unique primary key </parameters>
        </id>
        <name/>
        <ip/>
        <mac/>
        <netmask/>
        <network_id>
          <type> integer </type>
        </network_id>
        <node_id>
          <type> integer </type>
        </node_id>
        <rfc1918/>
      </fields> 
    </nics>

    <node_groups>
      <fields> 
        <id> 
          <type> integer </type>
          <parameters> auto_increment not null unique primary key </parameters>
        </id>
        <name>
          <parameters> not null unique </parameters>
        </name>
        <special>
          <type> integer </type>
          <default> 0 </default>
        </special>
      </fields>
    </node_groups>

    <node_groups_included_configurations>
      <parameters> unique(node_group_id,configuration_id) </parameters>
      <fields> 
        <configuration_id>
          <type> integer </type>
        </configuration_id>
        <node_group_id>
          <type> integer </type>
        </node_group_id>
      </fields>
    </node_groups_included_configurations>

    <node_groups_included_node_groups>
      <parameters> unique(child_node_group_id,parent_node_group_id) </parameters>
      <fields> 
        <child_node_group_id>
          <type> integer </type>
        </child_node_group_id>
        <parent_node_group_id>
          <type> integer </type>
        </parent_node_group_id>
      </fields>
    </node_groups_included_node_groups>

    <nodes>
      <fields> 
        <cluster_partition_id> 
          <type> integer </type>
        </cluster_partition_id>
        <cpu_num> 
          <type> integer </type>
        </cpu_num>
        <cpu_speed> 
          <type> integer </type>
        </cpu_speed>
        <cpu_type/>
        <default_gateway/>
        <dns_domain/>
        <fqdn>
          <parameters> unique </parameters>
        </fqdn>
        <gateway/>
        <hostname>
          <parameters> unique </parameters>
        </hostname>
        <id> 
          <type> integer </type>
          <parameters> auto_increment not null unique primary key </parameters>
        </id>
        <image_id>
          <type> integer </type>
        </image_id>
        <installer/>
        <name>
          <parameters> not null unique </parameters>
        </name>
        <domain/>
        <ram> 
          <type> integer </type>
        </ram>
        <swap> 
          <type> integer </type>
        </swap>
        <units> 
          <default> mb </default>
        </units>
      </fields>
    </nodes>

    <nodes_included_dns_servers>
      <parameters> unique(node_id,server) </parameters>
      <fields> 
        <node_id>
          <type> integer </type>
        </node_id>
        <server/>
      </fields>
    </nodes_included_dns_servers>

    <nodes_included_package_sets>
      <parameters> unique(node_id,package_set_id) </parameters>
      <fields> 
        <package_set_id>
          <type> integer </type>
        </package_set_id>
        <node_id>
          <type> integer </type>
        </node_id>
      </fields>
    </nodes_included_package_sets>

    <oda_shortcuts>
      <fields> 
        <command>
          <parameters> not null unique primary key </parameters>
        </command>
        <description>
          <type> text </type>
        </description>
        <expansion>
          <type> text </type>
          <parameters> not null </parameters>
        </expansion>
        <package_id>
          <type> integer </type>
        </package_id>
      </fields>
    </oda_shortcuts>

    <oscar>
      <fields> 
        <installation_date/>
        <interface/>
        <oscar_server_architecture/>
        <oscar_server_distribution/>
        <oscar_server_distribution_version/>
        <oscar_server_node_id>
          <type> integer </type>
        </oscar_server_node_id>
        <oscar_version/>
        <selected_package_set_id>
          <type> integer </type>
        </selected_package_set_id>
      </fields>
    </oscar>

    <package_configurations>
      <parameters> unique(configuration_id,package_id) </parameters>
      <fields> 
        <configuration_id>
          <type> integer </type>
        </configuration_id>
        <id> 
          <type> integer </type>
          <parameters> auto_increment not null unique primary key </parameters>
        </id>
        <install>
          <type> integer </type>
          <default> 1 </default>
        </install>
        <package_id>
          <type> integer </type>
        </package_id>
      </fields>
    </package_configurations>

    <package_configuration_values>
      <fields> 
        <field/>
        <package_configuration_id>
          <type> integer </type>
          <parameters> auto_increment not null unique primary key </parameters>
        </package_configuration_id>
        <value/>
      </fields>
    </package_configuration_values>

    <package_sets>
      <fields> 
        <id> 
          <type> integer </type>
          <parameters> auto_increment not null unique primary key </parameters>
        </id>
        <name>
          <parameters> not null unique </parameters>
        </name>
      </fields>
    </package_sets>

    <package_sets_included_packages>
      <parameters> unique(package_id,package_set_id) </parameters>
      <fields> 
        <package_id>
          <type> integer </type>
        </package_id>
        <package_set_id>
          <type> integer </type>
        </package_set_id>
      </fields>
    </package_sets_included_packages>

    <!--
    Note that fields in the packages table will also
    be defined by the combination of all the fields 
    found in all of the config.xml files for each package.
    The selected field and another fields that are not
    found in the package config.xml files has to be
    defined here. All the fields are defined here anyway
    to ensure the types of fields and other things such
    as default values and whether fields are required to
    have a value.
    -->
    <packages>
      <fields>
        <class/>
        <copyright/>
        <description>
          <type> text </type>
        </description>
        <directory/>
        <group/>
        <id> 
          <type> integer </type>
          <parameters> auto_increment not null unique primary key </parameters>
        </id>
        <install_allowed> 
          <type> integer </type>
          <default> 1 </default>
        </install_allowed>
        <installed> 
          <type> integer </type>
          <default> 0 </default>
        </installed>
        <installable/>
        <license/>
        <maintainer_email/>
        <maintainer_name/>
        <name>
          <type> varchar(100) </type>
          <parameters> not null </parameters>
        </name>
        <package/>
        <packager_email/>
        <packager_name/>
        <should_be_installed> 
          <type> integer </type>
          <default> 0 </default>
        </should_be_installed>
        <should_be_uninstalled> 
          <type> integer </type>
          <default> 0 </default>
        </should_be_uninstalled>
        <summary/>
        <url/>
        <vendor/>
        <version>
          <type> varchar(250) </type>
          <parameters> not null </parameters>
        </version>
        <version_epoch/>
        <version_major> 
          <type> integer </type>
        </version_major>
        <version_minor> 
          <type> integer </type>
        </version_minor>
        <version_release/>
        <version_subversion/>
      </fields>
    </packages>

    <packages_conflicts>
      <fields> 
        <package/>
        <type/>
        <name/>
      </fields>
    </packages_conflicts>

    <packages_filters>
      <fields>
        <architecture/>
        <distribution/>
        <distribution_version/>
        <package_id>
          <type> integer </type>
        </package_id>
      </fields>
    </packages_filters>

    <packages_provides>
      <fields> 
        <package/>
        <type/>
        <name/>
      </fields>
    </packages_provides>

    <packages_requires>
      <fields> 
        <package/>
        <type/>
        <name/>
      </fields>
    </packages_requires>

    <packages_rpmlists>
      <fields>
        <architecture/>
        <distribution/>
        <distribution_version/>
        <group/>
        <package_id>
          <type> integer </type>
        </package_id>
        <rpm/>        
      </fields>
    </packages_rpmlists>

    <packages_servicelists>
      <fields>
        <group/>
        <package_id>
          <type> integer </type>
        </package_id>
        <service/>
      </fields>
    </packages_servicelists>

    <program_variable_values>
      <fields> 
        <program/>
        <variable/>
        <value/>
      </fields>
    </program_variable_values>

  
  <!--
  ==================================================
  ==================================================
  ==                                              ==
  ==                NEST tables                   ==
  ==                                              ==
  ==================================================
  ==================================================
   -->
    
    <node_config_revs>
      <parameters> unique(node_id,configurations_id) </parameters>
      <fields> 
        <node_id>
          <type> integer </type>
        </node_id>
        <configurations_id>
          <type> integer </type>
        </configurations_id>
        <version>
          <type> integer </type>
          <default> 0 </default>
        </version>
      </fields>
    </node_config_revs>

    <config_opkgs>
      <parameters> unique(configurations_id,package_id) </parameters>
      <fields> 
        <configurations_id>
          <type> integer </type>
        </configurations_id>
        <package_id>
          <type> integer </type>
        </package_id>
      </fields>
    </config_opkgs>



  </database_tables>
</oscar>
