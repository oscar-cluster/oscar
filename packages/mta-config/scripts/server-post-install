#!/usr/bin/perl
#
# Copyright (c) 2013 CEA Commissariat A l'Energie Atomique
#                    All rights reserved.
#
# Previous deprecated version written in bash is
# Copyright (c) 2004 The Trustees of Indiana University.  
#                    All rights reserved.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This scripts configure the mail transfer agent on the head node
# for the following purpose:
#
# 1. Allow all nodes in the oscar cluster to access to the oscar-server
# so that the oscar-server can receive the mail in the same domain.
#
# 2. Make all mail from the client nodes have a "From" address that
# looks like it originated from the head node.  This is necessary for
# OSCAR clusters that are private and may have non-public IP names and
# addresses -- some mail servers will reject mail if they have a
# "From" address that is not DNS-resolvable.  Hence, we allow it to
# have a "From" address the same as the OSCAR head node's public IP
# address, which hopefully will be DNS resolvable.  Specifically, mail
# servers receiving mail from the OSCAR server will accept it because
# it can DNS resolve the OSCAR server (etc.).
#
# Supported mta: postfix (exim and sendmail planed).

#
# $Id$
#

use Carp;
use OSCAR::Opkg;
use OSCAR::FileUtils;
use OSCAR::SystemServices;
use OSCAR::SystemServicesDefs;
use OSCAR::OCA::OS_Detect;
use OSCAR::OCA::OS_Settings;
use OSCAR::Database;
use OSCAR::Configurator_backend;
use feature "switch";
# Avoid smartmatch warnings when using given
no if $] >= 5.017011, warnings => 'experimental::smartmatch';

my $configurator = "$ENV{OSCAR_PACKAGE_HOME}/configurator.html";

# User has configured mta package.
my $mta_service;

if (-e $configurator) {
    my $ref = OSCAR::Configurator_backend::readInConfigValues($configurator,
        "mtaconfig", "", noarray=>1);
    $mta_service = $ref->{mta};
}

#
# Configure a mailing service for localhost only in the server file system
#

# Check that chosen mta is installed. if not, then install it.
my $mta_package = OSCAR::OCA::OS_Settings::getitem($mta_service."_package");
!system("/usr/bin/packman install $mta_package")
            or (carp "ERROR: Couldn't install $mta_package package (provides a mail transfert agent).\n", return 0);
#
# FIXME: OL: Should we use the install_mta (install_postfix) script instead. or maybe yume?
#

given ($mta_service) {
    when (/postfix/) {
        # FIXME: check that /etc/postfix/main.cf /etc/main.cf /usr/lib/postfix/main.cf
        #        is correctly setup in OS_Settings/*
        my $config_file = OSCAR::OCA::OS_Settings::getitem(POSTFIX()."_configfile");
        if (not -e $config_file) {
            carp("ERROR: Cound not find $config_file. Postfix configuration aborted!\n there will be no mailservices for client nodes");
            exit(-1);
        }
        # First, comment out 'mynetworks_style = ' part.
        # If the inet_interfaces = all, then leave that option.
        # If the inet_interfaces has already a different option,
        # then add the oscar option (oscar-server) behind it.
        # If there is no option for inet_interfaces,
        # uncomment out the "#inet_interfaces = all" and replace the 'all' option
        # with the oscar option (oscar-server). 
        # And then save it to the new file (which is main.cf.server.$$).
        # And then append 'masquerade_domains = headnode.domain' at the end of 
        # the main.cf.server.$$ if it is not configured yet. 
        # Copy the main.cf.server.$$ to the configuration file (main.cf) to update
        # the original configuration.

        # 1st, create a backup of the config file if not already done.
        backup_file_if_not_exist($config_file) or return -1;

        # Comment out 'mynetworks = ' part.
        # If the inet_interfaces = all, then leave that option.
        # If the inet_interfaces alreay has the oscar-server, leave it untouched.
        # If the inet_interfaces has a different option,
        # then add the oscar option (oscar-server) behind it
 
        open(IN,"<$config_file.oscarbak") or (carp "Couldn't open $config_file.oscarbak for reading!",
                                 and return undef); # FIXME: check what to return.
        open(OUT,">$config_file") or (carp "Couldn't open $config_file for writing!",
                                 and return undef); # FIXME: check what to return.
        my $inet_interface_is_set=0;
        my $masquerade_domains_is_set=0;
        my $oscar_comment_present=0;
        while(my $line = <IN>) {
            chomp($line);
            if ($line =~ /^[ \t]*mynetworks[ \t]*=/) {
                # Comment out 'mynetworks = ' part.
                print OUT "# $line\n";
            } elsif($line =~/^[ \t]*masquerade_domains[ \t]*=[ \t]*/) {
                # Check if masquerade_domains is set
                $masquerade_domains_is_set=1;
                print OUT "$line\n";
            } elsif($line =~/^# ADDED CONFIGURATION OPTIONS FOR OSCAR/) {
                # Check if configuration file has already been modified by oscar.
                $oscar_comment_present=1;
                print OUT "$line\n";
            } elsif ($line =~/^[ \t]*inet_interfaces[ \t]*=[ \t]*all/) {
                # If the inet_interfaces = all, then leave that option.
                print OUT "$line\n";
                $inet_interface_is_set=1;
            } elsif ($line =~/^[ \t]*inet_interfaces[ \t]*=[ \t]*.*oscar-server.*/) {
                # If the inet_interfaces contains oscar-server: it is already added: nothing to do.
                print OUT "$line\n";
                $inet_interface_is_set=1;
            } elsif ($line =~/^[ \t]*inet_interfaces[ \t]*=[ \t]*.*/) {
                # inet_interfaces is not set to all, nor it contains oscar-server. We need to add it.
                print OUT "$line, oscar-server\n";
                $inet_interface_is_set=1;
            } elsif ($line =~/^[ \t]*inet_protocols[ \t]*=[ \t]*.*/) {
                # inet_protocols imust be set to ipv4 as we have disabled ipv6.
                print OUT "inet_protocols = ipv4\n";
                $inet_interface_is_set=1;
            } else {
                # It's another line, just report it.
                print OUT "$line\n";
            }
        }

        if ($inet_interface_is_set == 0) {
            print OUT "inet_interfaces = oscar-server\n";
        }

        if ($oscar_comment_present == 0) {
            print OUT <<INLINE_TEXT;

#
# ADDED CONFIGURATION OPTIONS FOR OSCAR
#

# The configuration options below were added specifically for OSCAR
# for the following purpose:
#
# 1. Allow all nodes in the oscar cluster to access to the oscar-server
# so that the oscar-server can receive the mail in the same domain.
#
# 2. Make all mail from the client nodes have a "From" address that
# looks like it originated from the head node.  This is necessary for
# OSCAR clusters that are private and may have non-public IP names and
# addresses -- some mail servers will reject mail if they have a
# "From" address that is not DNS-resolvable.  Hence, we allow it to
# have a "From" address the same as the OSCAR head node's public IP
# address, which hopefully will be DNS resolvable.  Specifically, mail
# servers receiving mail from the OSCAR server will accept it because
# it can DNS resolve the OSCAR server (etc.).

INLINE_TEXT
        }

        if ($masquerade_domains_is_set == 0) {
            my $dnsdomainname=`hostname -d`;
            chomp($dnsdomainname);
            printf OUT <<INLINE_TEXT;
# Strips any.thing.$dnsdomainname to $dnsdomainname in the domain part of email address.
masquerade_domains = $dnsdomainname

INLINE_TEXT
        }
        close(OUT);
        close(IN);
        print "[INFO] Postfix is succesfully configured. : SERVER NODE\n";

        # Restart the postfix service
       !system_service(POSTFIX(),RESTART())
        or (carp "ERROR: Couldn't restart postfix service.", exit(-1));

        # Enable the postfix service
        !enable_system_services( (POSTFIX()) )
            or (carp "ERROR: Couldn't enable postfix service.", exit(-1));
    }
    when (/exim/) {
        my $config_file = OSCAR::OCA::OS_Settings::getitem(EXIM()."_configfile");
        # exim not yet supported
        carp "[ERROR] Exim not yet supported";
        exit(-1);
    }
    when (/sendmail/) {
        my $config_file = OSCAR::OCA::OS_Settings::getitem(SENDMAIL()."_configfile");
        # sendmail not yet supported
        carp "[ERROR] sendmail not yet supported";
        exit(-1);
    }
    default {
        # Unknown mailing service. configurator.html not in sync with this script.
        carp "[ERROR] ($mta_service) not supported";
        exit(-1);
    }
}

# Succeffully configured mta.
print "[INFO] mta-config: successfully configured Mail Transfert Agent on the server\n";

exit 0;
