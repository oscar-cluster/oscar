#!/usr/bin/perl -w

#
# Copyright (c) 2004-2007 The Trustees of Indiana University.  
#                    All rights reserved.
# 
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# $Id$
#

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use OSCAR::Utils;
use OSCAR::Logger;
use OSCAR::LoggerDefs;
use OSCAR::Database;
use OSCAR::FileUtils;
use OSCAR::OCA::OS_Settings;
use OSCAR::SystemServices;
use OSCAR::SystemServicesDefs;
use File::Copy;

my %options = ('debug' => 0,
               'verbose' => 0);
my @error_strings = ();

#
# Configure the list of all nodes for *mynetworks* in the server file system
#

# Check if postfix, sendmail, or exim rpm is installed
# If any one of them is installed, return the package name
# and then the configuration file corresponding to the package name is configured
# for only localhost.
# Otherwise, it throws an error.

# The list of the mailing service rpms
my @services = (POSTFIX, SENDMAIL, EXIM);
my $service_name = "";
foreach my $service (@services){

    # See if this is supposed to run when computer boots up.
    if (defined(system_service_status($service))) {
        # If any above rpm is running,
        # assign the name of the rpm found to the variable $service_name
        # and then break out the 'for' loop 
        $service_name = $service;
        last;
    }    
}

	# If $service_name contains the "postfix, sendmail, or exim",
    # each case handles the configuration corresponding to
	# the installed rpm for the localhost only.
    # Otherwise, the error will be thrown.

if($service_name eq POSTFIX){
    oscar_log(1, INFO, "POSTFIX is available.");
        # The list of configuration files possible for the Postfix
        # in the current linux distro. 
    my @configure_files = ("/etc/postfix/main.cf", "/etc/main.cf",
                           "/usr/lib/postfix/main.cf");
    my $found = 0;

    my $postfix_conf;
    foreach my $file (@configure_files){
        if ( !$found && -e $file ){
            oscar_system("grep postfix $file > /dev/null  2>&1");
            if (! $? ){
                $postfix_conf = $file;
                $found = 1;
                last;
            }
        }
    }

    if( $found ){
        # Make a backup copy of the postfix config file before editing it.
        backup_file_if_not_exist($postfix_conf) or oscar_log(5, ERROR, "Can't make a backup copy of $postfix_conf");
        
        my $line_num = `cat $postfix_conf | wc -l`;
        my $added_line = 8;

        # If the $postfix_conf is already configured with the mta-config 
        # configuration, then remove the current configuration (8 lines)
        # and then append the new configuration (8 lines).
        # If not, just append the new configuration (8 lines).
        chomp($line_num);
        system("grep \"\# END OF ADDED CONFIGURATION OPTIONS FOR OSCAR\" $postfix_conf > /dev/null 2>&1");
        if(! $?){
            $line_num = $line_num - $added_line;
        }
        $line_num .= "q";
        oscar_system("sed $line_num $postfix_conf > main.cf.server.$$");
        my @nodes = (); my $nodelist;
        OSCAR::Database::get_nodes(\@nodes, \%options,\@error_strings)
            or (oscar_log(5, ERROR, "Can't get node list from database; aborting postfix mynetworks config"), exit -1);
        for (my $i=0; $i<@nodes; $i++) {$nodes[$i] = $nodes[$i]{hostname};}
        $nodelist = join ", ", @nodes;
        open CONF, ">> main.cf.server.$$"
            or (oscar_log(5, ERROR, "Can not open the config file: main.cf.server.$$ $!"), exit -1);
        
        print CONF "\n";
        print CONF "# Allow the mail to access to only the following list of nodes by setting the 'mynetworks'\n";
        print CONF "mynetworks = $nodelist\n";
        print CONF "\n";
        print CONF "# Please DO NOT add any configuration below this line\n";
        print CONF "# END OF ADDED CONFIGURATION OPTIONS FOR OSCAR\n";
        print CONF "#\n";
        print CONF "\n";

        close CONF;

        copy "main.cf.server.$$", "$postfix_conf";
        
        unlink "main.cf.server.$$";
        oscar_log(5, INFO, "Postfix is succesfully configured. : SERVER NODE");
        
        # Restart the postfix service
        !system_service(POSTFIX(),RESTART())
            or (oscar_log(5, ERROR,"Couldn't restart postfix service."), exit -1);

        oscar_log(5, INFO, "- finished configuring postfix");
    }else{
        oscar_log(5, WARNING, "I could not find postfix's configuration file!");
        oscar_log(5, WARNING, "There will be no mail service running on the client nodes!");
    }
}

if($service_name eq SENDMAIL){
    oscar_log(5, WARNING, "OSCAR does not know how to configure sendmail yet.");
    oscar_log(5, WARNING, "Please bug the OSCAR developers to finish the mta-config package!");
    oscar_log(5, WARNING, "There will be no mail service running on the client nodes!");
}    

if($service_name eq EXIM){
    oscar_log(5, WARNING, "OSCAR does not know how to configure exim yet.");
    oscar_log(5, WARNING, "Please bug the OSCAR developers to finish the mta-config package!");
    oscar_log(5, WARNING, "There will be no mail service running on the client nodes!");
}

if(!$service_name){
    oscar_log(5, WARNING, "************************************ WARNING ************************************");
    oscar_log(5, WARNING, "OSCAR could not set up the configuration for any mailing service on the server.");
    oscar_log(5, WARNING, "The current version of the mta-config package in OSCAR only supports the Postfix mail transfer agent (MTA).");
    oscar_log(5, WARNING, "It looks like you have another MTA installed (e.g, sendmail or exim); as such,");
    oscar_log(5, WARNING, "please be aware that OSCAR will not automatically configure it.");
    oscar_log(5, WARNING, "************************************ WARNING ************************************");
}

exit 0;
