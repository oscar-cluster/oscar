#!/usr/bin/perl

#
# Copyright (c) OSCAR developers.
# Copyright (c) 2009 Oak Ridge National Laboratory.
#                    Geoffroy R. Vallee <valleegr@ornl.gov>
#                    All rights reserved.
#
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#


BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use Carp;
use File::Copy;
use File::Path;

#use DBI;
#use DBD::Pg;

use OSCAR::Configbox;
use OSCAR::Configurator_backend;
use OSCAR::Database;
use OSCAR::Distro;
use OSCAR::Opkg;
use OSCAR::OCA::OS_Detect;
use OSCAR::OCA::OS_Settings;;
use OSCAR::Utils;
use OSCAR::FileUtils;
use OSCAR::SystemServices;
use OSCAR::SystemServicesDefs;


our ($distro, $pgdata, $pgbin);


sub get_config {
    my $conf;
    my $config_data = "$ENV{OSCAR_PACKAGE_HOME}/configurator.html";

    if (-e $config_data) {
    my $ref = OSCAR::Configurator_backend::readInConfigValues($config_data,
        "jobmonarch",
        "",noarray=>1);
    $conf->{'clustername'} = $ref->{clustername};
    $conf->{'drm'} = $ref->{drm};
    $conf->{'archived'} = $ref->{archived};
    }

    $conf->{'http_user'}     = http_info();

    if ( -d "/usr/share/ganglia-webfrontend" ) {
        $conf->{'gangliawww'}    = "/usr/share/ganglia-webfrontend";
    } elsif ( -d "/usr/share/ganglia-web" ) {
        $conf->{'gangliawww'}    = "/usr/share/ganglia-web";
    } elsif ( -d "/usr/share/ganglia" ) {
        $conf->{'gangliawww'}    = "/usr/share/ganglia";
    } elsif ( -d "/var/www/html/ganglia" ) {
        $conf->{'gangliawww'}    = "/var/www/html/ganglia";
    } else {
        $conf->{'gangliawww'}    = "/opt/ganglia";
    }

    if ( -d "/etc/ganglia-webfrontend" ) {
        $conf->{'ganglia_conf'}  = "/etc/ganglia-webfrontend/conf.php";
    } elsif ( -d "/etc/ganglia-web" ) {
        $conf->{'ganglia_conf'}  = "/etc/ganglia-web/conf.php";
    } elsif ( -d "/etc/ganglia/conf.php" ) {
        $conf->{'ganglia_conf'}  = "/etc/ganglia/conf.php";
    } else {
        $conf->{'ganglia_conf'}  = $conf->{'gangliawww'}."/conf.php";
    }

    $conf->{'monarchrrd'}    = "/data/jobarch/rrds";
    $conf->{'jobarchive_db'} = "jobarchive";

    return $conf;
}

# Return: the http user id (string) or undef if error.
sub http_info () {
    my $http_uid_conf;
    my $http_user;

    my $os = OSCAR::OCA::OS_Detect::open ("/");
    if (!defined $os) {
        carp "ERROR: Impossible to detect the local distro.\n".
             "Is your system supported by OSCAR?\n";
        return undef;
    }
    my $distro = $os->{compat_distro};
    if (!OSCAR::Utils::is_a_valid_string ($distro)) {
        carp "ERROR: Impossible to detect the compat distro";
        return undef;
    }

    if($distro eq "sles" || $distro eq "suse") {
        $http_uid_conf = "/etc/apache2/uid.conf";
    } elsif($distro eq "rhel" || $distro eq "fc") {
        $http_uid_conf = "/etc/httpd/conf/httpd.conf";
    }

    $http_user = `egrep "^User " $http_uid_conf`;
    chomp($http_user);

    $http_user = (split(/\s+/,$http_user))[1];

    print "Http user: $http_user\n";

    return $http_user;
}


sub create_dbase_entries {

    my ($conf) = @_;
    my $http_user = $conf->{'http_user'};
    my $jobarchive_db = $conf->{'jobarchive_db'};
    my $db_passwd = "";

    # Get the database password from /etc/jobarchived.conf (generated from package post install)
    $db_passwd = `egrep "^JOB_SQL_PASSWORD" /etc/jobarchived.conf`;
    chomp($db_passwd);
    $db_passwd = (split(/: /,$db_passwd))[1];
    print "jobarchive db password: ".$db_passwd."\n";

    my $test_jobarchive_db;
    my $test_jobarchive_user;
    $test_jobarchive_db=`su - postgres -c "echo 'SELECT datname FROM pg_database' |psql -t|grep jobarchive"`;
    $test_jobarchive_user=`su - postgres -c "echo 'SELECT rolname FROM pg_roles' |psql -t|grep jobarchive"`;
    $test_jobarchive_db=OSCAR::Utils::trim($test_jobarchive_db);
    $test_jobarchive_user=OSCAR::Utils::trim($test_jobarchive_user);

    # Drop database before driopping user (dependancy)
    if ($test_jobarchive_db eq "jobarchive") {
        # Database already exists, we need to drop it.
        system('su - postgres -c "/usr/bin/dropdb jobarchive"');
    }
    if ($test_jobarchive_user eq "jobarchive") {
        # User does not already exists, we need to drop it.
        system('su - postgres -c "/usr/bin/dropuser jobarchive"');
    }
    # Create the jobarchive database.
    system('su - postgres -c "/usr/bin/createdb jobarchive"');

    # Create jobarchive database tables and jobarchive role (user)
    system('su - postgres -c "/usr/bin/psql -f /usr/share/jobarchived/job_dbase.sql"');
    # Set the jobarchive password.
    system("su - postgres -c \"psql -c \\\"ALTER USER jobarchive WITH PASSWORD '$db_passwd'\\\"\"");
}

sub edit_pgserver_config {
    my $conf = "$pgdata/pg_hba.conf";
    my $jobarchive_config_lines=`grep jobarchive /var/lib/pgsql/data/pg_hba.conf|wc -l`;
    if ($jobarchive_config_lines > 0) {
        # config already ok.
        return;
    }

    open PG_CONF, $conf;
    open(TMP_CONF, '>', "/tmp/pg_hba.conf");

    # print the lines before the insertion.
    my $line ="";
    while(<PG_CONF>) {
        print TMP_CONF $_;
        last if /^# TYPE[ ]+DATABASE[ ]+USER[ ]+/ ;
    }

    # Insert the lines
    print TMP_CONF "local    jobarchive    jobarchive                      trust\n";
    print TMP_CONF "host     jobarchive    jobarchive    127.0.0.1/32      trust\n";
    print TMP_CONF "host     jobarchive    jobarchive    ::1/128           trust\n";

    # print the rest of the lines
    while(<PG_CONF>) {
        print TMP_CONF $_;
    }

    close TMP_CONF;
    close PG_CONF;

    backup_file_if_not_exist($conf)
        or die "Can't create a backup copy of $conf: Aborting";

    rename "/tmp/pg_hba.conf", "$conf";
    my ($login,$pass,$uid,$gid) = getpwnam("postgres")
        or die "postgres login not in passwd file";
    chown($uid,$gid,$conf);
    chmod(0600, $conf);
}

sub create_config_files {

    my ($conf) = @_;
    my $line;
    my @parts;

    if($conf->{'archived'} eq "yes" || 1) {
    print "Creating config for jobarchived.\n";

    open JOBARCHD_CONF, "/etc/jobarchived.conf";
    open(TMP_CONF, '>', "/tmp/jobarchived.conf");

    while(<JOBARCHD_CONF>) {
        $line = $_;
        chomp($line);
        if($line =~ /^ARCHIVE_DATASOURCES/) {
        @parts = split(/:/, $line);
        print TMP_CONF "$parts[0]: \"$conf->{'clustername'}\"\n";
        } elsif($line =~ /^ARCHIVE_PATH/) {
        @parts = split(/:/, $line);
        print TMP_CONF "$parts[0]: $conf->{'monarchrrd'}\n";
        } elsif($line =~ /JOB_SQL_DBASE/) {
            @parts = split(/:/, $line);
        print TMP_CONF "$parts[0]: localhost/$conf->{'jobarchive_db'}\n";
        } else {
        print TMP_CONF "$line\n";
        }
    }

    close TMP_CONF;
    close JOBARCHD_CONF;

    backup_file_if_not_exist("/etc/jobarchived.conf")
        or die "Can't create a backup copy of /etc/jobarchived.conf: Aborting";
    rename "/tmp/jobarchived.conf", "/etc/jobarchived.conf";

    }

    
    # Create jobmond configuration

    open JOBMOND_CONF, "/etc/jobmond.conf";
    open(TMP_CONF, '>', "/tmp/jobmond.conf");
    
    while(<JOBMOND_CONF>) {
    $line = $_;
    chomp($line);
    if($line =~ /^BATCH_SERVER/) {
        print "Found batch server entry\n";
        @parts = split(/:/, $line);
        print TMP_CONF  "$parts[0]: pbs_oscar\n";
    }
    elsif($line =~ /^BATCH_API/) {
        @parts = split(/:/, $line);
        print TMP_CONF  "$parts[0]: $conf->{'drm'}\n";
    } else {
        print TMP_CONF  "$line\n";
    }
    }
    close TMP_CONF;
    close JOBMOND_CONF;

    
    backup_file_if_not_exist("/etc/jobmond.conf")
        or die "Can't create a backup copy of /etc/jobmond.conf: Aborting";
    rename "/tmp/jobmond.conf", "/etc/jobmond.conf";

}


sub change_ganglia_conf {
    my ($conf) = @_;
    my $buffer;
    my $ganglia_conf = $conf->{'ganglia_conf'};
    my $line;

    open CONF, $ganglia_conf;
    while($line = <CONF>) {
    $buffer = $buffer.$line;
    }
    close CONF;

    print "Updating $ganglia_conf to use Job Monarch's templates and www files.\n";

    $buffer =~ s|"default"|"job_monarch"|;
    
    open(CONF, '>', $ganglia_conf);
    print CONF $buffer;
    close CONF;
}


sub start_services {
    my ($conf) = @_;

    if($conf->{'archived'} eq "yes") {

        # Now, make sure the path (/data/jobarch/rrds) to Monarch's archives exist
        eval { mkpath($conf->{'monarchrrd'}) };
        if ($@){
            print "Cannot create archive dir for jobarchived";
        }

        # TODO: Check return codes.
        enable_system_services((JOBARCHIVE()));
        system_service(JOBARCHIVE(),START());
    }

    enable_system_services((JOBMONITOR()));
    system_service(JOBMONITOR(),START());
}


#
# Start of the actual program
#

$pgdata = OSCAR::OCA::OS_Settings::getitem(POSTGRESQL()."_datadir");
$pgbin  = OSCAR::OCA::OS_Settings::getitem(POSTGRESQL()."_bindir");
my $jobmonarch_conf;

$jobmonarch_conf = get_config();

#my $pkgdir = OSCAR::Package::get_scripts_dir("jobmonarch", "post_server_install");

# PostgreSQL setup
if (! -e "$pgdata/PG_VERSION") {
    # No PG_VERSION, we need to initialise the database.
    # 1st, we need to create the directories and set correct permissions.
    File::Path::make_path($pgdata, {
                              verbose => 0,
                              mode => 0700,
                              owner => 'postgres',
                              group => 'postgres',
                          });
    # 2nd, we init the database default cluster
    system("su - postgres -c \"$pgbin/initdb --pgdata=$pgdata --auth='ident'\"")
}

# Allow "jobarchive" user to connect to the database.
edit_pgserver_config();

# Restart the database (redhat only)
system_service(POSTGRESQL(),RESTART());

# Wait for database to be up.
sleep(3);

# Create the database;
create_dbase_entries($jobmonarch_conf);

# Setup jobmonarch
create_config_files($jobmonarch_conf);

# Setup ganglia
change_ganglia_conf($jobmonarch_conf);

# Start jobmonarch services.
start_services($jobmonarch_conf);

