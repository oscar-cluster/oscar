#!/usr/bin/perl

#
# Copyright (c) OSCAR developers.
# Copyright (c) 2009 Oak Ridge National Laboratory.
#                    Geoffroy R. Vallee <valleegr@ornl.gov>
#                    All rights reserved.
#
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#


BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use Carp;
use File::Copy;
use File::Path;

use DBI;
use DBD::mysql;

use OSCAR::Configbox;
use OSCAR::Configurator_backend;
use OSCAR::Database;
use OSCAR::Distro;
use OSCAR::Opkg;
use OSCAR::OCA::OS_Detect;
use OSCAR::Utils;

our ($distro);


sub get_config {
    my $conf;
    my $config_data = "$ENV{OSCAR_PACKAGE_HOME}/configurator.html";

    if (-e $config_data) {
	my $ref = OSCAR::Configurator_backend::readInConfigValues($config_data,
        "jobmonarch",
        "",noarray=>1);
	$conf->{'clustername'} = $ref->{clustername};
	$conf->{'drm'} = $ref->{drm};
	$conf->{'archived'} = $ref->{archived};
    }

    $conf->{'http_user'}     = http_info();

    if ( -d "/usr/share/ganglia" ) {
        $conf->{'gangliawww'}    = "/usr/share/ganglia";
    } elsif ( -d "/var/www/html/ganglia" ) {
        $conf->{'gangliawww'}    = "/var/www/html/ganglia";
    } else {
        $conf->{'gangliawww'}    = "/opt/ganglia";
    }

    if ( -f "/etc/ganglia/conf.php" ) {
        $conf->{'ganglia_conf'}  = "/etc/ganglia/conf.php";
    } else {
        $conf->{'ganglia_conf'}  = $conf->{'gangliawww'}."/conf.php";
    }

    $conf->{'monarchrrd'}    = "/data/jobarch/rrds";
    $conf->{'jobarchive_db'} = "jobarchive";

    return $conf;
}

# Return: the http user id (string) or undef if error.
sub http_info () {
    my $http_uid_conf;
    my $http_user;

    my $os = OSCAR::OCA::OS_Detect::open ("/");
    if (!defined $os) {
        carp "ERROR: Impossible to detect the local distro.\n".
             "Is your system supported by OSCAR?\n";
        return undef;
    }
    my $distro = $os->{compat_distro};
    if (!OSCAR::Utils::is_a_valid_string ($distro)) {
        carp "ERROR: Impossible to detect the compat distro";
        return undef;
    }

    if($distro eq "sles" || $distro eq "suse") {
        $http_uid_conf = "/etc/apache2/uid.conf";
    } elsif($distro eq "rhel" || $distro eq "fc") {
        $http_uid_conf = "/etc/httpd/conf/httpd.conf";
    }

    $http_user = `egrep "^User " $http_uid_conf`;
    chomp($http_user);

    $http_user = (split(/\s+/,$http_user))[1];

    print "Http user: $http_user\n";

    return $http_user;
}


sub create_dbase_entries {

    my ($conf) = @_;
    my $http_user = $conf->{'http_user'};
    my $jobarchive_db = $conf->{'jobarchive_db'};
    my $db_passwd = "";

	# Get the database password from /etc/jobarchived.conf (generated from package post install)
	$db_password = `egrep "^JOB_SQL_PASSWORD" /etc/jobarchived.conf`
    chomp($db_password);
	$db_password = (split(/: /,$db_password))[1];
	print "jobarchive db password: ".$db_password;

    # Establish connection to Postgress database on localhost

    my $db_user = "postgres";
    my $dsn = "DBI:Pg:host=localhost:dbname=$jobarchive_db";
    my $dbh = DBI->connect($dsn, $db_user, $db_passwd, {'RaiseError' => 1, 'AutoCommit' => 1});
    my $res;

    my $have_http_user = 0;


    if ($dbh != undef) {
	    print "Connection to database successful\n";
    } else {
	    print "No connection to database: Giving up.\n";
    }


	# No need to create the apache user in the db. new jobmonarch handle that with jobarchive db user.
	
    # No go and check if the web user already exists,
    # create it otherwise.

    #my $sth = $dbh->prepare("SELECT \* FROM user WHERE User='$http_user' AND Host = 'localhost'");
    #if($sth) {
	#if($sth->execute) {
	#    while($res = $sth->fetchrow_hashref()) {
	#	if($res->{'User'} eq $http_user && $res->{'Host'} eq "localhost") {
	#	    $have_http_user = 1;
	#	}
	#    }
	#}
    #}

    # The old mysql version 4 does not have 'CREATE USER'...

    # if($have_http_user == 0) {
	# print "Http user not found in database.\n";
	# my $cmd_str = "CREATE USER $http_user\@localhost";
	# my $cmd_str = "GRANT ALL ON jobarchiveUSER $http_user\@localhost";
	# print "Command: $cmd_str\n";
	# $dbh->do($cmd_str);
    # }

    
    # Now continue with creating the database. We drop it first,
    # because any exsisting database with the name 'jobarchive'
    # is of no use to us.

    $dbh->do("DROP DATABASE IF exists $jobarchive_db");
    #system('su - postgres -c "dropdb jobarchive"');

    $dbh->do("CREATE DATABASE $jobarchive_db");
    #system('su - postgres -c "createdbdb jobarchive"');

    
    # And create tables for the jobarchive database

    $dbh->do("USE $jobarchive_db");

    $dbh->do("
CREATE TABLE jobs (
        job_id                  VARCHAR(20) NOT NULL UNIQUE PRIMARY KEY,
        job_name                VARCHAR(255),
        job_queue               VARCHAR(50),
        job_owner               VARCHAR(50),
        job_requested_time      VARCHAR(10),
        job_requested_memory    VARCHAR(10),
        job_ppn                 INT,
        job_status              VARCHAR(2),
        job_start_timestamp     VARCHAR(10),
        job_stop_timestamp      VARCHAR(10)
)
");

    $dbh->do("
CREATE TABLE nodes (
        node_id                 SERIAL NOT NULL UNIQUE PRIMARY KEY,
        node_hostname           VARCHAR(100),
        node_location           VARCHAR(10)
)
");

    $dbh->do("
CREATE TABLE job_nodes (
        job_id                  INT NOT NULL REFERENCES jobs ON DELETE CASCADE,
        node_id                 INT NOT NULL REFERENCES nodes ON DELETE RESTRICT,
        PRIMARY KEY ( job_id, node_id )
)
");
    

    # And, finally, grant all rights to root and $http_user

    $dbh->do("GRANT ALL ON $jobarchive_db.jobs TO root,$http_user\@localhost");
    $dbh->do("GRANT ALL ON $jobarchive_db.nodes TO root,$http_user\@localhost");
    $dbh->do("GRANT ALL ON $jobarchive_db.job_nodes TO root,$http_user\@localhost");

    $dbh->disconnect();
}



sub create_config_files {

    my ($conf) = @_;
    my $line;
    my @parts;

    if($conf->{'archived'} eq "yes" || 1) {
	print "Creating config for jobarchived.\n";

	open JOBARCHD_CONF, "/etc/jobarchived.conf";
	open(TMP_CONF, '>', "/tmp/jobarchived.conf");

	while(<JOBARCHD_CONF>) {
	    $line = $_;
	    chomp($line);
	    if($line =~ /^ARCHIVE_DATASOURCES/) {
		@parts = split(/:/, $line);
		print TMP_CONF "$parts[0]: \"$conf->{'clustername'}\"\n";
	    } elsif($line =~ /^ARCHIVE_PATH/) {
		@parts = split(/:/, $line);
		print TMP_CONF "$parts[0]: $conf->{'monarchrrd'}\n";
	    } elsif($line =~ /JOB_SQL_DBASE/) {
	        @parts = split(/:/, $line);
		print TMP_CONF "$parts[0]: localhost/$conf->{'jobarchive_db'}\n";
	    } else {
		print TMP_CONF "$line\n";
	    }
	}

	close TMP_CONF;
	close JOBARCHD_CONF;

	if (! -e "/etc/jobarchived.conf.save") {
	    rename "/etc/jobarchived.conf", "/etc/jobarchived.conf.save";
	}
	rename "/tmp/jobarchived.conf", "/etc/jobarchived.conf";

    }

    
    # Create jobmond configuration

    open JOBMOND_CONF, "/etc/jobmond.conf";
    open(TMP_CONF, '>', "/tmp/jobmond.conf");
    
    while(<JOBMOND_CONF>) {
	$line = $_;
	chomp($line);
	if($line =~ /^BATCH_SERVER/) {
	    print "Found batch server entry\n";
	    @parts = split(/:/, $line);
	    print TMP_CONF  "$parts[0]: pbs_oscar\n";
	}
	elsif($line =~ /^BATCH_API/) {
	    @parts = split(/:/, $line);
	    print TMP_CONF  "$parts[0]: $conf->{'drm'}\n";
	} else {
	    print TMP_CONF  "$line\n";
	}
    }
    close TMP_CONF;
    close JOBMOND_CONF;

    if (! -e "/etc/jobmond.conf.save") {
	rename "/etc/jobmond.conf", "/etc/jobmond.conf.save";
    }
    rename "/tmp/jobmond.conf", "/etc/jobmond.conf";

}


sub change_ganglia_conf {
    my ($conf) = @_;
    my $buffer;
    my $ganglia_conf = $conf->{'ganglia_conf'};
    my $line;

    open CONF, $ganglia_conf;
    while($line = <CONF>) {
	$buffer = $buffer.$line;
    }
    close CONF;

    print "Updating $ganglia_conf to use Job Monarch's templates and www files.\n";

    $buffer =~ s|"default"|"job_monarch"|;
    
    open(CONF, '>', $ganglia_conf);
    print CONF $buffer;
    close CONF;
}


sub start_services {
    my ($conf) = @_;

    if($conf->{'archived'} eq "yes") {

	# Now, make sure the path (/data/jobarch/rrds) to Monarch's archives exist
	eval { mkpath($conf->{'monarchrrd'}) };
	if ($@){
	    print "Cannot create archive dir for jobarchived";
	}

	if($distro eq "suse" || $distro eq "sles") {
	    system("chkconfig jobarchived on");
	} else {
	    system("chkconfig --level 345 jobarchived on");
	}
    }

    if($distro eq "suse" || $distro eq "sles") {
	system("chkconfig jobmond on");
    } else {
	system("chkconfig --level 345 jobmond on");
    }
}


#
# Start of the actual program
#

my $jobmonarch_conf;

$jobmonarch_conf = get_config();

create_dbase_entries($jobmonarch_conf);
create_config_files($jobmonarch_conf);
change_ganglia_conf($jobmonarch_conf);

start_services($jobmonarch_conf);
