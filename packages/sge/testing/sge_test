#!/bin/sh
#
# Copyright (c) 2002 The Trustees of Indiana University.  
#                    All rights reserved.
# Copyright (c) 2005 Bernard Li <bli@bcgsc.ca>.
#                    All rights reserved.
# 
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# $Id$
#
# Command line arguments:
#
# $1: Number of clients
# $2: Processors per node
# $3: SGE script to qsub
# $4: grep string for success
# $5: output filename prefix
# $6: timeout scaling factor
# $7: testprint label
#

# Default timeout for SGE tests.  Increase this number if tests
# are failing due to timeouts (not because of failing package tests)
default_timeout=60

exit_status=0

# Check usage (since this can be run seperately)

if [ $# -eq 0 ]; then
  # Get cluster info from user
  echo -n "Enter the number of client nodes: "
  read clients
  
  echo -n "Enter the number of processors per client: "
  read ppn
  
  echo -n "Enter the full path to the script to be run: "
  read sge_script
  
  echo -n "Enter the string that we should search for: "
  read grep_string
  
  echo -n "Enter the name of the output file (defaults to the script name): "
  read output
  opt=${output:=$sge_script}

  echo -n "Enter a time scaling factor (Default is 3): "
  read scaling_factor
  opt=${scaling_factor:=3}

  echo -n "Enter a test name (Default is \"SGE TEST\"): "
  read sge_test_type
  opt=${sge_test_type:="SGE TEST"}
elif [ $# -lt 4 ]; then
  echo "usage: $0 [<num clients> <num procs/client> <script> <searchstring> (outputfile) (time scale) (test name)]"
  exit 1
else
  clients=$1
  ppn=$2
  sge_script=$3
  grep_string=$4
  opt=$5
  output=${opt:=$sge_script}
  opt=$6
  scaling_factor=${opt:=3}
  opt=$7
  sge_test_type=${opt:="SGE TEST"}
fi

#echo "scalingfactor is $scaling_factor"
#echo "output is $output"
#exit

numprocs=`expr $clients \* $ppn`
script_name=`basename $sge_script`
pe=`echo $script_name | awk -F . {'print $NF'}`

function waitexit {
        # Function to wait for a key press before
        # exiting. Used by guis.
        if [ $wizard_launch ] && [ $wizard_launch = yes ]; then
          echo ...Hit a key to exit...
          read -n 1 -s  key
        fi
        exit $exit_status
}

function calc_timeout {
  if [ ! $min_timeout ]; then min_timeout=$default_timeout; fi
  if [ ! $scaling_factor ]; then scaling_factor=3; fi
  timeout=`expr $numprocs \* $scaling_factor`
  if [ $timeout -lt $default_timeout ] || [ $timeout -lt $min_timeout ]; then
    if [ $min_timeout -gt $default_timeout ]; then
      timeout=$min_timeout;
    else
      timeout=$default_timeout;
    fi
  fi
}              

function check_free_nodes () {
  free=`qstat -F | grep "0/" | wc -l`
  if [ $free -eq $clients ] || [ $free -gt $clients ]; then  
    # at least $clients free nodes
    echo -n ""
  else
    $OSCAR_TESTPRINT --label "Checking for $clients free nodes:" --fail
    echo Not enough free nodes.  Tests incomplete.
    exit_status=1
    waitexit
  fi
}
        
#     SGE TEST ROUTINE
#     ----------------
# Generic routine to run any test through SGE depending on environment
sge_test_routine () {
  sleep 1
  calc_timeout
  check_free_nodes
  $OSCAR_TESTPRINT --label "$sge_test_type"
  cd `dirname $sge_script`
  if [ -f $output.out ]; then /bin/rm -f $output.out; fi
  if [ -f $output.err ]; then /bin/rm -f $output.err; fi
  jobname=`basename $output`
  job=`qsub -N $jobname -S /bin/bash -v PATH -pe $pe $clients -o $jobname.out -e $jobname.err $sge_script | awk {'print $3'}`
  # Check that job submitted properly
  if [ -z $job ]; then 
    $OSCAR_TESTPRINT --label "$sge_test_type" --fail
  else
    timeleft=$timeout
    job_state=incomplete
    while [ $job_state = incomplete ]; do
      # Displays remaining seconds
      $OSCAR_TESTPRINT --label "$sge_test_type" --status "$timeleft"
      sleep 1
      # Tests for success or timeout
      if [ `qstat | grep -c $job` -eq 0 ]; then
        grep "$grep_string" "$output.out" > /dev/null
        string_test=$?
        if [ $string_test = 0 ]; then
          job_state=success
          $OSCAR_TESTPRINT --label "$sge_test_type" --pass
        else
          timeleft=0
        fi
      fi
      if [ $timeleft -eq 0 ]; then  #more than timeout
        $OSCAR_TESTPRINT --label "$sge_test_type" --fail
        job_state=fail
	exit_status=1
        if [ `qstat | grep -c $job` -eq 1 ]; then
          qdel $job
          sleep 1 # Allows nodes to free up again
        fi
        if [ "$exit_on_fail" = yes ]; then waitexit ; fi
      fi
      timeleft=`expr $timeleft - 1`
    done
  fi
  unset min_timeout
  cd ..
}

# Run the actual test

if [ -f $sge_script ]; then
  sge_test_routine
else
  $OSCAR_TESTPRINT --label "$sge_test_type" --skipped
  job_state=skipped
  exit_status=2
fi

# Return a meaningful exit status

exit $exit_status
