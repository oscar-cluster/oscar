#!/usr/bin/env perl
#
# Copyright (c) 2002-2003 The Trustees of Indiana University.  
#                         All rights reserved.
# 
# This file is part of the OSCAR software package.  For license
# information, see the COPYING file in the top level directory of the
# OSCAR source distribution.
#
# $Id$
#

use strict;
use XML::Simple;
use Carp;

# Import some modules just for switcher

if (defined $ENV{OSCAR_PACKAGE_HOME} && -d $ENV{OSCAR_PACKAGE_HOME}) {
    use lib "$ENV{OSCAR_PACKAGE_HOME}/switcher";
    require package_config;
} else {
    use lib "/var/lib/oscar/packages/switcher";
    use package_config;
}

# Debugging

use Data::Dumper;


#
# Global variables
#

my $outfile;
if (defined $ENV{OSCAR_PACKAGE_HOME} && -d $ENV{OSCAR_PACKAGE_HOME}) {
    $outfile = "$ENV{OSCAR_PACKAGE_HOME}/switcher/configurator.html";
} else {
    $outfile = "/var/lib/oscar/packages/switcher/configurator.html";
}

#
# Read in the settings from the database as to what packages provided
# switcher blocks
#

my $pkg_config = package_config::get();

#
# Now that we know what packages use switcher, we can construct an
# HTML page asking to choose between packages that use the same tag.
#

unlink($outfile);
open (OUTFILE, ">$outfile") || 
    croak("Unable to open $outfile");

#
# Write out the HTML header
#

print OUTFILE "<html>
<head>
<title>Environment Switcher OSCAR package configuration</title>
</head>
<body>
<h1 align=center>Environment Switcher OSCAR package configuration</h1>

<form>\n";

#
# - If we didn't find any tags, print a message saying so.
# - Otherwise, for each tag:
#   - If there is only one selection possible, then just print it out
#   - Otherwise, print a bunch of radio buttons and let the user pick
#     the default one
#

my @pkg_config_keys = keys(%$pkg_config);
if ($#pkg_config_keys < 0) {
    print "[INFO] No switcher data found in the database\n";
    print OUTFILE "<p>No pkg_config were supplied by any OSCAR packages -- nothing to configure.</p>\n\n";
} else {

    print OUTFILE "<p>\n<ol>\n";

    foreach my $tag (sort(@pkg_config_keys)) {
	my $info = $pkg_config->{$tag};

	print OUTFILE "<p>\n<li> ";

	# If there's only one name, then automatically set it and
	# don't give the user the opprotunity to change it

	if ($info->{count} <= 1) {
	    print OUTFILE "Default for tag \"$tag\" will be set to " . 
		$info->{packages}[0] . " (\"" . $info->{names}[0] . "\")
<input type=\"hidden\" name=\"$tag\" value=\"" . $info->{names}[0] . "\">";
	}

	# Otherwise, print a radio button for each possible name.
	# Note that adding "default" to the first value's radio button
	# is ok, because the configurator itself will override this if
	# there was previously some other option selected (e.g., this
	# is your second time running the configurator and you
	# previously selected some other option)

	else {
	    print OUTFILE 
		"Default for tag \"$tag\" can be set to:\n    <ul>\n";

	    # EF: we want the system-wide default to be "none" if not
	    # set explicitely

	    print OUTFILE
		"    <li> <input type=\"radio\" name=\"$tag\" value=\"" .
		"none" . "\"> " . "none" . "</li>\n";

            # Cycle through all the available values; the first one
            # will be checked by default

	    my $def = "checked";
	    foreach my $i (0 .. $#{$info->{names}}) {
		print OUTFILE
		    "    <li> <input $def type=\"radio\" name=\"$tag\" value=\"" .
		    $info->{names}[$i] . "\"> " . $info->{packages}[$i] .
		    " (\"" . $info->{names}[$i] . "\")</li>\n";
		$def = "";
	    }
	    print OUTFILE "    </ol>\n";
	}

	print OUTFILE "</li>\n</p>\n\n";
    }

    print OUTFILE "</ol>\n</p>\n\n";
}

#
# Write out the HTML footer
#

print OUTFILE "</form>
</body>
</html>\n";

#
# All done
#

close(OUTFILE);

0;
