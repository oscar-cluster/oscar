#!/usr/bin/env perl
# $Id$
# Copyright (c) 2004, The Board of Trustees of the University of Illinois.
#                     All rights reserved.

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   post_server_rpm_install for torque

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use Carp;
use Sys::Hostname;
use OSCAR::Opkg;
use OSCAR::Utils;
use OSCAR::Logger;
use OSCAR::LoggerDefs;
use OSCAR::SystemServices;
use OSCAR::SystemServicesDefs;
use SystemInstaller::Machine;
use OSCAR::Database;
use OSCAR::Configurator_backend;
use OSCAR::MonitoringMgt;
use v5.10.1;
#use Switch 'Perl5', 'Perl6';
# Avoid smartmatch warnings when using given
no if $] >= 5.017011, warnings => 'experimental::smartmatch';

my $rc=0;

########################
#  BEGIN MAIN PROGRAM  #
########################

# Set server_name
my $pbs_server = hostname;
my @server_name=('/etc/torque/server_name', '/var/lib/torque/server_name', '/var/spool/pbs/server_name');
for my $server_name_configfile (@server_name) {
    if (-f $server_name_configfile) {
        if (open (SERVER_NAME, ">$server_name_configfile")) {
            print SERVER_NAME $pbs_server; 
            close (SERVER_NAME);
        } else {
            oscar_log(5, ERROR, "Couldn't open $server_name_configfile for writing.");
            oscar_log(5, ERROR, "Can't set server_name to $pbs_server");
            $rc++;
        }
        last; # We found it, it's ok, other are at best links or don't exist
    }
}

# Init torque DB if needed.
if(!-f '/var/lib/torque/server_priv/serverdb' && !-f '/var/spool/pbs/server_priv/serverdb') {
    # Find server_priv directory.
    my $pbs_home="/var/lib/torque";
    $pbs_home="/var/spool/pbs" if(-d '/var/spool/pbs');

    # Find pbs_server executable.
    my $pbs_server_daemon="/usr/sbin/pbs_server";
    $pbs_server_daemon="/opt/pbs/sbin/pbs_server" if(-x '/opt/pbs/sbin/pbs_server');

    !oscar_system("$pbs_server_daemon -d $pbs_home -f -t create")
        or ($rc++,oscar_log(5, ERROR,"Cant init pbs_server db. Failed command: $pbs_server_daemon -t create"));

    if( -f "/etc/torque/nodes") {
        !oscar_system("ln -sf /etc/torque/nodes $pbs_home/server_priv/nodes")
            or $rc++;
    }
    # system('/etc/init.d/pbs_server create'); # no config file: need to initialise config.
}

# Enable auth daemon and pbs_server
!enable_system_services( (PBS_TRQAUTHD, PBS_SERVER) )
    or ($rc++, oscar_log(5, ERROR, "Couldn't enable pbs_trqauthd and pbs_server on head."));

# Make sure only one scheduler is active.
# Config Torque sched service not to start if we use Maui
# In order to prevent a conflict when Maui is to be used,
# 'pbs_sched' is disabled, then.

# Load list of selected packages.
my @pkgs = OSCAR::Database::list_selected_packages();

# Keep in mind if naemon is selected.
my $use_naemon=1 if ( 'naemon' ~~ @pkgs );

if ( 'maui' ~~ @pkgs ) {
    # Using MAUI: need to disable pbs_sched
    if ( system_service_status(PBS_SCHED) == SERVICE_ENABLED ) {
        oscar_log(1, INFO, "Using MAUI: Disabpling pbs_sched");
        !disable_system_services( (PBS_SCHED) )
            or ($rc++, oscar_log(5, ERROR, "MAUI scheduler enabled, but couldn't disable pbs scheduler."));
        !system_service(PBS_SCHED,STOP)
            or ($rc++, oscar_log(5, ERROR, "Couldn't stop pbs scheduler service."));
    }
    # We could enable maui here, but it's better to let maui post-scripts do that.
    # We could write naemon maui config here, but it's also better to let maui post-scripts do that.
} else {
    # Using PBS_SCHED: need to disable maui
    if ( system_service_status(MAUI) == SERVICE_ENABLED ) {
        oscar_log(1, INFO, "Using PBS_SCHED: Disabpling maui");
        !disable_system_services( (MAUI) )
            or ($rc++, oscar_log(5, ERROR, "PBS_SCHED scheduler enabled, but couldn't disable maui service."));
        !system_service(PBS_SCHED,STOP)
            or ($rc++, oscar_log(5, ERROR, "Couldn't stop maui scheduler service."));
    }
    !enable_system_services( (PBS_SCHED) )
        or ($rc++, oscar_log(1, ERROR, "PBS_SCHED scheduler enabled, but couldn't unable service."));
}

oscar_log(1, INFO, "...updating xpbsmonrc file");
my $arch = `uname -i`;
chomp($arch);

my $xpbsmonrc;

# Attention: More sophistication needed here.
# Check for 32/64 bit architecture AND
# Check if using /opt located oscar torque package or distro torque package
if ($arch eq "x86_64") {
    if (-f "/usr/lib64/xpbsmon/xpbsmonrc") {
        $xpbsmonrc = "/usr/lib64/xpbsmon/xpbsmonrc";
    } else {
        $xpbsmonrc = "/opt/pbs/lib64/xpbsmon/xpbsmonrc";
    } 
} else {
    if (-f "/usr/lib/xpbsmon/xpbsmonrc") {
        $xpbsmonrc = "/usr/lib/xpbsmon/xpbsmonrc";
    } else {
        $xpbsmonrc = "/opt/pbs/lib/xpbsmon/xpbsmonrc";
    }
}

# Eventually 'torque_gui' is not installed, so we cannot configure xpbsmonrc
if (-f $xpbsmonrc) {
    my @lines = `cat $xpbsmonrc`;
    grep { s/ICON.*$/ICON;pbs_oscar;pbs_oscar;;;}/ } @lines;

    if (open (RCFILE, ">$xpbsmonrc")) {
        print RCFILE @lines; 
        close (RCFILE);
    } else {
        oscar_log(5, WARNING, "XPBSMONRC not setup - Couldn't open $xpbsmonrc.");
        $rc++;
    }
} else {
    oscar_log(1, INFO, "xpbsmon not installed!");
}

my $rm_detect_dir;
if (defined $ENV{OSCAR_HOME}) {
    $rm_detect_dir = "$ENV{OSCAR_HOME}/lib/";
} else {
    require OSCAR::Utils;
    $rm_detect_dir = OSCAR::Utils::get_path_perl_modules ();
}
$rm_detect_dir .= "/OSCAR/OCA/RM_Detect";

# Copy RM_Detect component for TORQUE to the right location
my $rm_file = "/usr/lib/oscar/packages/torque/TORQUE.pm";
oscar_system("cp -a $rm_file $rm_detect_dir") == 0 
    or ($rc++, oscar_log(5, ERROR, "Failed to copy $rm_file to $rm_detect_dir"), exit 1);

# NAEMON specific part: Add monitoring to torque if naemon is used.
if (defined ($use_naemon)) {
    # 1st Create the directory structure required for oscar specific configuration. This needs to be checked as we may have been called before naemon server post install.
    init_naemon_config_dir() and (oscar_log(1,ERROR,"Failed to create naemon OSCAR's specific directory structure"), exit 1);
    # Check that pbsnodes doesn't report any problem from oscar-server for each compute node.
    $rc += write_oscar_command_cfg ('check_pbsnode', '$USER1$/check_pbsnode $HOSTALIAS$');
    # Now we need to know if we compute on head (do we need to monitor pbs_mom on head?)
    my $torque_scripts_dir = OSCAR::Package::get_scripts_dir("torque", 'server-post-install');
    my $torque_configurator = "$torque_scripts_dir/configurator.html";
    my $torque_config_ref = OSCAR::Configurator_backend::readInConfigValues($torque_configurator, "torque", "", noarray=>1);
    if ($torque_config_ref->{compute_on_head}>0) { # Compute on head: hostgroup is oscar_computers (heads + nodes)
        $rc += write_oscar_service_cfg ('pbs_mom', 'hostgroup', 'oscar_computers', 'check_pbsnode');
    } else { # Don't compute on head. hostgroup is oscar_nodes only)
        $rc += write_oscar_service_cfg ('pbs_mom', 'hostgroup', 'oscar_nodes', 'check_pbsnode');
    }

    # Check that pbs_server is listenning on port 15001.
    $rc += write_oscar_command_cfg ('check_pbsserver', '$USER1$/check_tcp -H $HOSTADDRESS$ -p $ARG1$ -w $ARG2$ -c $ARG3$');
    $rc += write_oscar_service_cfg ('pbs_server', 'host', 'oscar-server', 'check_pbsserver!15001!1.0!1.5');

    # Check that trqauthd is listenning on port 15005 (on all oscar computers, heads + nodes).
    # OL: BUG: Can't monitor this way as trqauthd use loopback interface. need nrpe
    #$rc += write_oscar_command_cfg ('check_trqauthd', '$USER1$/check_tcp -H $HOSTADDRESS$ -p $ARG1$ -w $ARG2$ -c $ARG3$');
    #$rc += write_oscar_service_cfg ('trqauthd', 'hostgroup', 'oscar_computers', 'check_trqauthd!15005!1.0!1.5');

    if (!('maui' ~~ @pkgs)) { # If we're not using MAUI, we need to monitor pbs_sched.
        $rc += write_oscar_command_cfg ('check_pbssched', '$USER1$/check_tcp -H $HOSTADDRESS$ -p $ARG1$ -w $ARG2$ -c $ARG3$');
        $rc += write_oscar_service_cfg ('pbs_sched', 'host', 'oscar-server', 'check_pbssched!15004!1.0!1.5');
    }
}

exit $rc;
