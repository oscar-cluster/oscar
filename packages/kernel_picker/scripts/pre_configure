#!/usr/bin/env perl
#########################################################################
#  Script Name : pre_configure                                          #
#  Written by  : Terrence G. Fleury (tfleury@ncsa.uiuc.edu)             #
#  Date        : January 24, 2003                                       #
#  Purpose     : This pre_configure script for kernel_picker checks     #
#                to see if the currently running kernel corresponds     #
#                to one of the kernel RPMs to be installed.  If this    #
#                is not the case AND we can find a kernel file on       #
#                disk which matches the running kernel, then we give    #
#                the user the option to install (in the image) this     #
#                kernel file in addition to the standard kernel RPM.    #
#                Also, we always allow the user to specify an           #
#                alternate kernel file to be installed in the image     #
#                (assuming that the user knows the location on disk     #
#                of this alternate kernel file).                        #
#  Copyright (c) 2003 National Center for Supercomputing Applications   #
#                     (NCSA) All rights reserved.                       #
#  Modifications:                                                       #
#  Sep 04, 2003 : Added selection if multiple OSCAR image directories   #
#########################################################################

use strict;
use lib "$ENV{OSCAR_HOME}/lib";
use Carp;
use POSIX;
use Cwd 'chdir';
use File::Find;
use OSCAR::OCA::OS_Detect;

my $runningversion;    # Version of currently running kernel
my $runningrelease;    # Release of currently running kernel
my @kernelfiles;       # List of files in /boot that match the running kernel
my $htmlfile = "$ENV{OSCAR_PACKAGE_HOME}/configurator.html";
$ENV{LC_ALL} = "C";

#########################################################################
#  Subroutine name : getOscarImageList                                  #
#  Parameters : none                                                    #
#  Returns : An array of directories in /var/lib/systemimager/images.   #
#  This function returns a list of directories in                       #
#  /var/lib/systemimager/images.  These should all be directories       #
#  containing oscar images, usually named something like 'oscarimage'.  #
#########################################################################
sub getOscarImageList  # -> @dirlist
{
  my @oscarimagedirs;
  my $systemimagesdir = "/var/lib/systemimager/images";

  if (opendir(IMAGESDIR,$systemimagesdir))
    {
      # Save current directory for restoration later and do a cd to find images
      my $origdir = Cwd::cwd();
      chdir($systemimagesdir);
      # Generate a list of all directories available
      @oscarimagedirs = grep { -d && !/^\.\.?$/ } readdir IMAGESDIR;
      closedir IMAGESDIR;
      chdir($origdir);
    }

  return @oscarimagedirs;
}

#########################################################################
#  Subroutine: getRunningKernelInfo                                     #
#  Parameters: None                                                     #
#  Returns   : 1. The version of the running kernel.                    #
#              2. The compilation date of the running kernel.           #
#  This subroutine checks the information in "/proc/version" and        #
#  extracts out the Linux version number and the compilation date/time  #
#  of the currently running kernel.  These are returned in a list to    #
#  the calling routine.                                                 #
#########################################################################
sub getRunningKernelInfo # -> ($runversion,$rundate)
{
  my @data = POSIX::uname;
  return (@data[2], @data[3]);
}

#########################################################################
#  Subroutine: isGzip                                                   #
#  Parameter : The name of the file to test.                            #
#  Returns   : "1" if the file is gzipped, "0" otherwise.               #
#  This routine is taken from SystemConfig's Initrd::Generic module.    #
#  It takes a file and tests to see if it has been gzipped.             #
#########################################################################
sub isGzip # -> ($isgzip)
{ 
  my($file)= @_;
  my $isgzip = 0;

  open(IN,"<$file") or (carp($!), return undef);
  my $chr1 = getc IN;
  my $chr2 = getc IN;
  close(IN) or (carp($!), return undef);
  $isgzip = 1 if(unpack("H*",$chr2) eq "8b" and unpack("H*",$chr1) eq "1f");

  return $isgzip;
}

#########################################################################
#  Subroutine: checkForKernelFile                                       #
#  Parameters: None                                                     #
#  Returns   : Nothing                                                  #
#  This is a helper subroutine for findRunningKernelFiles.  It is the   #
#  subroutine used by the File::Find module and is called for each file #
#  in the /boot directory.  It checks to see if the given file is a     #
#  kernel file which matches the version and compilation date of the    #
#  currently running kernel.  If so, it pushes that file on to the      #
#  global list @kernelfiles.                                            #
#########################################################################
sub checkForKernelFile
{
  # Skip any directories that we don't have access to (like lost+found)
  $File::Find::prune = 1 if -d $File::Find::name && 
    !(-x $File::Find::name || -r $File::Find::name);
   
  if( -r $File::Find::name &&    # Make sure that the file is readable by us
     !(-l $File::Find::name) &&  # Ignore symbolic links
     -B $File::Find::name)       # Check only binary files
    {
      if (isGzip($File::Find::name))  # Check for gzipped files
        {
          open(IN,"gzip -qdc $File::Find::name |") or 
            croak("Couldn't run gzip -qdc $File::Find::name.");
        }
      else   # Open as a "normal" file
        {
          open(IN,"<$File::Find::name") or 
            croak("Failed to open $File::Find::name.");
        }
      binmode IN, ":raw";

      my $rv = quotemeta $runningversion;
      my $rr = quotemeta $runningrelease;
      while (<IN>) {
          if ( /$rv/ && /$rr/ ) {
              push(@kernelfiles,$File::Find::name);
              last;
          }
      }
      close IN;
    }
}

#########################################################################
#  Subroutine: findRunningKernelFiles                                   #
#  Parameters: A list of directories to search for kernel files.        #
#  Returns   : A list of files matching the currently running kernel.   #
#  This is the main subroutine of this module.  It takes in a list of   #
#  directories and checks every file in those directories (and sub-     #
#  directories) for kernel files matching the currently running kernel. #
#  The list of files found is returned (which may be empty).            #
#########################################################################
sub findRunningKernelFiles # (@searchdirs) -> @kernelfiles
{
  my(@searchdirs) = @_;
  @kernelfiles = ();   # Clear global list of kernel files

  @searchdirs = ('/boot') unless @searchdirs;
  ($runningversion,$runningrelease) = getRunningKernelInfo();
  find(\&checkForKernelFile,@searchdirs);   # Use Perl's File::Find module

  return @kernelfiles;   # Return the list of matching kernel files
}

##########################################################################
#  Subroutine: getKernelList                                             #
#  Parameters: None                                                      #
#  Returns   : A list of URLs for binary packages providing the "kernel" #
#              capability.                                               #
##########################################################################
sub getKernelList # -> @kernellist
{
  my @kernelurls;

  my $os = OSCAR::OCA::OS_Detect::open();

  if ($os->{pkg} eq "rpm") {
      # hardcoded for RPMs right now
      my @kernels = `yume --repoquery --whatprovides kernel`;
      chomp @kernels;
      my $k = join(" ",@kernels);
      @kernelurls = `yume --repoquery --location $k`;
      chomp @kernelurls;
  } elsif ($os->{pkg} eq "deb") {
      #...
  }

  return @kernelurls;
}

#########################################################################
#  Subroutine: generateHTMLFile                                         #
#  Parameters: None                                                     #
#  Returns   : Nothing                                                  #
#  This is the meat of the script.  We first check to see if there is   #
#  a kernel file in the /boot directory (and subdirectories) which      #
#  matches the running kernel.  Then we look at the default RPM list    #
#  for the machine and see what kernel* RPMs are supposed to be         #
#  installed.  We try to find these files in /tftpboot/rpm.  For each   #
#  kernel* file that we find, we extract out the /boot/* files and      #
#  check THEM for a kernel file which matches the running kernel.       #
#  Finally, using all of this information, we generate a configurator   #
#  HTML file for kernel_picker.                                         #
#########################################################################
sub generateHTMLFile
{
  my $noboot = 0;        # No /boot/kernel file(s) corresponding to running kernel
  my $nokernelrpm = 0;   # No "kernel*" file available in /tftpboot/rpm
  my $norunningrpm = 0;  # Couldn't match the running kernel file with an RPM file

  # Remove the old configurator.html file (if any).
  unlink($htmlfile) if (-e $htmlfile);

  # Find any files corresponding to the currently running kernel.
  my @runlist = findRunningKernelFiles();
  # Set error if we couldn't find any such kernel files.
  $noboot = 1 unless @runlist;

  # Generate a list of all files that meet these conditions:
  my @tftplist = getKernelList();
  chomp( @tftplist );
  # Set error if there weren't any good "kernel*" files in /tftpboot/rpm.
  # NOTE: This should never happen!!!
  $nokernelrpm = 1 unless @tftplist;

  # If we found some kernel* RPMs in /tftpboot/rpm, check each one to see
  # if the currently running kernel corresponds to something in one of the
  # RPM's /boot/* files.  To do this, we need to extract out the /boot/*
  # files from each kernel*.rpm and check against the running kernel.
  unless( $nokernelrpm ) {
      my $found = 0;
      foreach my $rpmfile (@tftplist) {

          my @allfiles = `rpm -qlp $rpmfile 2>/dev/null`;
          chomp( @allfiles );
          foreach my $f (@runlist) {
              last if $found = grep {$_ eq $f} @allfiles;
          }
      }

      # Set error if we couldn't find the running kernel file in any
      # of the RPM files.
      $norunningrpm = 1 unless $found;
  }

  # Get a list of OSCAR image directories
  my @oscarimages = getOscarImageList();
  chomp( @oscarimages );

  # Finally, generate the configurator.html file using the information 
  # we gathered above. 
  open(HTML,">$htmlfile") || croak("Unable to open $htmlfile");

  print HTML "<html>\n";
  print HTML "<head><title>OSCAR Client Kernel Selector</title>\n";
  print HTML "</head>\n";
  print HTML "<body>\n";
  print HTML "<center><h1>OSCAR Client Kernel Selector</h1></center>\n";
  print HTML "\n";
  print HTML "The default kernels (e.g., vmlinuz) specified in the RPM list ";
  print HTML "work for most machine configurations.  However, there are ";
  print HTML "occasions when you want to install an alternate kernel in the ";
  print HTML "image file.  Here you can choose the default kernel ";
  print HTML "or an alternate kernel.\n";
  print HTML "<p>\n";
  if ($norunningrpm) {
      print HTML "<b>NOTE</b> The currently running kernel differs ";
      print HTML "from the kernel RPM to be installed. \n";
      if ($noboot) {
          print HTML "However, a disk file ";
          print HTML "corresponding to the currently ";
          print HTML "running kernel was <b>not</b> found.  ";
          print HTML "You may want to specify the location ";
          print HTML "of an \"<i>Alternate&nbsp;kernel&nbsp;file</i>\" below.\n";
      }
      print HTML "<p>\n";
  }

  print HTML "<form>\n";
  print HTML "<b>Choose the kernel to install in the image:</b><br>\n";

  # If we couldn't find an RPM kernel that matched the running kernel
  # but we DID find a kernel file on disk that matched the running
  # kernel, then offer that as an option and make it the default
  # selection for the user.
  print HTML "<input type=radio ";
  print HTML "checked " unless $norunningrpm && !$noboot;
  print HTML "name=bootkernel value=\"default\">Default kernel from RPM<br>\n";

  my $fp = 1;
  foreach (@runlist) {
      print HTML "<input type=radio ";
      print HTML "checked " if $fp && $norunningrpm && !$noboot;
      print HTML "name=bootkernel value=\"$_\">$_\n";
      print HTML "&nbsp;&nbsp(matches currently running kernel)<br>\n";
      $fp = 0;
  }

  print HTML "<br><input type=radio name=bootkernel value=\"alternate\">Alternate kernel file:\n";
  print HTML "<input type=text name=altfile size=40>\n";
  print HTML "<p> <p> <hr width=\"80%\"> <p> <p>\n";

  # If there are two or more OSCAR image directories, choose one to use
  if (@oscarimages > 1) {
      print HTML "You have more than one OSCAR image. Please choose one:<br>\n";
      print HTML "&nbsp;" x 2;
      print HTML "<select name=oscarimage size=1>\n";
      my $fp = 1;
      foreach (sort {lc($a) cmp lc($b)} @oscarimages) {
          print HTML "<option";
          print HTML " selected" if $fp;
          print HTML ">$_\n";
          $fp = 0;
      }
      print HTML "</select>";
      print HTML "<p> <p> <hr> <p> <p>\n";
  }

  print HTML "If you selected a kernel other than the Default, enter the ";
  print HTML "following information:<br>\n";
  print HTML "&nbsp;" x 2;
  print HTML "Use loadable modules:<br>";
  print HTML "&nbsp;" x 4;
  print HTML "<input type=radio checked name=usesmodules value=\"N\">No<br>\n";
  print HTML "&nbsp;" x 4;
  print HTML "<input type=radio name=usesmodules value=\"Y\">Yes<br>\n";
  print HTML "&nbsp;" x 2;
  print HTML "If using loadable modules, enter the ";
  print HTML "following information:<br>\n";
  print HTML "&nbsp;" x 4;
  print HTML "Kernel version: ";
  print HTML "<input type=text name=kernelversion size=20 value=\"";
  print HTML $runningversion,"\"><br>\n";
  print HTML "&nbsp;" x 4;
  print HTML "Loadable modules path: ";
  print HTML "<input type=text name=modulespath size=30 value=\"/lib/modules/";
  print HTML $runningversion,"\"><br>\n";
  print HTML "&nbsp;" x 4;
  print HTML "System.map file (optional): ";
  print HTML "<input type=text name=systemmap size=30><br>\n";
  print HTML "<p>\n";
  print HTML "<input type=reset value=\"Reset Form\">\n";
  print HTML "<p>\n";
  print HTML "</form>\n";
  print HTML "<hr>\n";
  print HTML "</body>\n";
  print HTML "</html>\n";

  close HTML;
}


#####################
# BEGIN MAIN SCRIPT #
#####################

generateHTMLFile;

###################
# END MAIN SCRIPT #
###################

