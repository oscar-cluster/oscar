#!/usr/bin/env perl
                                                                                
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# If the ntpconfig package has been configured to use a particular ntp server
# then this script will update /etc/ntp.conf with the new server settings,
# otherwise, it simply sets up the headnode to act as a time server for the
# client nodes                                                                                
# (C)opyright Bernard Li <bli@bcgsc.ca>

use lib "$ENV{OSCAR_HOME}/lib";
use OSCAR::Network;
use XML::Simple;
use Carp;

my $ntpBuffer = "";
my $ntp_conf = "/etc/ntp.conf";
my $step_tickers = "/etc/ntp/step-tickers";
my $xml_data = "$ENV{OSCAR_PACKAGE_HOME}/.configurator.values";

# get headnode's interface information from OSCAR database
my $iface = `oda read_records oscar.interface`;
chomp($iface);

open(CONF, $ntp_conf) or croak("Error: unable to open ($ntp_conf)\n");

while ($line = <CONF>) {
    $ntpBuffer = $ntpBuffer.$line;
}
                                                                                
close(CONF, $ntp_conf);

my ($ip, $broadcast, $netmask) = interface2ip($iface);
my @results=split('\.', $ip);
                                                                                
$results[3]=0;
$network = join(".", @results);

# User has configured ntpconfig package with a NTP server
if (-e $xml_data) {
    $ref = XMLin($xml_data);
    # If ntpconfig package has configured NTP server before, replace
    if ($ntpBuffer =~ /User selected NTP Server/) {
	$ntpBuffer =~ s/^server.*\nrestrict.*\n/server  $ref->{ntpserver}\nrestrict $ref->{ntpserver} mask 255.255.255.255\n/m;
    # ntpconfig package has not previously configured NTP server
    } elsif ($ntpBuffer =~ /Added by OSCAR package ntpconfig/) {
	$ntpBuffer =~ s/# Added by OSCAR package ntpconfig\n/# Added by OSCAR package ntpconfig\n# User selected NTP Server\nserver  $ref->{ntpserver}\nrestrict $ref->{ntpserver} mask 255.255.255.255\n/m;
    # ntpconfig package has not been installed previously
    } else {
	system("cp $ntp_conf $ntp_conf.oscarbak");
    	$ntpBuffer = "# Added by OSCAR package ntpconfig\n# User selected NTP Server\nserver  $ref->{ntpserver}\nrestrict $ref->{ntpserver} mask 255.255.255.255\nrestrict $network mask $netmask\n\n".$ntpBuffer;
    }

    $step_tickers = ">".$step_tickers;
                                                                                                                             
    # populate the step-tickers file with ntp server specified
    open(STEP, $step_tickers) or croak("Error: unable to open ($step_tickers)\n");
    close (STEP);

# User has not configured ntpconfig package, sets up NTP server for local use only
} else {
    # If ntpconfig package has configured NTP server before, remove
    if ($ntpBuffer =~ /User selected NTP Server/) {
        $ntpBuffer =~ s/^# User selected NTP Server\nserver.*\nrestrict.*\n//m;
    # ntpconfig package has not been installed previously
    } else {
	if (!($ntpBuffer =~ /Added by OSCAR package ntpconfig/)) {
	    system("cp $ntp_conf $ntp_conf.oscarbak");
    	    $ntpBuffer = "# Added by OSCAR package ntpconfig\nrestrict $network mask $netmask\n\n".$ntpBuffer;
	}
    }
}

$ntpBuffer =~ s/^authenticate/# authenticate/m;

$ntp_conf = ">".$ntp_conf;

open(CONF, $ntp_conf) or croak("Error: unable to open ($ntp_conf)\n");
print CONF $ntpBuffer;
close(CONF);

`chkconfig --levels 2345 ntpd on`;
`service ntpd restart`;

exit(0);
