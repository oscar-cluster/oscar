#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   post_client_rpm_isntall and post_clients for pfilter
#
#   This script makes/adjusts the /etc/pfilter.conf server pfilter configuration file,
#   (re)starts the pfilter service on this server using the /etc/pfilter.conf file,
#   and makes/adjusts the /etc/pfilter.conf.clients client pfilter configuration file.
#
#   Note that this does NOT copy out the pfilter configuration file for the clients.

use strict;
use Carp;
use lib '/usr/lib/systeminstaller';
use SystemInstaller::Machine;
use File::Copy;
use SIS::Image;
use SIS::DB;


# function to return a sorted, unique lines only version of a passed list

sub sort_uniq {
    my ( @input_list ) = @_;
    my %seen;
    foreach my $value ( @input_list ) {
	$seen{$value}++;
    }
    return sort ( keys %seen );
}

# Use Schwartzian transform to sort node names alphabetically and numerically.
# Names w/o numeric suffix preceed those with numeric suffix.
sub sortnodes(@) {
	return map { $_->[0] }
	       sort { $a->[1] cmp $b->[1] || ($a->[2]||-1) <=> ($b->[2]||-1) }
	       map { [$_, /^([\D]+)([\d]*)$/] }
	       @_;
}

#=================================================================

# define the name of the pfilter configuration file

my $server_file = "/etc/pfilter.conf";
my $clients_file = "$server_file.clients";

#=================================================================

# find the names of the compute nodes

my %nodes = get_machine_listing();
my @nodes = sortnodes( keys %nodes );
chomp @nodes;

#=================================================================

# find the name of this installation server

my $hostname = `hostname`;
chomp $hostname;

#=================================================================

# try to determine the network interface name for the cluster
# and setup some string variables for the dhcp opening line 
# in /etc/pfilter.conf

my $on_interface = "";
if ( exists $ENV{OSCAR_HEAD_INTERNAL_INTERFACE} &&
     $ENV{OSCAR_HEAD_INTERNAL_INTERFACE} ne "" ) {
    $on_interface = "on      $ENV{OSCAR_HEAD_INTERNAL_INTERFACE}";
} else {
    print "Warning, $0 cannot determine the cluster interface name,\n";
    print "DHCP packets will be seen on this server from all network interfaces.\n";
}

#=================================================================

# save an unmodified copy of the server configuration file,
# if this is the first time we are modifying it

if ( -f $server_file && ! -f "$server_file.pre_oscar" ) { 
    my $command = "cp -p $server_file $server_file.pre_oscar";
    print "$command\n";
    system $command;
}

# read in the current server configuration file

open(SERVER, "$server_file") 
    or croak("post_clients: cannot read pfilter configuration file $server_file\n");
my @conf_lines = <SERVER>;    # slurp in configuration file lines
close(SERVER);
chomp @conf_lines;          # lop off new-line characters at end of lines

# see if we already munched the server configuration file,
# if so, just update the server and node lines, if not, 
# append all our stuff to the end

if ( grep( /^\%define oscar_server/, @conf_lines ) ) {

    print "Updating already modified pfilter configuration file $server_file\n";
    foreach my $conf_line ( @conf_lines ) {
	$conf_line =~ s/^\%define oscar_server .*$/%define oscar_server $hostname/;
	$conf_line =~ s/^\%define nodes .*$/%define nodes @nodes/;
    }
    open(SERVER, ">$server_file") 
	or croak("post_clients: cannot write modified pfilter configuration file $server_file\n");
    foreach my $conf_line ( @conf_lines ) { print SERVER "$conf_line\n" };
    close(SERVER);
    
} else {

    open(SERVER, ">>$server_file") 
	or croak("post_clients: cannot append to pfilter configuration file $server_file\n");
    print "Adding OSCAR section to pfilter configuration file $server_file\n";
    print SERVER <<ENDIT;

# This is the beginning of the section addded by OSCAR

# define the main OSCAR server

%define oscar_server $hostname

# define the OSCAR compute nodes (this is updated when
# compute nodes are added or taken away)

%define nodes @nodes

# We don't want future pfilter updates to merge commented out
# new types of configuration directives when pfilter is upgraded.

nomerge

# We don't trust anyone anywhere on any interface by default

untrusted  interfaces  all

# We don't want to fill up system log files with packet
# rejection messages

nologging

# Be nice and reject, rather than drop, unwanted packets

reject

# let anyone ping the server

open    ping

# let anyone ssh into the server

open    ssh

# the server gets http opened up

open    tcp     http https

# the server needs to be listed as a dhcp server for the nodes
# because opening up that service requires opening up some
# broadcast stuff as well, so simply listing the nodes as
# trusted is not sufficient

open    dhcp    $on_interface

# open up rsync port, otherwise deployment might freeze

open    rsync   $on_interface

# the server and every compute node trust each other

trusted %oscar_server% %nodes%

# for ganglia and multicast deployment
# WARNING: flamethrower requires more ports to be open!

open    multicast   $on_interface

#
# This is the end of the section added by OSCAR
ENDIT
    close(SERVER);
}

#=================================================================

# read in the current clients configuration file, if there

my @client_lines = ();
if ( -f $clients_file  ) { 
    open(CLIENTS, "$clients_file") 
	or croak("post_clients: cannot read pfilter configuration file $clients_file\n");
    @client_lines = <CLIENTS>;    # slurp in configuration file lines
    close(CLIENTS);
    chomp @client_lines;          # lop off new-line characters at end of lines
}

# see if we already munched the clients configuration file,
# if so, just update the server and node lines, if not, 
# append all our stuff to the end

if ( grep( /^\%define oscar_server/, @client_lines ) ) {

    print "Updating already modified pfilter configuration file $clients_file\n";
    foreach my $conf_line ( @client_lines ) {
	$conf_line =~ s/^\%define oscar_server .*$/%define oscar_server $hostname/;
	$conf_line =~ s/^\%define nodes .*$/%define nodes @nodes/;
    }
    open(CLIENTS, ">$clients_file") 
	or croak("post_clients: cannot write modified pfilter configuration file $clients_file\n");
    foreach my $conf_line ( @client_lines ) { print CLIENTS "$conf_line\n" };
    close(CLIENTS);
    
} else {

    open(CLIENTS, ">>$clients_file") 
	or croak("post_clients: cannot append to pfilter configuration file $clients_file\n");
    print "Adding OSCAR section to pfilter configuration file $clients_file\n";
    print CLIENTS <<ENDIT;

# This is the beginning of the section addded by OSCAR

# define the main OSCAR server

%define oscar_server $hostname

# define the OSCAR compute nodes (this is updated when
# compute nodes are added or taken away)

%define nodes @nodes

# We don't want future pfilter updates to merge commented out
# new types of configuration directives when pfilter is upgraded.

nomerge

# We don't trust anyone anywhere on any interface by default

untrusted  interfaces  all

# We don't want to fill up system log files with packet
# rejection messages

nologging

# Be nice and reject, rather than drop, unwanted packets

reject

# open ssh from anywhere

open	tcp	ssh

# the server and every compute node trust each other

trusted %oscar_server% %nodes%

# let us be pingable from everywhere

open    ping

#
# This is the end of the section added by OSCAR
ENDIT
    close(CLIENTS);
}

# (re)start the pfilter service

print "(re)starting the pfilter firewall service on this server\n";

my $command = "/etc/init.d/pfilter restart";
print "$command\n";
system( $command );

# copy client config to images
print "Copying pfilter configuration to images:\n";
my @images = list_image();
foreach my $image (@images) {
    my $dir = $image->location;
    print " -> $dir\n";
    copy($clients_file,"$dir/etc/pfilter.conf") or (carp "Can't copy $clients_file to $dir",
						    return undef);
}


exit 0;

