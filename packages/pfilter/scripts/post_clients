#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   post_clients for pfilter
#                        generates pfilter config file from clamdr entries

use strict;
use Carp;
use lib '/usr/lib/systeminstaller';
use SystemInstaller::Machine;

# function to return a sorted, unique lines only version of a passed list

sub sort_uniq {
    my ( @input_list ) = @_;
    my %seen;
    foreach my $value ( @input_list ) {
	$seen{$value}++;
    }
    return sort ( keys %seen );
}

# define the name of the pfilter configuration file

my $conf_file = "/etc/pfilter.conf";

# save an unmodified copy of the configuration file,
# if this is the first time we are modifying it

if ( -f $conf_file && ! -f "$conf_file.pre_oscar" ) { 
    print  "cp -p $conf_file $conf_file.pre_oscar\n";
    system "cp -p $conf_file $conf_file.pre_oscar";
}

# read in the current configuration file

open(CONF, "$conf_file") 
    or croak("config_server: cannot read pfilter configuration file $conf_file\n");
my @conf_lines = <CONF>; # slurp in configuration file lines
close(CONF);
chomp @conf_lines;       # lop off new-line characters at end of lines

# find the names of the compute nodes

my %nodes = get_machine_listing();
my @nodes = sort keys %nodes;
chomp @nodes;

# find the name of this installation server

my $hostname = `hostname`;
chomp $hostname;

# see if we already munched this file, if so,
# just update the server and node lines, if not, 
# append all our stuff to the end

if ( grep( /^\%define oscar_server/, @conf_lines ) ) {

    print "Updating already modified pfilter configuration file $conf_file\n";
    foreach my $conf_line ( @conf_lines ) {
	$conf_line =~ s/^\%define oscar_server .*$/%define oscar_server $hostname/;
	$conf_line =~ s/^\%define nodes .*$/%define nodes @nodes/;
    }
    open(CONF, ">$conf_file") 
	or croak("config_server: cannot write modified pfilter configuration file $conf_file\n");
    foreach my $conf_line ( @conf_lines ) { print CONF "$conf_line\n" };
    close(CONF);
    
} else {

    open(CONF, ">>$conf_file") 
	or croak("config_server: cannot append to pfilter configuration file $conf_file\n");
    print "Adding OSCAR section to pfilter configuration file $conf_file\n";
    print CONF <<ENDIT;

# This is the beginning of the section addded by OSCAR

# define the main OSCAR server

%define oscar_server $hostname

# define the OSCAR compute nodes (this is updated when
# compute nodes are added or taken away)

%define nodes @nodes

# We don't want future pfilter updates to merge commented out
# new types of configuration directives when pfilter is upgraded.

nomerge

# We don't trust anyone anywhere on any interface by default

untrusted  interfaces  all

# We don't want to fill up system log files with packet
# rejection messages

nologging

# Be nice and reject, rather than drop, unwanted packets

reject

# the server gets ssh and http opened up

open    tcp     ssh http https          %if %hostname% = %oscar_server%

# the server needs to be listed as a dhcp server for the nodes
# because opening up that service requires opening up some
# broadcast stuff as well, so simply listing the nodes as
# trusted is not sufficient

open    dhcp    from    %nodes%         %if %hostname% = %oscar_server%

# the server and every compute node trust each other

trusted %oscar_server% %nodes%

#
# This is the end of the section added by OSCAR
ENDIT
    close(CONF);
}

exit 0;

