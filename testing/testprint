#!/usr/bin/perl

#   $Header: /home/user5/oscar-cvsroot/oscar/testing/testprint,v 1.5 2002/11/07 20:37:17 mchasal Exp $

#   Copyright (c) 2001 International Business Machines
#   Copyright (c) 2002 The Trustees of Indiana University.  
#                      All rights reserved.

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use Carp;
use AppConfig qw(:argcount);
use Term::ANSIColor qw(:constants);
use Term::Cap;
use Data::Dumper;
require POSIX;


my $options=AppConfig->new(
		Help=>{ ARGCOUNT=> ARGCOUNT_NONE,
                ALIAS => "h"},
		label=>{ ARGCOUNT=> ARGCOUNT_ONE,
                 ALIAS => "l"},
		status=>{ ARGCOUNT=> ARGCOUNT_ONE,
                  ALIAS => "s"},
		pass=> {ARGCOUNT=> ARGCOUNT_NONE,
                ALIAS => "p"},
		fail=> {ARGCOUNT=> ARGCOUNT_NONE,
                ALIAS => "f"},
		skipped=> {ARGCOUNT=> ARGCOUNT_NONE},
		);

unless ($options->getopt()){
	&usage;
	exit 1;
}

if (&check_args) {
	&usage;
	exit 1;
}

if ($options->Help){
	&usage;
	exit 0;
}
my $termios = new POSIX::Termios;
$termios->getattr;
my $ospeed = $termios->getospeed;
my $term=Term::Cap->Tgetent({OSPEED => $ospeed});
#This should reset to the front of line
#but I can't get it working, the last print does
#it, but may not be portable.
#my $clrstr=$term->Tgoto('ch',1,0);
#print $clrstr;
print "\033[1G"; # jump to the beginning of line

# Stty is used here since some distros don't provide
# the Term::ReadKey module which has a nice function
# for this. Oh well.
my $output=`stty size`;
chomp($output);
my ($hchar, $wchar) = split(/ /,$output);
unless ($wchar) {
        $wchar=60;
}
my $columns=int(($wchar-17)/2);
printf ("%-${columns}.${columns}s %-${columns}.${columns}s",$options->label,$options->status);

if ($options->fail) {
        print "[";
        print BOLD, RED, "FAILED", RESET;
        print "]\n";
} elsif ($options->pass) {
        print "[";
        print BOLD, GREEN, "PASSED", RESET;  
        print "]\n";
} elsif ($options->skipped) {
        print "[";
        print BOLD, YELLOW, "SKIPPED", RESET;  
        print "]\n";
}
exit 0; 

sub check_args {

        my $fail=0;
	if (($options->pass) && ($options->fail)){
                carp("Only one of --pass, --fail, or --skipped may be specified.");
                $fail++;
        }
        unless($options->label) {
                carp("--label must be specified.");
                $fail++;
        }
	return $fail;

}# check_args

sub usage {
    my $progname = $0;
    if ($progname =~ m/(.+\/)(\w+)/) {
	$progname = $2;
    }
    print <<USAGE;
usage: $progname <options>

  options
    --status "<status text>"     The text to print for status.
    --label "<label text>"       The text to print for the label.
    --pass                       Print successful result.
    --fail                       Print failure result.
    --skipped                    Print skipped result.


USAGE
} #usage

