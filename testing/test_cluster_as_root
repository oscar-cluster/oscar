#!/bin/sh
#
# $Id: test_cluster_as_root,v 1.11 2002/08/13 02:03:25 bligneri Exp $
#
# test_cluster_as_root - script to test services, NFS, 
#                        and install/run user level tests
# Authors: Jason Brechin
#          Jeremy Enos

dir=`pwd`

if [ $# -gt 0 ] && [ $1 = --wait ]; then
  wizard_launch=yes
  shift
fi


# Initialize some functions (should work for RedHat and Mandrake)
source /etc/rc.d/init.d/functions #must be sourced before /etc/profile
source /etc/profile

function waitexit
{
        # Function to wait for a key press before
        # exiting. Used by guis.
        if [ $wizard_launch ] && [ $wizard_launch = yes ]; then
          echo ...Hit a key to exit...
          read -n 1 -s  key
        fi
        exit 0
}

if [ $# -eq 0 ]; then
  # Get cluster info from user
  echo -n "Enter the number of client nodes: "
  read clients
  echo -n "Enter the number of processors per client: "
  read ppn
elif [ $# -ne 2 ]; then
  echo "usage: $0 [<num clients> <num procs/client>]"
  exit 1
else
  clients=$1
  ppn=$2
fi

echo -e "\t\t\tROOT TESTS"
echo -e "\t\t\t----------"

#			SERVICES RUNNING
#			----------------
# Checks status of services listed below.  If they are not running, it
# tries to start them, then checks again if they are running.  If unsuccessful
# on any test, it dumps out
#pfilteron=0
#if [ `/sbin/service pfilter status | grep -c "is running"` -ne 0 ]; then
#  pfilteron=1
#fi

# Stop PBS Server if any nodes exhibit "state-unknown" status.
# This condition could be due to the 5 minute polling interval to the moms
# by the server.  Restarting the server will induce a fresh poll.
unknown_nodes=`/opt/pbs/bin/pbsnodes -a |grep -c state-unknown`
if [ $unknown_nodes != 0 ] ; then
  echo "Found $unknown_nodes nodes in unknown state.  Stopping PBS server to invoke a poll."
  /sbin/service pbs_server stop
fi

for serv in sshd pbs_server maui ; do
  if [ `/sbin/service $serv status | grep -c "is running"` -eq 0 ]; then
    # Let's try to restart the service
    /sbin/service $serv start
    if [ `/sbin/service $serv status | grep -c "is running"` -eq 0 ]; then
      echo "Could not restart $serv, please check configuration and rerun tests"
      waitexit 1
    else
      echo -n "$serv service:"
      echo_success
      echo
    fi
  else
    echo -n "$serv service:"
    echo_success
    echo
  fi
done

#			HOME MOUNT CHECK
#			----------------
# Tests to make sure /home is NFS mounted and current
`touch /home/OSCARtestfile`
sleep 2
command='if [ -e /home/OSCARtestfile ]; then echo "1"; else echo "0"; fi'

mounted=0
# Grab all the node hostnames from pbsnodes
for node in `/opt/pbs/bin/pbsnodes -a | /bin/grep -B1 'state = free' | /bin/egrep '^\w+' | /usr/bin/tac`; do 
  if [ "x`ssh $node $command 2>/dev/null`" != "x1" ]; then
    echo "/home not mounted on $node"
  else
    mounted=`/usr/bin/expr $mounted + 1`
  fi
done

echo -n "/home mounted on $mounted free nodes, need $clients:"
`rm -f /home/OSCARtestfile`
if [ $mounted -gt $clients ] || [ $mounted -eq $clients ]; then
  echo_success
  echo
else
  echo_failure
  echo
  waitexit
fi

#			USER TESTS
#			----------
echo
echo -n "Preparing user tests..."

# Checks for existence of $test_user and its home directory and
# copies the test suite

test_user=oscartst
test_user_homedir=`grep $test_user /etc/passwd |awk -F : '{print $6}'`
# if not existent, we make $test_user
if [ -z $test_user_homedir ]; then
  /usr/sbin/useradd -m $test_user > /dev/null 2>&1
  test_user_homedir=`grep $test_user /etc/passwd |awk -F : '{print $6}'`
  /bin/rm -rf $test_user_homedir/OSCAR_test
  /opt/opium/bin/sync_users --force > /dev/null 2>&1
fi

# Make sure ssh keys are generated quietly
/bin/su -c '' - $test_user > /dev/null 2>&1
# Copy test files to $test_user's homedir
grp=`id -g $test_user`
/bin/cp -a $dir/OSCAR_test $test_user_homedir
/bin/chown -R $test_user:$grp $test_user_homedir/OSCAR_test > /dev/null 2>&1

# Clean up "Preparing user tests..." message to save screen space
echo -n -e "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
echo -n "                       "
echo -n -e "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
# Run user portion as the user for a valid test
/bin/su -c "OSCAR_test/test_cluster $clients $ppn" - $test_user

#if [ $pfilteron -eq 0 ]; then
#  `/sbin/service pfilter stop`
#fi

waitexit
