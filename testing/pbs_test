#!/bin/sh

. /etc/profile

qsub='/opt/pbs/bin/qsub'
qstat='/opt/pbs/bin/qstat'


# Check usage (since this can be run seperately)
if [ $# -eq 0 ]; then
  # Get cluster info from user
  echo -n "Enter the number of client nodes: "
  read clients
  
  echo -n "Enter the number of processors per client: "
  read ppn
  
  echo -n "Enter the full path to the script to be run: "
  read pbs_script
  
  echo -n "Enter the string that we should search for: "
  read grep_string
  
  echo -n "Enter the name of the output file (defaults to the script name): "
  read output
  opt=${output:=$pbs_script}

  echo -n "Enter a time scaling factor (Default is 3): "
  read scaling_factor
  opt=${scaling_factor:=3}

  echo -n "Enter a test name (Default is "PBS TEST"): "
  read pbs_test_type
  opt=${pbs_test_type:="PBS TEST"}
elif [ $# -lt 4 ]; then
  echo "usage: $0 [<num clients> <num procs/client> <script> <searchstring> (outputfile) (time scale) (test name)]"
  exit 1
else
  clients=$1
  ppn=$2
  pbs_script=$3
  grep_string=$4
  opt=$5
  output=${opt:=$pbs_script}
  opt=$6
  scaling_factor=${opt:=3}
  opt=$7
  pbs_test_type=${opt:="PBS TEST"}
fi

#echo "scalingfactor is $scaling_factor"
#echo "output is $output"
#exit

numprocs=`echo "$clients $ppn * p" | /usr/bin/dc`
script_name=`basename $pbs_script`

function waitexit {
        # Function to wait for a key press before
        # exiting. Used by guis.
        if [ $wizard_launch ] && [ $wizard_launch = yes ]; then
          echo ...Hit a key to exit...
          read -n 1 -s  key
        fi
        exit 0
}

function calc_timeout {
  if [ ! $min_timeout ]; then min_timeout=30; fi
  if [ ! $scaling_factor ]; then scaling_factor=3; fi
  timeout=`echo "$numprocs $scaling_factor * p" | /usr/bin/dc | cut -d . -f 1`
  if [ $timeout -lt 30 ] || [ $timeout -lt $min_timeout ]; then
    if [ $min_timeout -gt 30 ]; then
      timeout=$min_timeout;
    else
      timeout=30;
    fi
  fi
}              

function check_free_nodes () {
  free=`/opt/pbs/bin/pbsnodes -a | grep -c 'state = free'`
  if [ $free -eq $clients ] || [ $free -gt $clients ]; then  
    # at least $clients free nodes
    echo -n ""
  else
    testprint --label "Checking for $clients free nodes:" --fail
    echo Not enough free nodes.  Tests incomplete.
    waitexit
  fi
}
        
#     PBS TEST ROUTINE
#     ----------------
# Generic routine to run any test through PBS depending on environment
pbs_test_routine () {
  sleep 1
  calc_timeout
  check_free_nodes
  testprint --label "$pbs_test_type"
  cd `dirname $pbs_script`
  if [ -f $output.out ]; then /bin/rm -f $output.out; fi
  if [ -f $output.err ]; then /bin/rm -f $output.err; fi
  job=`$qsub -l nodes=$clients:ppn=$ppn $pbs_script`
  # Check that job submitted properly
  if [ -z $job ]; then 
    testprint --label "$pbs_test_type" --fail
  else
    timeleft=$timeout
    job_state=incomplete
    while [ $job_state = incomplete ]; do
      # Displays remaining seconds
      testprint --label "$pbs_test_type" --status "$timeleft"
      sleep 1
      # Tests for success or timeout
      if [ -f "$output.out" ]; then
        grep "$grep_string" "$output.out" > /dev/null
        string_test=$?
        if [ $string_test = 0 ]; then
          job_state=success
          testprint --label "$pbs_test_type" --pass
        else
          timeleft=0
        fi
      fi
      if [ $timeleft -eq 0 ]; then  #more than timeout
        testprint --label "$pbs_test_type" --fail
        job_state=fail
        if [ `/opt/pbs/bin/qstat |grep -c $job` -eq 1 ]; then
          /opt/pbs/bin/qdel $job
          sleep 1 # Allows nodes to free up again
        fi
        if [ $exit_on_fail = yes ]; then waitexit ; fi
      fi
      timeleft=`expr $timeleft - 1`
    done
  fi
  unset min_timeout
  cd ..
}


pbs_test_routine
