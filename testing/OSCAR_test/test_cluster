#!/bin/sh
#
# $Id: test_cluster,v 1.14 2002/07/28 05:50:24 jsquyres Exp $
#
# test_cluster - script to test MPI, PVM, & PBS
# Authors: Jason Brechin
#          Jeremy Enos

#test to make sure root is not running this script
if [ `id -un` = root ] ; then 
  echo "This test script MUST be run from a user account."
  echo "Exiting..."
  exit 1
fi

function waitexit
{
        # Function to wait for a key press before
        # exiting. Used by guis.
        if [ $wizard_launch ] && [ $wizard_launch = yes ]; then
          echo ...Hit a key to exit...
          read -n 1 -s  key
        fi
        exit 0
}


# Initialize environment
qsub=/opt/pbs/bin/qsub
qstat=/opt/pbs/bin/qstat
homedir=~/OSCAR_test
cd $homedir

# Check usage (since this can be run seperately)
if [ $# -eq 0 ]; then 
  # Get cluster info from user
  echo -n "Enter the number of client nodes: "
  read clients
  echo -n "Enter the number of processors per client: "
  read ppn
elif [ $# -ne 2 ]; then
  echo "usage: $0 [<num clients> <num procs/client>]"
  exit 1
else
  clients=$1
  ppn=$2
fi

numprocs=`/usr/bin/expr $clients \* $ppn`
timeout=`/usr/bin/expr $numprocs \* 3`

if [ $timeout -lt 30 ]; then
  timeout=30
fi

# Initialize some functions (should work for RedHat and Mandrake)
source /etc/rc.d/init.d/functions

echo -e "\t\t\tUSER TESTS"
echo -e "\t\t\t----------"


#			DEFAULT PBS QUEUE
#			-----------------

echo -n "Checking PBS default queue definition:"
if [ `/opt/pbs/bin/qmgr -c "l s" | grep -c 'default_queue'` -eq 1 ]; then
  echo_success
  echo
else
  echo_failure
  echo
fi


#			SSH TESTS
#			---------
# Uses the server and free nodes starting from the end of the list (as PBS
# uses them).

node1=`/opt/pbs/bin/pbsnodes -a | /bin/grep -B1 'state = free' | /bin/egrep '^\w+' | /usr/bin/tail -1`

if [ `ping -c 1 $node1 2>/dev/null | grep -c avg` -eq 0 ]; then
  echo "No nodes free and pingable"
  waitexit
fi

echo -n "server -> node SSH:"
if [ "x`ssh $node1 hostname 2> /dev/null`" = "x$node1" ]; then
  echo_success
  echo
else
  echo_failure
  echo
  waitexit
fi

echo -n "node -> server SSH:"
server=`hostname`
testval=`ssh $node1 ssh $server hostname 2> /dev/null`
#echo "Testval is $testval"
if [ "x$testval" = "x$server" ]; then
  echo_success
  echo
else
  echo_failure
  echo
  waitexit
fi


if [ $clients -gt 1 ]; then # user specified more than one client, so
                            # we can do node -> node tests
  node2=`/opt/pbs/bin/pbsnodes -a | /bin/grep -B1 'state = free' | /bin/egrep '^\w+' | /usr/bin/tail -2 | /usr/bin/head -1`

  echo -n "node -> node SSH:"
  if [ "x`ssh $node1 ssh $node2 hostname 2> /dev/null`" = "x$node2" ]; then
    echo_success
    echo
  else
    echo_failure
    echo
    waitexit
  fi
fi 

#			PBSNODES FREE ROUTINE
#			---------------------
# Shows only failure to find free nodes
check_free_nodes () {
free=`/opt/pbs/bin/pbsnodes -a | grep -c 'state = free'`
if [ $free -eq $clients ] || [ $free -gt $clients ]; then    # at least $clients free nodes
echo -n ""
else
echo -n "Checking for $clients free nodes:"
  echo_failure
  echo
  echo Not enough free nodes.  Tests incomplete.
  waitexit
fi
}

#			PBS TEST ROUTINE
#			----------------
# Generic routine to run any test through PBS depending on environment
pbs_test_routine () {
sleep 1
check_free_nodes
echo -n $pbs_test_type
echo -n ":    "
cd $homedir/$test_dir
if [ -f $output_file.out ]; then /bin/rm -f $output_file.out; fi
if [ -f $output_file.err ]; then /bin/rm -f $output_file.err; fi
job=`$qsub -l nodes=$clients:ppn=$ppn $pbs_script`
# Check that job submitted properly
if [ -z $job ]
then
  echo_failure
  echo
else
  timeleft=$timeout
  job_state=incomplete
  while [ $job_state = incomplete ]; do 
  # Displays remaining seconds
    echo -n " $timeleft"
    if [ $timeleft -gt 99 ]; then
      echo -n " "
    elif [ $timeleft -gt 9 ]; then
      echo -n "  "
    else
      echo -n "   "
    fi
    echo -n -e "\b\b\b\b\b"
    sleep 1
  # Tests for success or timeout
    if [ -f $output_file.out ] ; then
      grep "$grep_string" $output_file.out > /dev/null
      string_test=$?
      if [ $string_test = 0 ] ; then
        job_state=success
        echo -n -e "\b\b\b      "
        echo_success
	echo
      fi
    fi
    if [ $timeleft -eq 0 ]; then # more than timeout
      echo -n -e "\b\b\b      "
      echo_failure
      echo
      job_state=fail
      if [ `/opt/pbs/bin/qstat |grep -c $job` -eq 1 ]; then
      /usr/local/pbs/bin/qdel $job
      sleep 1 # Allows nodes to free up again
      fi
      if [ $exit_on_fail = yes ]; then waitexit ; fi
    fi 
    timeleft=`expr $timeleft - 1`
  done
fi
cd ..
}

  
#			PBS SHELL TEST
#			--------------

pbs_test_type="Simple PBS shell job"
test_dir=shell
pbs_script=pbs_script.shell
output_file=shelltest
grep_string=Hello
exit_on_fail=yes
pbs_test_routine


#
# Setup MPI -- save any user default
#

user_default_mpi="`switcher mpi --show --user | grep default | cut -d= -f2`"


#			MPICH TEST
#			----------

mpich="`switcher mpi --list | grep mpich | head -1`"
switcher mpi --add-attr default $mpich --force
pbs_test_type="Simple PBS MPICH job"
test_dir=mpi
pbs_script=pbs_script.mpich
output_file=mpichtest
grep_string="pi is approx"
exit_on_fail=no
pbs_test_routine


#			LAM TEST
#			--------

mpich="`switcher mpi --list | grep lam | head -1`"
switcher mpi --add-attr default $mpich --force
pbs_test_type="Simple PBS LAM job"
test_dir=mpi
pbs_script=pbs_script.lam
output_file=lamtest
grep_string="pi is approx"
exit_on_fail=no
pbs_test_routine


#
# If there was a user-default MPI, restore it
#

switcher mpi --rm-attr default --force
if test "$user_default_mpi" != ""; then
    switcher mpi --add-attr default $user_default_mpi --force
fi


#			PVM TEST
#			--------

pbs_test_type="Simple PBS PVM job"
test_dir=pvm
pbs_script=pbs_script.pvm
output_file=pvmtest
grep_string=SUCCESSFUL
exit_on_fail=no
pbs_test_routine

# Done
waitexit

