#!/usr/bin/perl

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
 
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
 
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#   Copyright (c) 2003,2007 The Trustees of Indiana University.  
#                      All rights reserved.
#   Copyright (C) 2006 Bernard Li <bli@bcgsc.ca>
#                      All rights reserved.

# $Id$
#   This script performs tests on the cluster after it has been successfully
#   installed - tests to be executed are: root tests, user tests, and APItests

use strict;
use lib "$ENV{OSCAR_HOME}/lib",'/usr/lib/systeminstaller';

use Carp;
use File::Copy;
use SIS::Client;
use SIS::Image;
use SIS::DB;
use OSCAR::Database;
use OSCAR::Package;
use Data::Dumper;
use Getopt::Long;
use OSCAR::OCA::RM_Detect;

# We usually test the following packages and if there is more to test
# please add it with proper priority number(the hash value of the
# corresponding package name).
# The smaller the number is, the higer its prority is.
# e.g.,) maui has the highest priority and ganglia has the lowest.
my %sample_pkgs = ( 
                   "maui"    => 0,
                   "torque"  => 1,
                   "sge"     => 1,
                   "openmpi" => 2,
                   "lam"     => 2,
                   "mpich"   => 2,
                   "pvm"     => 3,
                   "ganglia" => 3,
                  );

my %opts = ();
unless (GetOptions(\%opts,"wait") ) {
        croak("Options incorrect.");
}

END{
	if ($opts{wait}) {
		my $check_string = "Please check for .err and .out files in /home/oscartst/<package>.";
		print "\n";
		if ( $? == 1 ) {
			print "There is $? failed/skipped test (see above).\n$check_string\n";
		} elsif ( $? == 255 ) {
			print "There are failed/skipped tests (see above).\n$check_string\n";
		} elsif ( $? == 0 ) {
			print "All tests passed, your OSCAR cluster is now ready to compute!\n\n";
			print "Please consider registering your OSCAR cluster at:\n";
			print "http://oscar.openclustergroup.org/register\n";
		} else {
			print "There are $? failed/skipped tests (see above).\n$check_string\n" if $?;
		}
	        print "\n...Hit <ENTER> to close this window...";
	        my $key=<STDIN>;
	}
}
 
# Use Schwartzian transform to sort clients by node names alphabetically and numerically.
# Names w/o numeric suffix precede those with numeric suffix.
sub sortclients(@) {
	return map { $_->[0] }
	       sort { $a->[1] cmp $b->[1] || ($a->[2]||-1) <=> ($b->[2]||-1) }
	       map { [$_, $_->name =~ /^([\D]+)([\d]*)$/] }
	       @_;
}

sub advanced_sort {
    $sample_pkgs{$a} <=> $sample_pkgs{$b}
    or
    $a cmp $b
}

my @clientlist;
if (@ARGV) {
        @clientlist=@ARGV;
} else {
        my @mlist = sortclients list_client();
        foreach my $m (@mlist) {
                push @clientlist,$m->hostname;
        }
}

# Generate the list of packages sorted by their priority
my @sorted_pkgs = sort advanced_sort keys %sample_pkgs;

my @pkgs_hash = list_selected_packages();
my @pkgs = ();
my $pkg_name = undef;
foreach my $pkg_ref (@pkgs_hash){
    $pkg_name = $$pkg_ref{package};
    push @sorted_pkgs, $pkg_name
        if !$sample_pkgs{$pkg_name};
    $sample_pkgs{$pkg_name} = "on";
    push @pkgs, $pkg_name;
}

my $return = 0;

print "Performing root tests...\n";
# First do the root tests
$ENV{OSCAR_TESTPRINT}="$ENV{OSCAR_HOME}/testing/testprint";
my $file;
my $script;
foreach my $pkg (@pkgs) {
    $file = "$pkg/testing/test_root";
    for my $dir (@OSCAR::PackagePath::PKG_SOURCE_LOCATIONS) {
	$script = "$dir/$file";
	if (-x $script) {
	    if (!run_pkg_user_test($script, "root", 0,
				   join(" ", @clientlist))) {
		$return++;
	    } 
	}
    }
}

# Setup the user environment
#

my $test_user="oscartst";
my ($tu,$tp,$tid,$tgid,$tq,$tcom,$tgcos,$test_user_homedir,$ts) =
    getpwnam $test_user;
unless ($test_user_homedir) {
          if (system("/usr/sbin/useradd -m $test_user")) {
                  croak("Unable to create test user: exiting.");
          }
	  # Mandriva's openssh versions newer than 3.6 block ssh from users with
	  # empty password. One solution for this is to unblock then manually:
	  if (-e "/etc/mandriva-release") {
		  system("/usr/bin/passwd -u $test_user -f");
	  }
	  my $opts = "";
	  $opts = "--add /etc/gshadow" if (-e "/etc/gshadow");
          if (system("/opt/sync_files/bin/confmgr --syncnow --force $opts > /dev/null 2>&1")) {
                  croak("Unable to replicate user out to oscar nodes (confmgr failed): exiting.");
          }
          ($tu,$tp,$tid,$tgid,$tq,$tcom,$tgcos,$test_user_homedir,$ts) = 
	      getpwnam $test_user;
}

# Check for a properly mounted /home dir

system("$ENV{OSCAR_TESTPRINT} --label '/home mounts'");
open(TFILE,">$test_user_homedir/oscartestfile");
print TFILE "OSCAR IS COOL\n";
close(TFILE);
sleep 2; #just in case
my $homecount=0;
foreach my $cli (@clientlist){
        system("$ENV{OSCAR_TESTPRINT} --label '/home mounts' --status '$cli'");
        if (system("ssh $cli ls $test_user_homedir/oscartestfile > /dev/null 2>&1")) {
                $homecount++;
        }
}
if ($homecount) {
        system("$ENV{OSCAR_TESTPRINT} --label '/home mounts' -s '$homecount nodes failed' -f ");
} else {
        system("$ENV{OSCAR_TESTPRINT} --label '/home mounts' -p ");
}
unlink("$test_user_homedir/oscartestfile");

# Now the user tests

my @ufiles;

print "\nPreparing user tests...\n";

$ENV{OSCAR_TESTPRINT}="$test_user_homedir/testprint";

# Open Resource Manager Framework
my $rm = OSCAR::OCA::RM_Detect::open();

@ufiles = qw(testprint ssh_user_tests test_cluster);

# Cleanup before copying base files
`rm -rf $test_user_homedir/*`;

# Copy the base files
foreach my $file (@ufiles) {
	copy("$ENV{OSCAR_HOME}/testing/$file",$test_user_homedir);
        chmod(0755,"$test_user_homedir/$file");
}

unless ($rm->{name} eq "None") {
    # Copy Resource Manager specific test script
    my $rm_test = $rm->{test};
    system("cp -a $rm_test $test_user_homedir") == 0 
        or croak("Failed to copy $rm_test to $test_user_homedir ".
                 "for Resource Manager $rm->{name}");
}

# Copy the packages test files to the user home dir.
foreach my $pkg (@pkgs) {
    foreach my $dir (@OSCAR::PackagePath::PKG_SOURCE_LOCATIONS) {
	if (-d "$dir/$pkg/testing") {
	    mkdir("$test_user_homedir/$pkg/");
	    # I know, shell badness, but so much easier than doing
	    # a recursive thing in perl.
	    system("cp -af $dir/$pkg/testing/* $test_user_homedir/$pkg/");
	}
    }
}

# Make sure all files/directories are owned by $test_user
system("chown -R $tid:$tgid $test_user_homedir");

# First test ssh
#
# Make sure ssh keys are generated quietly
system("/bin/su -c '' - $test_user > /dev/null 2>&1");

my $clistring=join(" ",@clientlist);

print "Performing user tests...\n";

my $script = "$test_user_homedir/ssh_user_tests";
my $rc = system("su --command='OSCAR_TESTPRINT=$ENV{OSCAR_TESTPRINT} OSCAR_HOME=$ENV{OSCAR_HOME} $script $clistring' - $test_user");

my $creturn=0;

# Test packages with the sorted list
foreach my $pkg (@sorted_pkgs) {
    next if $sample_pkgs{$pkg} ne "on";
    $ENV{OSCAR_PACKAGE_TEST_HOME} = "$test_user_homedir/$pkg";
    if (-e "$ENV{OSCAR_PACKAGE_TEST_HOME}/test_user") {

    	if(!run_pkg_user_test("$ENV{OSCAR_PACKAGE_TEST_HOME}/test_user",$test_user,0,join(" ",@clientlist))) {
        	$creturn++;
    	}

    }
    delete $ENV{OSCAR_PACKAGE_TEST_HOME};
}

#
# APItest Additions
#  The prescribed directory structure for APItest usage by OPkgs is
#  to have the following batch file entry points for the given
#  testing types:
#     <pkgdir>/testing/install_tests.apb
#     <pkgdir>/testing/validation_tests.apb
#
# TODO deprecate old test fmt when existing have been converted to APItest
#

my $run_apitest_label=0;
my $areturn=0;

#
# Run all the APItest - Installation Tests ('test_install.apb')
#

my $test_type = "Installation";
foreach my $pkg (@pkgs) {
	my $file = "$pkg/testing/install_tests.apb";

	for my $dir (@OSCAR::PackagePath::PKG_SOURCE_LOCATIONS) {
		my $test = "$dir/$file";
		if( -e $test ) {

			# Print leading label only if have some tests to run :)
			print "\nRun APItests...\n" if( $run_apitest_label == 0 );
			$run_apitest_label=1;

			print "\nRunning $test_type tests for $pkg\n";
			$areturn++ if (!run_pkg_apitest_test($test, "root", 0));
		}
	}
}

#
# Run all the APItest - Validation Tests ('test_validate.apb')
#

my $test_type = "Validation";
foreach my $pkg (@pkgs) {
	my $file = "$pkg/testing/validation_tests.apb";

	for my $dir (@OSCAR::PackagePath::PKG_SOURCE_LOCATIONS) {
		my $test = "$dir/$file";
		if( -e $test ) {

			# Print leading label only if have some tests to run :)
			print "\nRun APItests...\n" if( $run_apitest_label == 0 );
			$run_apitest_label=1;

			print "\nRunning $test_type tests for $pkg\n";
			$areturn++ if (!run_pkg_apitest_test($test, "root", 0));
		}
	}
}

# Sum the (errors) return codes for root/user/apitest tests
$return += $creturn + $areturn; 

exit $return;
