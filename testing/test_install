#!/bin/sh

source /etc/profile

dir=$1
shift

# test_install - script to install the OSCAR cluster test
# Author: Michael Brim

function waitexit
{
	# Function to wait for a key press before
	# exitting. used by guis.
	# Usage: waitexit <rc> <--wait>
        if [[ $2 == "--wait" ]]
        then
                echo ...Hit a key to exit...
                read -n 1 -s  key
        fi
	exit $1
}

# check PBS configuration
echo "Checking to make sure PBS is running & configured..."

ps -A | grep pbs_server > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "...pbs_server is not running, trying to start"
  /etc/rc.d/init.d/pbs_server start
  ps -A | grep pbs_server > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "...could not start pbs_server, exiting"
    waitexit 1 $1
  fi
else
  echo "...pbs_server is running"
fi

ps -A | grep maui > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "...MAUI scheduler is not running, trying to start"
  /etc/rc.d/init.d/maui start
  ps -A | grep maui > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "...could not start MAUI scheduler, exiting"
    waitexit 1 $1
  fi
else
  echo "...MAUI scheduler is running"
fi

config=0

/usr/local/pbs/bin/qmgr -c "p s" | grep "workq enabled = True" > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "...queue workq not enabled, PBS configuration incomplete"
  config=1
fi

/usr/local/pbs/bin/qmgr -c "p s" | grep "workq started = True" > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "...queue workq not started, PBS configuration incomplete"
  config=1
fi

/usr/local/pbs/bin/qmgr -c "p s" | grep "server scheduling = True" > /dev/null 2>&1
if [ $? -ne 0 ]; then
  echo "...server not scheduling, PBS configuration incomplete"
  config=1
fi

if [ $config -eq 1 ]; then 
  echo "...trying to update PBS configuration"
  oscarroot=`basename ..`
  pbsdir="$oscarroot/pbs"
  echo "...using PBS configuration file in $pbsdir/config/ for update"
  /usr/local/pbs/bin/qmgr < $pbsdir/config/pbs_server.conf
  if [ $? -eq 0 ]; then
    echo "...PBS configuration updated"
  else
    echo "...could not update PBS configuration, exiting"
    waitexit 1 $1
  fi
else
  echo "...PBS configuration is OK"
fi

# install software
echo
echo "About to install the OSCAR cluster test software"
echo
echo "In order to test your OSCAR cluster, you will need"
echo "to run the OSCAR cluster test as a non-root user."
echo "Please enter the name of the user for which you"
echo "wish to run the tests as. If you supply a user"
echo "name for which no account exists, one will be "
echo "created for you, and you will be prompted to enter"
echo "a password for the new account."
echo
echo -n "User Account: "
read user
echo

temp=`cat /etc/passwd | awk -F: '{print $1}' | grep $user`
if [ $? -eq 1 ]; then
  echo "User $user does not exist, creating new account..."
  /usr/sbin/useradd -m $user
  if [ $? -ne 0 ]; then
    echo "unable to create new user $user"
    waitexit 1 $1
  fi
  echo "successfully created account for new user $user"
  /usr/bin/passwd $user
  if [ $? -ne 0 ]; then
    echo "Unable to set passwd for new user $user, please"
    echo "do this yourself using the 'passwd' command."
    echo "You will also need to distribute the new password"
    echo "files (/etc/passwd, /etc/group, /etc/shadow, &"
    echo "/etc/gshadow) using 'cpush'. See the 'cpush' man"
    echo "page for additional help."
  else #push passwd files
    echo -n "updating password files across cluster..."
    $C3_DIR/bin/cpush -s /etc/passwd -e /etc/passwd > /dev/null 2>&1
    $C3_DIR/bin/cpush -s /etc/group -e /etc/group > /dev/null 2>&1
    if [ -f /etc/shadow ]; then
      $C3_DIR/bin/cpush -s /etc/shadow -e /etc/shadow > /dev/null 2>&1
      $C3_DIR/bin/cpush -s /etc/gshadow -e /etc/gshadow > /dev/null 2>&1
    fi
    echo "done"
  fi
fi
echo
echo -n "Installing software into /home/$user..."
/bin/cp -a $dir/OSCAR_test /home/$user/
/bin/chown -R $user /home/$user/OSCAR_test
grp=`/usr/bin/id -g $user`
/bin/chgrp -R $grp /home/$user/OSCAR_test
echo "done"
echo
echo "The OSCAR cluster test software has been installed in the"
echo "directory /home/$user/OSCAR_test. For instructions on testing"
echo "your cluster, see the README in that directory."

waitexit 0 $1
