#!/usr/bin/perl

#   $Id$

# Copyright (c) 2008 Geoffroy Vallee <valleegr@ornl.gov>
#                    Oak Ridge National Laboratory

# Copyright (c) 2007 Erich Focht <efocht@hpce.nec.com>

# Copyright (c) 2005,2006 Bernard Li <bli@bcgsc.ca>

# Copyright (c) 2003, The Board of Trustees of the University of Illinois.
#                     All rights reserved.

#   Copyright (c) 2001 International Business Machines

# Copyright (c) 2007 The Trustees of Indiana University.  
#                    All rights reserved.

#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.

#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

BEGIN {
    if (defined $ENV{OSCAR_HOME}) {
        unshift @INC, "$ENV{OSCAR_HOME}/lib";
    }
}

use strict;
use v5.10.1; # Switch
# Avoid smartmatch warnings when using given
no if $] >= 5.017011, warnings => 'experimental::smartmatch';
use vars qw($config);
use lib "/usr/lib/systemconfig";
use SystemInstaller::Env;
use SystemInstaller::Log qw(start_verbose stop_verbose verbose);
use Carp;
use File::Copy;
use File::Path;
use AppConfig qw(:argcount);
use POSIX;
use warnings "all";

use OSCAR::Database;
use OSCAR::OCA::OS_Detect;
use OSCAR::OCA::OS_Settings;
use OSCAR::SystemServices;
use OSCAR::SystemServicesDefs;

my $ARCH=(uname)[4]; # Default architecture
$ARCH =~ s/i.86/i386/;
my $install_mode = OSCAR::Database::get_install_mode(undef, undef);
my $os = OSCAR::OCA::OS_Detect::open();
if (!defined $os) {
    die "ERROR: Impossible to detect the local distribution";
}
my $is_suse = 1 if ($os->{'distro'} eq "suse");
my $tftpboot = OSCAR::OCA::OS_Settings::getitem("tftp_dir");

my $options=AppConfig->new(
        Help=>{ ARGCOUNT=> ARGCOUNT_NONE,
                        ALIAS => "h"},
        arch=>{ ARGCOUNT=> ARGCOUNT_ONE,
                        ALIAS => "a"},
        uyok=>{ ARGCOUNT=> ARGCOUNT_NONE,
                        ALIAS => "u"},
        pxegrub=>{ ARGCOUNT=> ARGCOUNT_ONE,
                        ALIAS => "p"},
        verbose=> {ARGCOUNT=> ARGCOUNT_NONE,
                        ALIAS => "v"},
        );

unless ($options->getopt()) {
    &usage;
    exit 1;
}

unless (&check_args) {
    &usage;
    exit 1;
}

if ($options->Help) {
    &usage;
    exit 0;
}

if ($options->pxegrub) {
    require OSCAR::pxegrub;
    if (OSCAR::pxegrub::install_pxegrub ($options->pxegrub)) {
       die "ERROR: Impossible to setup PXEGrub ($options->pxegrub)";
    }
}

# Mandrake's tftp-server expects the tftpboot directory to be under /var/lib/,
# but OSCAR's standard location is simply under /.
# Most code by TJN, with mods by BLI
#if (-e "/etc/mandrake-release") {
#	my $root_tftp = "/tftpboot";
#        my $var_tftp = "/var/lib/tftpboot";
#
#        croak "Error: $! - $root_tftp\n" if( not -e $root_tftp );
#
#        my $symlinks_exist = eval { symlink("", ""); 1 };
#
#        if( $symlinks_exist && ! $@ ) {
#		if( ( not -l $var_tftp ) && ( -d $var_tftp ) ) {
#			# if $var_tftp is a directory and not a link, remove
#			verbose("Removing directory $var_tftp.");
#			rmdir($var_tftp);
#		}
#                if( not -e $var_tftp ) {
#                        symlink($root_tftp, $var_tftp) or croak "Error: $!\n";
#                        verbose("Created symlink: $var_tftp => $root_tftp\n")
#                            if($? == 0);
#                }
#        } else {
#                  carp "Symlinks not supportted on this system! - $@\n";
#        }
#
#}


# OL: BUG: Need to fix atftpd TFTP_DIR in /etc/sysconfig/atftpd (rpm distro) and on debian as well.
verbose("Restarting atftpd");
!system_socket(TFTP(),RESTART())
    or croak "ERROR: Couldn't restart tftp service.";
verbose("Enabling atftpd");
!enable_system_sockets( (TFTP()) )
    or croak("Failed to enable atftpd");

#verbose("Restarting si_netbootmond");
#!system_service(SI_NETBOOTMOND,RESTART)
#    or croak "ERROR: Couldn't restart si_netbootmond service.";

#verbose("Enabling si_netbootmond");
#!enable_system_services( SI_NETBOOTMOND )
#    or croak("Failed to enable si_netbootmond");

verbose("Creating directories.");
#my $netboot_cfg_d = "/tftpboot/pxelinux.cfg";
my $netboot_cfg_d = OSCAR::OCA::OS_Settings::getitem("pxe_configdir");

my $kboot_cfg_d = "/etc/systemimager/kboot.cfg";
$kboot_cfg_d = "/tftpboot/kboot.cfg" if ($ARCH eq "ppc64" && -d $kboot_cfg_d );

mkpath($netboot_cfg_d);
unless (-d $netboot_cfg_d) {
	 croak("Unable to create $netboot_cfg_d directories.");
}

my $archdir = "$ARCH-boot";

my $monitor_port = 8181;

# Need to get the IP address of headnode (oscar_server)
my @result = ();
my $node = "oscar_server";
my $iface = OSCAR::Database::get_headnode_iface(undef, undef);
if ( !defined $iface ) {
    die "ERROR: Impossible to get the network interface id used by OSCAR";
}
my %db_options = ();
my @db_errors = ();

if (OSCAR::Database::get_nics_with_name_node($iface,
                                             $node,
                                             \@result,
                                             \%db_options,
                                             \@db_errors) != 0) {
    die "ERROR: Impossible to get the network interface id we have to use on ".
        "compute nodes ($node, $iface)";
}

if (scalar (@result) == 0) {
    die "ERROR: Can't get oscar_server nodes nic ip address from OSCAR database.";
}

my $node_ref = pop @result;
my $ip = $$node_ref{ip};
#my $pxelinux_dir = "/usr/lib/syslinux"; # default directory containing pxelinux.0
#my $pxelinux_bin = "pxelinux.0"; # default binary name for pxelinux.0 boot code.
my $pxelinux_dir = OSCAR::OCA::OS_Settings::getitem("pxe_dir"); # default directory containing pxelinux.0
my $pxelinux_bin = OSCAR::OCA::OS_Settings::getitem("pxe_bootbin"); # default binary name for pxelinux.0 boot code.

if (! -e "$pxelinux_dir/$pxelinux_bin") {
    die "ERROR: $pxelinux_dir/$pxelinux_bin does not exist";
}

if (($ARCH eq "i386") || ($ARCH eq "x86_64")) {
    verbose("Getting $pxelinux_bin.");
    copy("$pxelinux_dir/$pxelinux_bin", "$tftpboot/pxelinux.0") or
        croak("ERROR: Unable to copy \"$pxelinux_bin\" file to $tftpboot.");

    verbose("Copying default pxelinux.cfg file");
    copy("/etc/systemimager/pxelinux.cfg/syslinux.cfg", 
         "$netboot_cfg_d/default") 
        or croak("ERROR: Unable to copy \"default\" file to $netboot_cfg_d.");

    # SystemImager supports putting local configuration in floppy disk, however,
    # OSCAR does not support this and when installing on systems without floppy
    # disk drives, it would try forever to probe for the drive.  The
    # SKIP_LOCAL_CFG prevents this from happening.
    verbose("Updating $netboot_cfg_d/default file to skip local.cfg and support si_monitor.");
    if ( system("sed 's|root=/dev/ram|root=/dev/ram SKIP_LOCAL_CFG=y MONITOR_SERVER=$ip MONITOR_CONSOLE=yes|g' $netboot_cfg_d/default > $netboot_cfg_d/default.new && mv $netboot_cfg_d/default.new $netboot_cfg_d/default") ) {
      croak("ERROR: Unable to update $netboot_cfg_d/default file to skip local.cfg and support si_monitor.");
    }

    if (defined $install_mode && $install_mode eq "systemimager-bt") {
      verbose("Updating $netboot_cfg_d/default to support $install_mode.");
      if ( system("sed 's|root=/dev/ram|root=/dev/ram BITTORRENT=y|g' $netboot_cfg_d/default > $netboot_cfg_d/default.new && mv $netboot_cfg_d/default.new $netboot_cfg_d/default") ) {
        croak("ERROR: Unable to update $netboot_cfg_d/default to support $install_mode.");
      } 
    } else {
      if ( system("sed 's| BITTORRENT=y||g' $netboot_cfg_d/default > $netboot_cfg_d/default.new && mv $netboot_cfg_d/default.new $netboot_cfg_d/default") ) {
        croak("ERROR: Unable to remove BITTORRENT kernel append from $netboot_cfg_d/default.");
      }
    }

    # on x86_64 disable non-executable mappings
    # (otherwise grubs older than FC4 will segfault)
    if ($ARCH eq "x86_64") {
	verbose("Disabling nonexec mappings on x86_64");
	if ( system("sed 's/ram\ MONITOR/ram noexec=off MONITOR/g' $netboot_cfg_d/default >$netboot_cfg_d/default.new && mv $netboot_cfg_d/default.new $netboot_cfg_d/default") ) {
	    croak("Unable to modify $netboot_cfg_d/default.");
	}
    }

    verbose("Copying SystemImager's message.txt to $netboot_cfg_d");
    copy("/etc/systemimager/pxelinux.cfg/message.txt", "$netboot_cfg_d/") or 
      croak("Unable to copy \"message.txt\" file to $netboot_cfg_d.");
} elsif ($ARCH eq "ia64") {
    verbose("Copying elilo.efi to $tftpboot");
    copy("/boot/efi/elilo.efi","$tftpboot") or
      copy("/boot/efi/EFI/redhat/elilo.efi","$tftpboot") or
      croak("Unable to copy \"elilo.efi\" to $tftpboot");

    verbose("Writing out \"elilo.conf\" file with si_monitor support");
    open(OUT,">$tftpboot/elilo.conf") or croak("Couldn't open $tftpboot/elilo.conf for writing");
    print OUT "prompt\n";
    print OUT "timeout=50\n";
    print OUT "default=sisboot\n";
    print OUT "\n";
    print OUT "image=kernel\n";
    print OUT "\tlabel=sisboot\n";
    print OUT "\tinitrd=initrd.img\n";
    print OUT "\tread-only\n";
    print OUT "\tappend=\"root=/dev/ram MONITOR_SERVER=$ip MONITOR_CONSOLE=yes\"\n";

    # TODO: systemimager-bt support for IA64

} elsif ($ARCH eq "ppc64" && -d $kboot_cfg_d ) {
    verbose("Restarting dhcpd");
    !system_service(DHCP(),RESTART())
        or croak("Couldn't restart dhcpd");
    verbose("Copying default kboot.cfg file");
    copy("$kboot_cfg_d/default", "$netboot_cfg_d/default") or 
        croak("Unable to copy \"default\" file to $netboot_cfg_d.");
    verbose("Updating $netboot_cfg_d/default file to skip local.cfg and ".
            "support si_monitor.");
        if ( system("sed 's|SKIP_LOCAL_CONFIG=y|SKIP_LOCAL_CONFIG=y MONITOR_SERVER=\$imageserver MONITOR_CONSOLE=yes|g' $netboot_cfg_d/default > $netboot_cfg_d/default.new && mv $netboot_cfg_d/default.new $netboot_cfg_d/default") ) {
            croak("Unable to update $netboot_cfg_d/default file to skip local.cfg and support si_monitor.");
        }
    $ARCH = "ppc64-ps3" if (-d "/usr/share/systemimager/boot/ppc64-ps3");
} else {
    croak("$ARCH is not a known architecture");
}

my $bootpackage = "standard";
my $kernel = "/usr/share/systemimager/boot/$ARCH/$bootpackage/kernel";
my $ramdisk = "/usr/share/systemimager/boot/$ARCH/$bootpackage/initrd.img";
my $tftp_kernel = "install-kernel-$ARCH";
my $tftp_ramdisk = "install-initrd-$ARCH.img";

if ($options->uyok) {
    $bootpackage ="UYOK";
    $kernel = "/etc/systemimager/boot/kernel";
    $ramdisk = "/etc/systemimager/boot/initrd.img";
    $tftp_kernel = "install-kernel-$os->{'compat_distro'}-$os->{'compat_distrover'}-$ARCH";
    $tftp_ramdisk = "install-initrd-$os->{'compat_distro'}-$os->{'compat_distrover'}-$ARCH.img";

    verbose("Updating $netboot_cfg_d/default file to support UYOK ramdisk size.");
    # GV: Detect the freaking size rather than hardcode a size of 80000!!!!
    my $ramsize = 250000;
    my $cmd = "sed 's|root=/dev/ram|root=/dev/ram ramdisk_size=$ramsize|g' ".
              "$netboot_cfg_d/default > $netboot_cfg_d/default.new ".
              "&& mv $netboot_cfg_d/default.new $netboot_cfg_d/default";
    if ( system($cmd) ) {
        croak("Unable to update $netboot_cfg_d/default file to support ".
              "UYOK ramdisk size.");
    }
}

verbose("Copying SystemImager $bootpackage boot kernel and initrd.img to $tftpboot");
unlink "$tftpboot/kernel", "$tftpboot/initrd.img";
copy("$kernel", "$tftpboot/$tftp_kernel") or 
  croak("Unable to copy $bootpackage boot kernel file to $tftpboot.");
copy("$ramdisk", "$tftpboot/$tftp_ramdisk") or
  croak("Unable to copy $bootpackage initrd.img file to $tftpboot.");

verbose("Symlinking SystemImager $bootpackage boot kernel and initrd.img to $tftpboot/kernel and $tftpboot/initrd.img respectively");
symlink("$tftpboot/$tftp_kernel", "$tftpboot/kernel") or
  croak("Unable to symlink $bootpackage boot kernel file to $tftpboot.");
symlink("$tftpboot/$tftp_ramdisk", "$tftpboot/initrd.img") or 
  croak("Unable to symlink $bootpackage initrd.img file to $tftpboot.");

# setup netbootmgr for multi-arch boot

#...

exit 0; 

sub check_args {
	# Get verbose option
	if ($options->verbose ||  $config->verbose){
		start_verbose;
	}
	verbose("Checking arguments.");
	if ($options->arch){
                $ARCH=$options->arch;
        }
        if (($ARCH ne "i386")&&($ARCH ne "ia64")&&($ARCH ne "x86_64")&&($ARCH ne "ppc64")) {
                carp("i386, x86_64, ia64 and PPC are the only valid architectures.");
                return 0;
        }
	return 1;

}# check_args

sub usage {
    my $progname = $0;
    if ($progname =~ m/(.+\/)(\w+)/) {
	$progname = $2;
    }
    print <<USAGE;
usage: $progname <options>

  options
    --arch <architecture>           the filename to write the output to
    -u, --uyok                      use SystemImager's UYOK kernel/ramdisk
                                    instead of the standard kernel/ramdisk
    -v, --verbose                   massive verbose output
    -p, --pxegrub <network_card_id> Setup PXE Grub for a given network card.

  Please refer to the man page for more details (man setup_pxe).

USAGE
} #usage

__END__

=head1 NAME

command shell to setup pxe network booting

=head1 SYNOPSIS

  setup_pxe --arch i386

=head1 DESCRIPTION

The setup_pxe command is used to configure a server
to respond properly to pxelinux boot requests.

=head2 Syntax

setup_pxe [options]

=head2 Options

Recognized options include:

=over 4

=item --arch <architecture>

The architecture to setup kernel. The default is the 
current machine's architecture.

=item --uyok

Since SystemImager 3.6.x, there is a new functionality called
UseYourOwnKernel (UYOK) which allows the usage of the running
OS' kernel and a ramdisk generated on the fly to boot client
nodes to be imaged using SystemImager.  With this option, a
UYOK kernel and ramdisk will be used to setup PXE boot on your
headnode.

=item --pxegrub <network_card_id>

Setup PXE Grub for a given network card. PXE Grub allows one to boot a node up
in disk-less mode not loading a kernel but a Grub image. This image can then
boot different kernels based on the network disk support from Grub.
This is especially usefull for fully disk-less virtual machines (i.e., disk-less
VMM, disk-less HostOS, and disk-less VMs).

=item -v, --verbose

Lots of trace and debug output.

=back

=head1 AUTHOR

Michael Chase-Salerno, mchasal@users.sf.net

=head1 SEE ALSO

L<perl(1)>

=cut
